This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: components
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
components/agents/agent-card.tsx
components/agents/agent-executor.tsx
components/agents/agents-header.tsx
components/agents/agents-list.tsx
components/agents/agents-loading.tsx
components/agents/create-agent-dialog.tsx
components/agents/edit-agent-dialog.tsx
components/appBuilder/appBuilderContainer.tsx
components/appBuilder/canvasDisplay.tsx
components/appBuilder/chatBar.tsx
components/auth/admin-github-sign-in-button.tsx
components/auth/github-sign-in-button.tsx
components/auth/sign-in-dialog.tsx
components/auth/sign-up-dialog.tsx
components/blog/blog-card.tsx
components/blog/blog-featured.tsx
components/chat/ai-image-generator.tsx
components/chat/ai-sdk-chat.tsx
components/chat/ai-sdk-chatHelper.module.css
components/chat/ai-sdk-chatHelper.tsx
components/chat/audio-player.tsx
components/chat/browser-display.tsx
components/chat/canvasDisplay.module.css
components/chat/canvasDisplay.tsx
components/chat/chat-message.tsx
components/chat/chat-sidebar.tsx
components/chat/code-block.tsx
components/chat/computer-use.tsx
components/chat/data-table.tsx
components/chat/data-visualization.tsx
components/chat/enhanced-chat.tsx
components/chat/file-upload.tsx
components/chat/image-display.tsx
components/chat/interactive-form.tsx
components/chat/interactive-map.tsx
components/chat/mermaid-diagram.tsx
components/chat/middleware-config.tsx
components/chat/model-viewer.tsx
components/chat/openai-assistant-chat.tsx
components/chat/screen-share.tsx
components/chat/three-viewer.tsx
components/chat/tracing-visualization.tsx
components/chat/visualization-with-tracing.tsx
components/dashboard/call-to-action.tsx
components/dashboard/dashboard-header.tsx
components/dashboard/dashboard-stats.tsx
components/dashboard/feature-card.tsx
components/dashboard/recent-activity.tsx
components/dashboard/stat-card.tsx
components/dashboard/system-metrics.tsx
components/integrations/connected-integration.tsx
components/integrations/integration-card.tsx
components/integrations/integration-steps.tsx
components/landing/architecture-section.tsx
components/landing/cta-section.tsx
components/landing/features-section.tsx
components/landing/footer-section.tsx
components/landing/hero-section.tsx
components/landing/use-cases-section.tsx
components/layout/dashboard-layout.tsx
components/layout/main-nav.tsx
components/layout/main-sidebar.tsx
components/layout/mode-toggle.tsx
components/layout/sidebar.tsx
components/layout/top-navbar.tsx
components/networks/networks-list.tsx
components/observability/cost-estimation.tsx
components/observability/model-evaluation.tsx
components/observability/model-performance.tsx
components/observability/system-health.tsx
components/observability/tracing-details.tsx
components/observability/tracing-overview.tsx
components/observability/tracing-timeline.tsx
components/theme-provider.tsx
components/tools/create-tool-dialog.tsx
components/tools/edit-tool-dialog.tsx
components/tools/enhanced-tool-card.tsx
components/tools/execute-tool-dialog.tsx
components/tools/tool-card.tsx
components/tools/tool-executor.tsx
components/tools/tools-header.tsx
components/tools/tools-list.tsx
components/tools/tools-loading.tsx
components/ui/accordion.tsx
components/ui/alert-dialog.tsx
components/ui/alert.tsx
components/ui/aspect-ratio.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/breadcrumb.tsx
components/ui/button.tsx
components/ui/calendar.tsx
components/ui/card.tsx
components/ui/carousel.tsx
components/ui/chart.tsx
components/ui/checkbox.tsx
components/ui/collapsible.tsx
components/ui/command.tsx
components/ui/context-menu.tsx
components/ui/data-table.tsx
components/ui/database-status.tsx
components/ui/dialog.tsx
components/ui/drawer.tsx
components/ui/dropdown-menu.tsx
components/ui/error-boundary.tsx
components/ui/form-container.tsx
components/ui/form.tsx
components/ui/gradient-avatar.tsx
components/ui/gradient-card.tsx
components/ui/hover-card.tsx
components/ui/input-otp.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/menubar.tsx
components/ui/navigation-menu.tsx
components/ui/pagination.tsx
components/ui/popover.tsx
components/ui/progress.tsx
components/ui/radio-group.tsx
components/ui/resizable.tsx
components/ui/scroll-area.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sheet.tsx
components/ui/sidebar.tsx
components/ui/skeleton.tsx
components/ui/slider.tsx
components/ui/sonner.tsx
components/ui/switch.tsx
components/ui/table.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
components/ui/toast.tsx
components/ui/toaster.tsx
components/ui/toggle-group.tsx
components/ui/toggle.tsx
components/ui/tooltip.tsx
components/ui/use-mobile.tsx
components/ui/use-toast.ts

================================================================
Files
================================================================

================
File: components/agents/agents-header.tsx
================
"use client"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, Filter } from "lucide-react"
import { useState } from "react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function AgentsHeader() {
  const [searchQuery, setSearchQuery] = useState("")

  return (
    <div className="mb-8 space-y-4">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-white">Agents</h1>
          <p className="text-gray-400 mt-1">Create and manage your AI agents</p>
        </div>
        <div className="flex items-center gap-2 w-full sm:w-auto">
          <div className="relative flex-1 sm:flex-initial">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
            <Input
              type="text"
              placeholder="Search agents..."
              className="pl-8 bg-gray-900 border-gray-800 w-full"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="icon">
                <Filter className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Filter By</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Recently Created</DropdownMenuItem>
              <DropdownMenuItem>Alphabetical (A-Z)</DropdownMenuItem>
              <DropdownMenuItem>Alphabetical (Z-A)</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuLabel>Status</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Active</DropdownMenuItem>
              <DropdownMenuItem>Inactive</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>
  )
}

================
File: components/agents/agents-list.tsx
================
"use client"

import { useState } from "react"
import { AgentCard } from "@/components/agents/agent-card"
import { Button } from "@/components/ui/button"
import { PlusCircle, RefreshCw } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { CreateAgentDialog } from "@/components/agents/create-agent-dialog"
import type { Agent } from "@/types/agents"
import { Skeleton } from "@/components/ui/skeleton"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"

export function AgentsList() {
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const { toast } = useToast()

  // Use the standardized hook for fetching agents
  const {
    data: agents,
    isLoading,
    error,
    refresh: fetchAgents,
  } = useSupabaseFetch<Agent>({
    endpoint: "/api/agents",
    resourceName: "Agents",
    dataKey: "agents",
  })

  const handleRefresh = () => {
    setIsRefreshing(true)
    fetchAgents().finally(() => setIsRefreshing(false))
  }

  const handleCreateAgent = async (newAgent: Omit<Agent, "id">) => {
    try {
      const response = await fetch("/api/agents", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newAgent),
      })

      if (!response.ok) {
        throw new Error(`Error creating agent: ${response.statusText}`)
      }

      // Refresh the agents list after creating a new agent
      fetchAgents()

      toast({
        title: "Success",
        description: "Agent created successfully!",
      })

      setIsDialogOpen(false)
    } catch (err) {
      console.error("Failed to create agent:", err)
      toast({
        title: "Error",
        description: "Failed to create agent. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleDeleteAgent = async (id: string) => {
    try {
      const response = await fetch(`/api/agents/${id}`, {
        method: "DELETE",
      })

      if (!response.ok) {
        throw new Error(`Error deleting agent: ${response.statusText}`)
      }

      // Refresh the agents list after deleting an agent
      fetchAgents()

      toast({
        title: "Success",
        description: "Agent deleted successfully!",
      })
    } catch (err) {
      console.error("Failed to delete agent:", err)
      toast({
        title: "Error",
        description: "Failed to delete agent. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleUpdateAgent = async (updatedAgent: Agent) => {
    try {
      const response = await fetch(`/api/agents/${updatedAgent.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedAgent),
      })

      if (!response.ok) {
        throw new Error(`Error updating agent: ${response.statusText}`)
      }

      // Refresh the agents list after updating an agent
      fetchAgents()

      toast({
        title: "Success",
        description: "Agent updated successfully!",
      })
    } catch (err) {
      console.error("Failed to update agent:", err)
      toast({
        title: "Error",
        description: "Failed to update agent. Please try again.",
        variant: "destructive",
      })
    }
  }

  if (error) {
    return (
      <Alert variant="destructive" className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>{error.message}</AlertDescription>
        <Button variant="outline" size="sm" className="mt-2" onClick={fetchAgents}>
          Try Again
        </Button>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-white">Available Agents</h2>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" onClick={handleRefresh} disabled={isRefreshing}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? "animate-spin" : ""}`} />
            Refresh
          </Button>
          <Button variant="default" size="sm" onClick={() => setIsDialogOpen(true)}>
            <PlusCircle className="h-4 w-4 mr-2" />
            New Agent
          </Button>
        </div>
      </div>

      {isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, index) => (
            <div key={index} className="border rounded-lg p-4 bg-gray-900 border-gray-800">
              <Skeleton className="h-8 w-3/4 mb-4" />
              <Skeleton className="h-4 w-full mb-2" />
              <Skeleton className="h-4 w-2/3 mb-4" />
              <div className="flex justify-between mt-4">
                <Skeleton className="h-8 w-20" />
                <Skeleton className="h-8 w-20" />
              </div>
            </div>
          ))}
        </div>
      ) : agents.length === 0 ? (
        <div className="text-center py-12 bg-gray-900 rounded-lg border border-gray-800">
          <h3 className="text-xl font-medium text-gray-300 mb-2">No agents found</h3>
          <p className="text-gray-400 mb-6">Create your first agent to get started</p>
          <Button variant="default" onClick={() => setIsDialogOpen(true)}>
            <PlusCircle className="h-4 w-4 mr-2" />
            Create Agent
          </Button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {agents.map((agent) => (
            <AgentCard key={agent.id} agent={agent} onDelete={handleDeleteAgent} onUpdate={handleUpdateAgent} />
          ))}
        </div>
      )}

      <CreateAgentDialog
        isOpen={isDialogOpen}
        onClose={() => setIsDialogOpen(false)}
        onCreateAgent={handleCreateAgent}
      />
    </div>
  )
}

================
File: components/agents/agents-loading.tsx
================
import { Skeleton } from "@/components/ui/skeleton"

export function AgentsLoading() {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-48" />
        <div className="flex space-x-2">
          <Skeleton className="h-9 w-24" />
          <Skeleton className="h-9 w-24" />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(6)].map((_, index) => (
          <div key={index} className="border rounded-lg p-4 bg-gray-900 border-gray-800">
            <Skeleton className="h-8 w-3/4 mb-4" />
            <Skeleton className="h-4 w-full mb-2" />
            <Skeleton className="h-4 w-2/3 mb-4" />
            <div className="flex justify-between mt-4">
              <Skeleton className="h-8 w-20" />
              <Skeleton className="h-8 w-20" />
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}

================
File: components/agents/create-agent-dialog.tsx
================
"use client"

import type React from "react"

import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import type { Agent } from "@/types/agents"
import { Loader2 } from "lucide-react"

interface CreateAgentDialogProps {
  isOpen: boolean
  onClose: () => void
  onCreateAgent: (agent: Omit<Agent, "id">) => Promise<void>
}

export function CreateAgentDialog({ isOpen, onClose, onCreateAgent }: CreateAgentDialogProps) {
  const [name, setName] = useState("")
  const [description, setDescription] = useState("")
  const [type, setType] = useState("assistant")
  const [model, setModel] = useState("gpt-4")
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!name.trim()) {
      newErrors.name = "Name is required"
    }

    if (!description.trim()) {
      newErrors.description = "Description is required"
    }

    if (!type) {
      newErrors.type = "Type is required"
    }

    if (!model) {
      newErrors.model = "Model is required"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      await onCreateAgent({
        name,
        description,
        type,
        model,
        status: "active",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      })

      // Reset form
      setName("")
      setDescription("")
      setType("assistant")
      setModel("gpt-4")
      setErrors({})
    } catch (error) {
      console.error("Error creating agent:", error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleClose = () => {
    setName("")
    setDescription("")
    setType("assistant")
    setModel("gpt-4")
    setErrors({})
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px] bg-gray-950 border-gray-800">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle className="text-xl text-white">Create New Agent</DialogTitle>
            <DialogDescription>Configure your AI agent with the details below.</DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="name" className={errors.name ? "text-red-500" : ""}>
                Name {errors.name && <span className="text-red-500">*</span>}
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter agent name"
                className={`bg-gray-900 border-gray-800 ${errors.name ? "border-red-500" : ""}`}
              />
              {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="description" className={errors.description ? "text-red-500" : ""}>
                Description {errors.description && <span className="text-red-500">*</span>}
              </Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Enter agent description"
                className={`bg-gray-900 border-gray-800 min-h-[100px] ${errors.description ? "border-red-500" : ""}`}
              />
              {errors.description && <p className="text-red-500 text-sm">{errors.description}</p>}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="type" className={errors.type ? "text-red-500" : ""}>
                  Type {errors.type && <span className="text-red-500">*</span>}
                </Label>
                <Select value={type} onValueChange={setType}>
                  <SelectTrigger className={`bg-gray-900 border-gray-800 ${errors.type ? "border-red-500" : ""}`}>
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-900 border-gray-800">
                    <SelectItem value="assistant">Assistant</SelectItem>
                    <SelectItem value="chatbot">Chatbot</SelectItem>
                    <SelectItem value="researcher">Researcher</SelectItem>
                    <SelectItem value="custom">Custom</SelectItem>
                  </SelectContent>
                </Select>
                {errors.type && <p className="text-red-500 text-sm">{errors.type}</p>}
              </div>

              <div className="grid gap-2">
                <Label htmlFor="model" className={errors.model ? "text-red-500" : ""}>
                  Model {errors.model && <span className="text-red-500">*</span>}
                </Label>
                <Select value={model} onValueChange={setModel}>
                  <SelectTrigger className={`bg-gray-900 border-gray-800 ${errors.model ? "border-red-500" : ""}`}>
                    <SelectValue placeholder="Select model" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-900 border-gray-800">
                    <SelectItem value="gpt-4">GPT-4</SelectItem>
                    <SelectItem value="gpt-4o">GPT-4o</SelectItem>
                    <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</SelectItem>
                    <SelectItem value="claude-3-opus">Claude 3 Opus</SelectItem>
                    <SelectItem value="claude-3-sonnet">Claude 3 Sonnet</SelectItem>
                    <SelectItem value="gemini-pro">Gemini Pro</SelectItem>
                  </SelectContent>
                </Select>
                {errors.model && <p className="text-red-500 text-sm">{errors.model}</p>}
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={handleClose} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create Agent"
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/agents/edit-agent-dialog.tsx
================
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import type { Agent } from "@/types/agents"
import { Loader2 } from "lucide-react"

interface EditAgentDialogProps {
  isOpen: boolean
  onClose: () => void
  agent: Agent
  onUpdateAgent: (agent: Agent) => Promise<void>
}

export function EditAgentDialog({ isOpen, onClose, agent, onUpdateAgent }: EditAgentDialogProps) {
  const [name, setName] = useState(agent.name)
  const [description, setDescription] = useState(agent.description)
  const [type, setType] = useState(agent.type)
  const [model, setModel] = useState(agent.model)
  const [status, setStatus] = useState(agent.status)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})

  useEffect(() => {
    if (isOpen) {
      setName(agent.name)
      setDescription(agent.description)
      setType(agent.type)
      setModel(agent.model)
      setStatus(agent.status)
      setErrors({})
    }
  }, [isOpen, agent])

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!name.trim()) {
      newErrors.name = "Name is required"
    }

    if (!description.trim()) {
      newErrors.description = "Description is required"
    }

    if (!type) {
      newErrors.type = "Type is required"
    }

    if (!model) {
      newErrors.model = "Model is required"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      await onUpdateAgent({
        ...agent,
        name,
        description,
        type,
        model,
        status,
        updatedAt: new Date().toISOString(),
      })

      onClose()
    } catch (error) {
      console.error("Error updating agent:", error)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px] bg-gray-950 border-gray-800">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle className="text-xl text-white">Edit Agent</DialogTitle>
            <DialogDescription>Update your AI agent details below.</DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="name" className={errors.name ? "text-red-500" : ""}>
                Name {errors.name && <span className="text-red-500">*</span>}
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter agent name"
                className={`bg-gray-900 border-gray-800 ${errors.name ? "border-red-500" : ""}`}
              />
              {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="description" className={errors.description ? "text-red-500" : ""}>
                Description {errors.description && <span className="text-red-500">*</span>}
              </Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Enter agent description"
                className={`bg-gray-900 border-gray-800 min-h-[100px] ${errors.description ? "border-red-500" : ""}`}
              />
              {errors.description && <p className="text-red-500 text-sm">{errors.description}</p>}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="type" className={errors.type ? "text-red-500" : ""}>
                  Type {errors.type && <span className="text-red-500">*</span>}
                </Label>
                <Select value={type} onValueChange={setType}>
                  <SelectTrigger className={`bg-gray-900 border-gray-800 ${errors.type ? "border-red-500" : ""}`}>
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-900 border-gray-800">
                    <SelectItem value="assistant">Assistant</SelectItem>
                    <SelectItem value="chatbot">Chatbot</SelectItem>
                    <SelectItem value="researcher">Researcher</SelectItem>
                    <SelectItem value="custom">Custom</SelectItem>
                  </SelectContent>
                </Select>
                {errors.type && <p className="text-red-500 text-sm">{errors.type}</p>}
              </div>

              <div className="grid gap-2">
                <Label htmlFor="model" className={errors.model ? "text-red-500" : ""}>
                  Model {errors.model && <span className="text-red-500">*</span>}
                </Label>
                <Select value={model} onValueChange={setModel}>
                  <SelectTrigger className={`bg-gray-900 border-gray-800 ${errors.model ? "border-red-500" : ""}`}>
                    <SelectValue placeholder="Select model" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-900 border-gray-800">
                    <SelectItem value="gpt-4">GPT-4</SelectItem>
                    <SelectItem value="gpt-4o">GPT-4o</SelectItem>
                    <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</SelectItem>
                    <SelectItem value="claude-3-opus">Claude 3 Opus</SelectItem>
                    <SelectItem value="claude-3-sonnet">Claude 3 Sonnet</SelectItem>
                    <SelectItem value="gemini-pro">Gemini Pro</SelectItem>
                  </SelectContent>
                </Select>
                {errors.model && <p className="text-red-500 text-sm">{errors.model}</p>}
              </div>
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="status">Active Status</Label>
              <Switch
                id="status"
                checked={status === "active"}
                onCheckedChange={(checked) => setStatus(checked ? "active" : "inactive")}
              />
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Updating...
                </>
              ) : (
                "Update Agent"
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/appBuilder/appBuilderContainer.tsx
================
// components/appBuilder/appBuilderContainer.tsx
import React, { useState } from 'react';
import { ChatBar, Message } from './chatBar'; // Assuming ChatBar is updated to use @ai-sdk/react and exports Message
import { CanvasDisplay } from './canvasDisplay'; // Assuming CanvasDisplay is updated with CodeMirror
import { Button } from '@/components/ui/button'; // Assuming you have a Button component

export function AppBuilderContainer() {
  const [canvasMode, setCanvasMode] = useState<'terminal' | 'canvas' | 'code'>('terminal');
  const [canvasContent, setCanvasContent] = useState<string>('');
  const [chatMessages, setChatMessages] = useState<Message[]>([]); // State to potentially manage chat history externally if needed

  // Function to analyze AI message and update canvas display
  const handleAssistantMessage = (assistantMessage: string, fullResponse?: Message) => {
    console.log("Assistant message received:", assistantMessage);

    // Update chat messages state (optional, if you want to manage history here)
    // setChatMessages((prev) => [...prev, fullResponse].filter(Boolean) as Message[]);

    // Basic logic to determine canvas mode based on message content
    // This is a simple example; more sophisticated parsing might be needed
    if (assistantMessage.includes('```typescript') || assistantMessage.includes('```javascript') || assistantMessage.includes('```json')) {
      setCanvasMode('code');
      // Extract code block - this is a simplified regex example
      const codeMatch = assistantMessage.match(/```(typescript|javascript|json)\n([\s\S]*?)```/);
      if (codeMatch && codeMatch[2]) {
        setCanvasContent(codeMatch[2].trim());
      } else {
        setCanvasContent(assistantMessage); // Fallback to full message if extraction fails
      }
    } else if (assistantMessage.includes('$ ') || assistantMessage.includes('> ')) { // Simple check for command prompts
       setCanvasMode('terminal');
       setCanvasContent(assistantMessage);
    }
     else {
      setCanvasMode('terminal'); // Default to terminal for other messages
      setCanvasContent(assistantMessage);
    }

    // You could also use the fullResponse object for more structured data if your API provides it
    // if (fullResponse?.toolCalls) { ... }
  };

  const handleClearCanvas = () => {
    setCanvasContent('');
    setCanvasMode('terminal'); // Reset to default mode
  };

  const handleClearChat = () => {
    // This would require a way to clear messages in the ChatBar,
    // which might involve passing a function down or resetting initialMessages.
    // If using useChat, you might need to reset its internal state or key the component.
    console.log("Clear chat functionality to be implemented in ChatBar");
    // For now, we'll just log. Clearing useChat state directly isn't straightforward.
    // A potential approach is to re-mount the ChatBar component with an empty initialMessages array.
  };


  return (
    <div className="flex flex-col h-full">
      <div className="flex-1 overflow-hidden p-4">
        {/* Other app builder components could go here */}
        <div className="mb-4 flex justify-end gap-2">
             <Button onClick={handleClearCanvas} variant="outline" size="sm">Clear Canvas</Button>
             {/* Clear Chat button - functionality needs implementation in ChatBar */}
             {/* <Button onClick={handleClearChat} variant="outline" size="sm">Clear Chat</Button> */}
        </div>
        <CanvasDisplay mode={canvasMode} content={canvasContent} className="h-full" />
      </div>
      <div className="p-4 border-t bg-background">
         <ChatBar onMessageSend={handleAssistantMessage} />
      </div>
    </div>
  );
}

================
File: components/auth/admin-github-sign-in-button.tsx
================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Github, Shield } from 'lucide-react'
import { createBrowserClient } from '@supabase/ssr'
import { useToast } from '@/components/ui/use-toast'
import type { Database } from '@/types/supabase'

interface AdminGitHubSignInButtonProps {
  className?: string
  children?: React.ReactNode
}

/**
 * Admin GitHub Sign In Button
 * Initiates the GitHub OAuth flow using Supabase Auth specifically for admin login
 */
export function AdminGitHubSignInButton({
  className,
  children,
}: AdminGitHubSignInButtonProps) {
  const [isLoading, setIsLoading] = useState(false)
  const { toast } = useToast()
  
  // Create a Supabase browser client
  const supabase = createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
  
  const handleSignIn = async () => {
    try {
      setIsLoading(true)
      
      // Initiate GitHub OAuth flow
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: `${window.location.origin}/api/auth/callback/admin-github`,
          scopes: 'read:user user:email',
        },
      })
      
      if (error) {
        throw error
      }
      
      // The user will be redirected to GitHub for authentication
    } catch (error) {
      console.error('GitHub sign in error:', error)
      toast({
        title: 'Authentication Error',
        description: 'Failed to initiate GitHub sign in. Please try again.',
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }
  
  return (
    <Button
      variant="outline"
      onClick={handleSignIn}
      disabled={isLoading}
      className={`flex items-center gap-2 w-full relative overflow-hidden group ${className}`}
    >
      {/* Animated gradient background */}
      <div className="absolute inset-0 bg-gradient-to-r from-green-500/5 via-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity" />
      
      <div className="flex items-center gap-2 relative z-10">
        <div className="flex gap-1">
          <Github className="h-4 w-4" />
          <Shield className="h-3 w-3 absolute -right-1 -top-1" />
        </div>
        {isLoading ? 'Connecting...' : children || 'Sign in with GitHub (Admin)'}
      </div>
    </Button>
  )
}

================
File: components/auth/github-sign-in-button.tsx
================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Github } from 'lucide-react'
import { createBrowserClient } from '@supabase/ssr'
import { useToast } from '@/components/ui/use-toast'
import type { Database } from '@/types/supabase'

interface GitHubSignInButtonProps {
  redirectTo?: string
  mode?: 'button' | 'link'
  className?: string
  children?: React.ReactNode
}

/**
 * GitHub Sign In Button
 * Initiates the GitHub OAuth flow using Supabase Auth
 */
export function GitHubSignInButton({
  redirectTo = '/',
  mode = 'button',
  className,
  children,
}: GitHubSignInButtonProps) {
  const [isLoading, setIsLoading] = useState(false)
  const { toast } = useToast()
  
  // Create a Supabase browser client
  const supabase = createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
  
  const handleSignIn = async () => {
    try {
      setIsLoading(true)
      
      // Initiate GitHub OAuth flow
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'github',
        options: {
          redirectTo: `${window.location.origin}/api/auth/callback/github?next=${redirectTo}`,
          scopes: 'read:user user:email',
        },
      })
      
      if (error) {
        throw error
      }
      
      // The user will be redirected to GitHub for authentication
    } catch (error) {
      console.error('GitHub sign in error:', error)
      toast({
        title: 'Authentication Error',
        description: 'Failed to initiate GitHub sign in. Please try again.',
        variant: 'destructive',
      })
    } finally {
      setIsLoading(false)
    }
  }
  
  if (mode === 'link') {
    return (
      <Button
        variant="link"
        onClick={handleSignIn}
        disabled={isLoading}
        className={className}
      >
        {isLoading ? 'Connecting...' : children || 'Sign in with GitHub'}
      </Button>
    )
  }
  
  return (
    <Button
      variant="outline"
      onClick={handleSignIn}
      disabled={isLoading}
      className={`flex items-center gap-2 ${className}`}
    >
      <Github className="h-4 w-4" />
      {isLoading ? 'Connecting...' : children || 'Sign in with GitHub'}
    </Button>
  )
}

================
File: components/blog/blog-card.tsx
================
"use client"

import Link from "next/link"
import { motion } from "framer-motion"
import { Calendar, User } from "lucide-react"

import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

interface BlogPost {
  id: string
  title: string
  excerpt: string
  author: string
  imageUrl: string
  tags: string
  publishedAt: string
}

interface BlogCardProps {
  post: BlogPost
}

export function BlogCard({ post }: BlogCardProps) {
  const tagArray = post.tags ? post.tags.split(",").map((tag) => tag.trim()) : []
  const publishedDate = new Date(post.publishedAt).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  })

  return (
    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }}>
      <Link href={`/blog/${post.id}`}>
        <Card className="overflow-hidden h-full flex flex-col hover:shadow-md transition-shadow">
          <div className="aspect-video overflow-hidden">
            <img
              src={post.imageUrl || "/placeholder.svg?height=400&width=600"}
              alt={post.title}
              className="w-full h-full object-cover transition-transform hover:scale-105"
            />
          </div>
          <CardHeader className="p-4 pb-2">
            <h3 className="text-xl font-semibold line-clamp-2">{post.title}</h3>
          </CardHeader>
          <CardContent className="p-4 pt-2 flex-grow">
            <p className="text-muted-foreground line-clamp-3">{post.excerpt}</p>
            <div className="flex flex-wrap gap-2 mt-3">
              {tagArray.slice(0, 3).map((tag, index) => (
                <Badge key={index} variant="secondary" className="font-normal">
                  {tag}
                </Badge>
              ))}
              {tagArray.length > 3 && (
                <Badge variant="outline" className="font-normal">
                  +{tagArray.length - 3}
                </Badge>
              )}
            </div>
          </CardContent>
          <CardFooter className="p-4 pt-0 text-sm text-muted-foreground">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-1">
                <User className="h-3 w-3" />
                <span>{post.author}</span>
              </div>
              <div className="flex items-center gap-1">
                <Calendar className="h-3 w-3" />
                <span>{publishedDate}</span>
              </div>
            </div>
          </CardFooter>
        </Card>
      </Link>
    </motion.div>
  )
}

================
File: components/blog/blog-featured.tsx
================
"use client"

import Link from "next/link"
import { motion } from "framer-motion"
import { Calendar, User, ArrowRight } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

interface BlogPost {
  id: string
  title: string
  excerpt: string
  author: string
  imageUrl: string
  tags: string
  publishedAt: string
}

interface BlogFeaturedProps {
  post: BlogPost
}

export function BlogFeatured({ post }: BlogFeaturedProps) {
  const tagArray = post.tags ? post.tags.split(",").map((tag) => tag.trim()) : []
  const publishedDate = new Date(post.publishedAt).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  })

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}
      className="relative overflow-hidden rounded-xl"
    >
      <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-black/30 z-10" />
      <img
        src={post.imageUrl || "/placeholder.svg?height=600&width=1200"}
        alt={post.title}
        className="w-full h-[400px] object-cover"
      />
      <div className="absolute inset-0 z-20 flex flex-col justify-end p-6 text-white">
        <Badge className="w-fit mb-4 bg-primary hover:bg-primary/90">Featured</Badge>
        <h2 className="text-3xl font-bold mb-2">{post.title}</h2>
        <p className="text-white/80 mb-4 max-w-2xl">{post.excerpt}</p>
        <div className="flex flex-wrap gap-2 mb-4">
          {tagArray.slice(0, 4).map((tag, index) => (
            <Badge key={index} variant="secondary" className="font-normal">
              {tag}
            </Badge>
          ))}
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4 text-sm text-white/70">
            <div className="flex items-center gap-1">
              <User className="h-3 w-3" />
              <span>{post.author}</span>
            </div>
            <div className="flex items-center gap-1">
              <Calendar className="h-3 w-3" />
              <span>{publishedDate}</span>
            </div>
          </div>
          <Button asChild className="bg-white text-black hover:bg-white/90">
            <Link href={`/blog/${post.id}`}>
              Read Article
              <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>
    </motion.div>
  )
}

================
File: components/chat/ai-sdk-chatHelper.module.css
================
.parseErrorRoot {
  background: #fff7f7;
  border: 1px solid #ffccc7;
  border-radius: 6px;
  padding: 12px;
  margin: 8px 0;
  color: #cf1322;
  font-size: 0.95rem;
}
.parseErrorTitle {
  color: #cf1322;
  font-weight: bold;
  margin: 0 0 8px 0;
}
.parseErrorMessage {
  color: #d4380d;
  margin: 0 0 8px 0;
}
.parseErrorPre {
  white-space: pre-wrap;
  color: #595959;
  background: #f0f0f0;
  padding: 8px;
  border-radius: 3px;
  max-height: 150px;
  overflow-y: auto;
  margin: 0 0 8px 0;
}
.parseErrorOriginalLabel {
  margin-top: 8px;
  font-style: italic;
  color: #8c8c8c;
}
.parseErrorCode {
  background: #f0f0f0;
  padding: 2px 4px;
  border-radius: 3px;
}

================
File: components/chat/canvasDisplay.module.css
================
.canvasDisplayRoot {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.canvas {
  border: 1px solid #ccc;
  background: #18181b;
  border-radius: 8px;
  width: 100%;
  max-width: 600px;
  height: 400px;
  display: block;
}

.terminal {
  width: 600px;
  height: 400px;
  background: #18181b;
  border-radius: 8px;
  overflow: hidden;
}

.drawingStatus {
  font-size: 0.75rem;
  color: var(--muted-foreground, #888);
}

================
File: components/chat/file-upload.tsx
================
"use client"

import type React from "react"

import { useRef } from "react"
import { Paperclip } from "lucide-react"
import { Button } from "@/components/ui/button"
import { toast } from "sonner"

interface FileUploadProps {
  onUpload: (files: File[]) => void
  maxSize?: number // in MB
  accept?: string
}

export function FileUpload({
  onUpload,
  maxSize = 10, // Default 10MB
  accept = "image/*,text/*,application/pdf,application/json",
}: FileUploadProps) {
  const inputRef = useRef<HTMLInputElement>(null)

  const handleClick = () => {
    inputRef.current?.click()
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || [])

    // Check file size
    const oversizedFiles = files.filter((file) => file.size > maxSize * 1024 * 1024)

    if (oversizedFiles.length > 0) {
      toast.error(`Some files exceed the ${maxSize}MB limit`, {
        description: oversizedFiles.map((f) => f.name).join(", "),
      })

      // Filter out oversized files
      const validFiles = files.filter((file) => file.size <= maxSize * 1024 * 1024)
      onUpload(validFiles)
    } else {
      onUpload(files)
    }

    // Reset input
    if (inputRef.current) {
      inputRef.current.value = ""
    }
  }

  return (
    <>
      <input type="file" ref={inputRef} className="hidden" onChange={handleChange} multiple accept={accept} />
      <Button type="button" variant="outline" size="icon" onClick={handleClick}>
        <Paperclip className="h-4 w-4" />
        <span className="sr-only">Attach files</span>
      </Button>
    </>
  )
}

================
File: components/chat/middleware-config.tsx
================
// components/chat/middleware-config.tsx
import { useState } from 'react'
import { Switch } from '@/components/ui/switch'
import { Label } from '@/components/ui/label'
import { Slider } from '@/components/ui/slider'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
interface MiddlewareConfigProps {
  caching: {
    enabled: boolean;
    ttl: number;
    maxSize: number;
  }
  reasoning: {
    enabled: boolean;
    tagName: string;
    startWithReasoning: boolean;
  }
  simulation: {
    enabled: boolean;
  };
  logging: {
    enabled: boolean;
    logParams: boolean;
    logResults: boolean;
  }
  onChange: (config: any) => void;
}
export function MiddlewareConfig({
  caching,
  reasoning,
  simulation,
  logging,  onChange
}: MiddlewareConfigProps) {  return (
    <Card>      <CardHeader>
        <CardTitle>Middleware Configuration</CardTitle>      </CardHeader>
      <CardContent className="space-y-4">        <div className="space-y-2">
          <div className="flex items-center justify-between">            <Label htmlFor="caching-enabled">Enable Caching</Label>
            <Switch              id="caching-enabled"
              checked={caching.enabled}              onCheckedChange={(checked) => 
                onChange({ caching: { ...caching, enabled: checked } })              }
            />          </div>
          {caching.enabled && (            <div className="space-y-2 pl-4 mt-2">
              <div className="space-y-1">                <Label htmlFor="caching-ttl">Cache TTL (ms): {caching.ttl}</Label>
                <Slider                  id="caching-ttl"
                  min={1000}                  max={300000}
                  step={1000}                  value={[caching.ttl]}
                  onValueChange={(value) =>                     onChange({ caching: { ...caching, ttl: value[0] } })
                  }                />
              </div>              <div className="space-y-1">
                <Label htmlFor="caching-max-size">Max Cache Size: {caching.maxSize}</Label>                <Slider
                  id="caching-max-size"                  min={10}
                  max={500}                  step={10}
                  value={[caching.maxSize]}                  onValueChange={(value) => 
                    onChange({ caching: { ...caching, maxSize: value[0] } })                  }
                />              </div>
            </div>          )}
        </div>        
        {/* Similar sections for reasoning, simulation, and logging */}      </CardContent>
    </Card>
  )
}

================
File: components/chat/three-viewer.tsx
================
"use client"

import { useRef, useEffect, useState } from "react"
import { cn } from "@/lib/utils"

// Import Three.js dynamically to avoid SSR issues
let THREE: any
let OrbitControls: any

interface ThreeViewerProps {
  modelUrl: string
  format: string
  backgroundColor?: string
  autoRotate?: boolean
  className?: string
}

export function ThreeViewer({
  modelUrl,
  format,
  backgroundColor = "#f5f5f5",
  autoRotate = true,
  className
}: ThreeViewerProps) {
  const containerRef = useRef<HTMLDivElement>(null)
  const rendererRef = useRef<any>(null)
  const sceneRef = useRef<any>(null)
  const cameraRef = useRef<any>(null)
  const controlsRef = useRef<any>(null)
  const modelRef = useRef<any>(null)
  const animationMixerRef = useRef<any>(null)
  const clockRef = useRef<any>(null)
  const animationFrameRef = useRef<number>()
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // Initialize Three.js
  useEffect(() => {
    const initThree = async () => {
      if (typeof window === 'undefined') return

      try {
        // Dynamically import Three.js modules
        const threeModule = await import('three')
        THREE = threeModule
        
        const { OrbitControls: OrbitControlsImport } = await import('three/examples/jsm/controls/OrbitControls')
        OrbitControls = OrbitControlsImport
        
        // Import loaders based on format
        let loader
        
        if (format === 'gltf' || format === 'glb') {
          const { GLTFLoader } = await import('three/examples/jsm/loaders/GLTFLoader')
          loader = new GLTFLoader()
        } else if (format === 'obj') {
          const { OBJLoader } = await import('three/examples/jsm/loaders/OBJLoader')
          loader = new OBJLoader()
        } else if (format === 'stl') {
          const { STLLoader } = await import('three/examples/jsm/loaders/STLLoader')
          loader = new STLLoader()
        } else {
          throw new Error(`Unsupported format: ${format}`)
        }
        
        // Initialize scene, camera, renderer
        setupScene()
        
        // Load model
        loadModel(loader)
        
        // Set up event listeners
        setupEventListeners()
        
        // Start animation loop
        animate()
      } catch (err) {
        console.error('Failed to initialize Three.js:', err)
        setError('Failed to initialize 3D viewer')
        setIsLoading(false)
      }
    }
    
    initThree()
    
    return () => {
      // Clean up
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current)
      }
      
      if (rendererRef.current) {
        rendererRef.current.dispose()
      }
      
      if (sceneRef.current) {
        disposeScene(sceneRef.current)
      }
    }
  }, [format, modelUrl])
  
  // Set up scene, camera, renderer
  const setupScene = () => {
    if (!containerRef.current) return
    
    // Create scene
    const scene = new THREE.Scene()
    scene.background = new THREE.Color(backgroundColor)
    sceneRef.current = scene
    
    // Create camera
    const camera = new THREE.PerspectiveCamera(
      45,
      containerRef.current.clientWidth / containerRef.current.clientHeight,
      0.1,
      1000
    )
    camera.position.z = 5
    cameraRef.current = camera
    
    // Create renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })
    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight)
    renderer.setPixelRatio(window.devicePixelRatio)
    renderer.outputEncoding = THREE.sRGBEncoding
    renderer.shadowMap.enabled = true
    containerRef.current.appendChild(renderer.domElement)
    rendererRef.current = renderer
    
    // Create controls
    const controls = new OrbitControls(camera, renderer.domElement)
    controls.enableDamping = true
    controls.dampingFactor = 0.05
    controls.autoRotate = autoRotate
    controls.autoRotateSpeed = 1.0
    controlsRef.current = controls
    
    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5)
    scene.add(ambientLight)
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1)
    directionalLight.position.set(1, 1, 1)
    scene.add(directionalLight)
    
    // Create clock for animations
    clockRef.current = new THREE.Clock()
  }
  
  // Load 3D model
  const loadModel = (loader: any) => {
    if (!sceneRef.current) return
    
    setIsLoading(true)
    
    // Handle different formats
    if (format === 'gltf' || format === 'glb') {
      loader.load(
        modelUrl,
        (gltf: any) => {
          const model = gltf.scene
          
          // Center model
          const box = new THREE.Box3().setFromObject(model)
          const center = box.getCenter(new THREE.Vector3())
          const size = box.getSize(new THREE.Vector3())
          const maxDim = Math.max(size.x, size.y, size.z)
          const scale = 2 / maxDim
          
          model.position.sub(center)
          model.scale.multiplyScalar(scale)
          
          // Add model to scene
          sceneRef.current.add(model)
          modelRef.current = model
          
          // Set up animations if available
          if (gltf.animations && gltf.animations.length > 0) {
            animationMixerRef.current = new THREE.AnimationMixer(model)
            const action = animationMixerRef.current.clipAction(gltf.animations[0])
            action.play()
          }
          
          setIsLoading(false)
        },
        (progress: any) => {
          // Handle progress
        },
        (error: any) => {
          console.error('Error loading GLTF/GLB model:', error)
          setError('Failed to load 3D model')
          setIsLoading(false)
        }
      )
    } else if (format === 'obj') {
      loader.load(
        modelUrl,
        (obj: any) => {
          // Center model
          const box = new THREE.Box3().setFromObject(obj)
          const center = box.getCenter(new THREE.Vector3())
          const size = box.getSize(new THREE.Vector3())
          const maxDim = Math.max(size.x, size.y, size.z)
          const scale = 2 / maxDim
          
          obj.position.sub(center)
          obj.scale.multiplyScalar(scale)
          
          // Add model to scene
          sceneRef.current.add(obj)
          modelRef.current = obj
          
          setIsLoading(false)
        },
        (progress: any) => {
          // Handle progress
        },
        (error: any) => {
          console.error('Error loading OBJ model:', error)
          setError('Failed to load 3D model')
          setIsLoading(false)
        }
      )
    } else if (format === 'stl') {
      loader.load(
        modelUrl,
        (geometry: any) => {
          const material = new THREE.MeshStandardMaterial({
            color: 0x7c7c7c,
            metalness: 0.2,
            roughness: 0.8
          })
          
          const mesh = new THREE.Mesh(geometry, material)
          
          // Center model
          geometry.computeBoundingBox()
          const box = geometry.boundingBox
          const center = new THREE.Vector3()
          box.getCenter(center)
          const size = new THREE.Vector3()
          box.getSize(size)
          const maxDim = Math.max(size.x, size.y, size.z)
          const scale = 2 / maxDim
          
          mesh.position.sub(center)
          mesh.scale.multiplyScalar(scale)
          
          // Add model to scene
          sceneRef.current.add(mesh)
          modelRef.current = mesh
          
          setIsLoading(false)
        },
        (progress: any) => {
          // Handle progress
        },
        (error: any) => {
          console.error('Error loading STL model:', error)
          setError('Failed to load 3D model')
          setIsLoading(false)
        }
      )
    }
  }
  
  // Set up event listeners
  const setupEventListeners = () => {
    if (!containerRef.current) return
    
    // Handle resize
    const handleResize = () => {
      if (!containerRef.current || !cameraRef.current || !rendererRef.current) return
      
      const width = containerRef.current.clientWidth
      const height = containerRef.current.clientHeight
      
      cameraRef.current.aspect = width / height
      cameraRef.current.updateProjectionMatrix()
      
      rendererRef.current.setSize(width, height)
    }
    
    window.addEventListener('resize', handleResize)
    
    // Handle reset view
    const handleResetView = () => {
      if (!cameraRef.current || !controlsRef.current) return
      
      cameraRef.current.position.set(0, 0, 5)
      cameraRef.current.lookAt(0, 0, 0)
      controlsRef.current.reset()
    }
    
    containerRef.current.addEventListener('reset-view', handleResetView)
    
    // Handle zoom
    const handleZoom = (event: any) => {
      if (!cameraRef.current) return
      
      const zoom = event.detail.zoom
      cameraRef.current.zoom = zoom
      cameraRef.current.updateProjectionMatrix()
    }
    
    containerRef.current.addEventListener('set-zoom', handleZoom)
    
    // Clean up event listeners
    return () => {
      window.removeEventListener('resize', handleResize)
      if (containerRef.current) {
        containerRef.current.removeEventListener('reset-view', handleResetView)
        containerRef.current.removeEventListener('set-zoom', handleZoom)
      }
    }
  }
  
  // Animation loop
  const animate = () => {
    if (!sceneRef.current || !cameraRef.current || !rendererRef.current) return
    
    animationFrameRef.current = requestAnimationFrame(animate)
    
    // Update controls
    if (controlsRef.current) {
      controlsRef.current.update()
    }
    
    // Update animations
    if (animationMixerRef.current && clockRef.current) {
      const delta = clockRef.current.getDelta()
      animationMixerRef.current.update(delta)
    }
    
    // Render scene
    rendererRef.current.render(sceneRef.current, cameraRef.current)
  }
  
  // Dispose of Three.js objects
  const disposeScene = (scene: any) => {
    scene.traverse((object: any) => {
      if (object.geometry) {
        object.geometry.dispose()
      }
      
      if (object.material) {
        if (Array.isArray(object.material)) {
          object.material.forEach((material: any) => disposeMaterial(material))
        } else {
          disposeMaterial(object.material)
        }
      }
    })
  }
  
  // Dispose of material and its textures
  const disposeMaterial = (material: any) => {
    if (material.map) material.map.dispose()
    if (material.lightMap) material.lightMap.dispose()
    if (material.bumpMap) material.bumpMap.dispose()
    if (material.normalMap) material.normalMap.dispose()
    if (material.specularMap) material.specularMap.dispose()
    if (material.envMap) material.envMap.dispose()
    
    material.dispose()
  }

  return (
    <div 
      ref={containerRef} 
      className={cn("w-full h-full relative", className)}
    >
      {isLoading && (
        <div className="absolute inset-0 flex items-center justify-center bg-background/80 backdrop-blur-sm z-10">
          <div className="flex flex-col items-center">
            <div className="h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mb-2"></div>
            <span className="text-sm text-muted-foreground">Loading 3D model...</span>
          </div>
        </div>
      )}
      
      {error && (
        <div className="absolute inset-0 flex items-center justify-center bg-background/80 backdrop-blur-sm z-10">
          <div className="p-4 bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-200 rounded-md max-w-xs text-center">
            <p className="font-medium mb-1">Error</p>
            <p className="text-sm">{error}</p>
          </div>
        </div>
      )}
    </div>
  )
}

================
File: components/chat/tracing-visualization.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import {
  Maximize, Minimize, Download, RefreshCw, Copy, Check, BarChart,
  PieChart, LineChart, Activity, Zap, Clock, AlertCircle
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"
import { createTrace, createSpan, logEvent } from "@/lib/langfuse-integration"

// Import Chart.js dynamically to avoid SSR issues
let Chart: any = null

interface TracingEvent {
  id: string
  name: string
  timestamp: string
  metadata: any
}

interface TracingSpan {
  id: string
  name: string
  startTime: string
  endTime: string
  duration: number
  metadata: any
}

interface TracingData {
  traceId: string
  events: TracingEvent[]
  spans: TracingSpan[]
}

interface TracingVisualizationProps {
  traceId?: string
  title?: string
  className?: string
  showControls?: boolean
  refreshInterval?: number
}

export function TracingVisualization({
  traceId,
  title = "Tracing Visualization",
  className,
  showControls = true,
  refreshInterval = 5000
}: TracingVisualizationProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [activeView, setActiveView] = useState<string>("timeline")
  const [tracingData, setTracingData] = useState<TracingData | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [chartInstance, setChartInstance] = useState<any>(null)

  // Fetch tracing data
  const fetchTracingData = async (id: string) => {
    setLoading(true)
    setError(null)
    
    try {
      // This is a mock implementation - in a real app, you would fetch from your Langfuse backend
      // const response = await fetch(`/api/tracing/${id}`)
      // const data = await response.json()
      
      // For demo purposes, we'll create mock data
      const mockData: TracingData = {
        traceId: id,
        events: [
          {
            id: "evt1",
            name: "visualization_initialized",
            timestamp: new Date(Date.now() - 5000).toISOString(),
            metadata: { chartType: "bar", dataSize: 1024 }
          },
          {
            id: "evt2",
            name: "chart_render_start",
            timestamp: new Date(Date.now() - 4000).toISOString(),
            metadata: { chartType: "bar", library: "chartjs" }
          },
          {
            id: "evt3",
            name: "chart_render_complete",
            timestamp: new Date(Date.now() - 3500).toISOString(),
            metadata: { chartType: "bar", library: "chartjs", renderTimeMs: 500 }
          },
          {
            id: "evt4",
            name: "chart_type_changed",
            timestamp: new Date(Date.now() - 2000).toISOString(),
            metadata: { previousType: "bar", newType: "line" }
          }
        ],
        spans: [
          {
            id: "spn1",
            name: "chart_rendering",
            startTime: new Date(Date.now() - 4000).toISOString(),
            endTime: new Date(Date.now() - 3500).toISOString(),
            duration: 500,
            metadata: { chartType: "bar", library: "chartjs" }
          },
          {
            id: "spn2",
            name: "data_processing",
            startTime: new Date(Date.now() - 4500).toISOString(),
            endTime: new Date(Date.now() - 4100).toISOString(),
            duration: 400,
            metadata: { dataPoints: 50, operations: ["normalize", "transform"] }
          }
        ]
      }
      
      setTracingData(mockData)
    } catch (err) {
      setError("Failed to fetch tracing data")
      console.error("Error fetching tracing data:", err)
    } finally {
      setLoading(false)
    }
  }

  // Fetch data when traceId changes or on refresh
  useEffect(() => {
    if (traceId) {
      fetchTracingData(traceId)
      
      // Set up refresh interval
      const intervalId = setInterval(() => {
        fetchTracingData(traceId)
      }, refreshInterval)
      
      return () => clearInterval(intervalId)
    }
  }, [traceId, refreshInterval])

  // Render timeline chart
  useEffect(() => {
    if (activeView !== "timeline" || !tracingData || !document) return
    
    const renderTimelineChart = async () => {
      try {
        // Dynamically import Chart.js
        if (!Chart) {
          const mod = await import("chart.js/auto")
          Chart = mod.Chart
        }
        
        // Destroy existing chart
        if (chartInstance) {
          chartInstance.destroy()
        }
        
        // Get canvas element
        const canvas = document.getElementById("tracing-timeline") as HTMLCanvasElement
        if (!canvas) return
        
        // Prepare data
        const events = tracingData.events.map(event => ({
          x: new Date(event.timestamp),
          y: 1,
          name: event.name,
          metadata: event.metadata
        }))
        
        const spans = tracingData.spans.map(span => ({
          x: new Date(span.startTime),
          y: 0,
          name: span.name,
          duration: span.duration,
          metadata: span.metadata
        }))
        
        // Create chart
        const ctx = canvas.getContext("2d")
        if (!ctx) return
        
        const newChart = new Chart(ctx, {
          type: "scatter",
          data: {
            datasets: [
              {
                label: "Events",
                data: events,
                backgroundColor: "rgba(54, 162, 235, 0.8)",
                pointRadius: 8,
                pointHoverRadius: 10
              },
              {
                label: "Spans",
                data: spans,
                backgroundColor: "rgba(255, 99, 132, 0.8)",
                pointRadius: 8,
                pointHoverRadius: 10
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: {
                type: "time",
                time: {
                  unit: "second",
                  displayFormats: {
                    second: "HH:mm:ss"
                  }
                },
                title: {
                  display: true,
                  text: "Time"
                }
              },
              y: {
                type: "category",
                labels: ["Spans", "Events"],
                title: {
                  display: true,
                  text: "Type"
                }
              }
            },
            plugins: {
              tooltip: {
                callbacks: {
                  label: (context) => {
                    const point = context.raw as any
                    let label = point.name || ""
                    
                    if (point.duration) {
                      label += ` (${point.duration}ms)`
                    }
                    
                    return label
                  },
                  afterLabel: (context) => {
                    const point = context.raw as any
                    if (point.metadata) {
                      return Object.entries(point.metadata).map(
                        ([key, value]) => `${key}: ${value}`
                      )
                    }
                    return []
                  }
                }
              }
            }
          }
        })
        
        setChartInstance(newChart)
      } catch (error) {
        console.error("Error rendering timeline chart:", error)
      }
    }
    
    renderTimelineChart()
    
    return () => {
      if (chartInstance) {
        chartInstance.destroy()
      }
    }
  }, [activeView, tracingData, chartInstance])

  // Handle refresh
  const handleRefresh = () => {
    if (traceId) {
      fetchTracingData(traceId)
    }
  }

  // Handle expand/collapse
  const handleExpandCollapse = () => {
    setExpanded(!expanded)
  }

  if (!traceId) {
    return (
      <div className="p-4 border border-border/50 rounded-lg bg-background">
        <p className="text-center text-muted-foreground">No trace ID provided</p>
      </div>
    )
  }

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-purple-900 to-indigo-900 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <Activity className="h-4 w-4" />
          <span className="font-medium">{title}</span>
          {loading && <span className="text-xs opacity-70">(Loading...)</span>}
        </div>
        {showControls && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: hovered || expanded ? 1 : 0 }}
            transition={{ duration: 0.2 }}
            className="flex items-center gap-1"
          >
            <Button
              variant="ghost"
              size="icon-sm"
              className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
              onClick={handleRefresh}
            >
              <RefreshCw className="h-3.5 w-3.5" />
              <span className="sr-only">Refresh</span>
            </Button>
            <Button
              variant="ghost"
              size="icon-sm"
              className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
              onClick={handleExpandCollapse}
            >
              {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
              <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
            </Button>
          </motion.div>
        )}
      </div>

      <div className={cn(
        "p-4 bg-white dark:bg-zinc-900",
        expanded ? "flex-1" : "h-[300px]"
      )}>
        <Tabs value={activeView} onValueChange={setActiveView} className="h-full flex flex-col">
          <TabsList className="mb-4 grid grid-cols-3">
            <TabsTrigger value="timeline">Timeline</TabsTrigger>
            <TabsTrigger value="events">Events</TabsTrigger>
            <TabsTrigger value="spans">Spans</TabsTrigger>
          </TabsList>

          <div className="flex-1 relative min-h-[200px]">
            {error && (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="flex items-center gap-2 text-red-500">
                  <AlertCircle className="h-5 w-5" />
                  <span>{error}</span>
                </div>
              </div>
            )}
            
            {activeView === "timeline" && !error && (
              <canvas id="tracing-timeline" className="w-full h-full" />
            )}
            
            {activeView === "events" && !error && tracingData && (
              <div className="h-full overflow-auto">
                <table className="w-full text-sm">
                  <thead className="sticky top-0 bg-muted/50">
                    <tr>
                      <th className="text-left p-2">Event</th>
                      <th className="text-left p-2">Time</th>
                      <th className="text-left p-2">Metadata</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tracingData.events.map(event => (
                      <tr key={event.id} className="border-b border-border/20">
                        <td className="p-2">{event.name}</td>
                        <td className="p-2">{new Date(event.timestamp).toLocaleTimeString()}</td>
                        <td className="p-2">
                          <pre className="text-xs overflow-auto max-w-xs">
                            {JSON.stringify(event.metadata, null, 2)}
                          </pre>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
            
            {activeView === "spans" && !error && tracingData && (
              <div className="h-full overflow-auto">
                <table className="w-full text-sm">
                  <thead className="sticky top-0 bg-muted/50">
                    <tr>
                      <th className="text-left p-2">Span</th>
                      <th className="text-left p-2">Duration</th>
                      <th className="text-left p-2">Start Time</th>
                      <th className="text-left p-2">End Time</th>
                      <th className="text-left p-2">Metadata</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tracingData.spans.map(span => (
                      <tr key={span.id} className="border-b border-border/20">
                        <td className="p-2">{span.name}</td>
                        <td className="p-2">{span.duration}ms</td>
                        <td className="p-2">{new Date(span.startTime).toLocaleTimeString()}</td>
                        <td className="p-2">{new Date(span.endTime).toLocaleTimeString()}</td>
                        <td className="p-2">
                          <pre className="text-xs overflow-auto max-w-xs">
                            {JSON.stringify(span.metadata, null, 2)}
                          </pre>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        </Tabs>
      </div>
    </div>
  )
}

================
File: components/dashboard/call-to-action.tsx
================
"use client"

import { motion } from "framer-motion"
import { ReactNode } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { LucideIcon } from "lucide-react"

interface CallToActionProps {
  title: string
  description: string
  primaryAction: {
    label: string
    href: string
    icon?: LucideIcon
  }
  secondaryAction?: {
    label: string
    href: string
  }
  visual?: ReactNode
}

export function CallToAction({ 
  title, 
  description, 
  primaryAction, 
  secondaryAction,
  visual
}: CallToActionProps) {
  const PrimaryIcon = primaryAction.icon
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.6 }}
    >
      <Card className="overflow-hidden">
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-violet-500/20 dark:from-blue-500/10 dark:to-violet-500/10" />
          <CardContent className="p-6 relative">
            <div className="flex flex-col md:flex-row gap-6 items-center">
              <div className="flex-1">
                <h3 className="text-xl font-bold mb-2">{title}</h3>
                <p className="text-muted-foreground mb-4">
                  {description}
                </p>
                <div className="flex gap-3">
                  <Button 
                    className="bg-gradient-to-r from-blue-500 to-violet-500 hover:from-blue-600 hover:to-violet-600 shadow-lg hover:shadow-blue-500/20 transition-all duration-300"
                  >
                    {PrimaryIcon && <PrimaryIcon className="mr-2 h-4 w-4" />}
                    {primaryAction.label}
                  </Button>
                  
                  {secondaryAction && (
                    <Button variant="outline" className="border-opacity-50 backdrop-blur-sm">
                      {secondaryAction.label}
                    </Button>
                  )}
                </div>
              </div>
              
              {visual && (
                <div className="w-full md:w-1/3 aspect-video rounded-lg overflow-hidden glass-card">
                  {visual}
                </div>
              )}
            </div>
          </CardContent>
        </div>
      </Card>
    </motion.div>
  )
}

================
File: components/dashboard/dashboard-header.tsx
================
"use client"

import { motion } from "framer-motion"
import { useTheme } from "next-themes"
import { ReactNode } from "react"

interface DashboardHeaderProps {
  title: string
  subtitle: string
  highlightedText?: string
  children?: ReactNode
}

export function DashboardHeader({ 
  title, 
  subtitle, 
  highlightedText = "DeanmachinesAI",
  children 
}: DashboardHeaderProps) {
  const { theme } = useTheme()
  
  return (
    <motion.div 
      className="relative overflow-hidden rounded-xl p-8 mb-8"
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
    >
      {/* Animated gradient background */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 via-violet-500/10 to-purple-500/10 dark:from-blue-500/20 dark:via-violet-500/20 dark:to-purple-500/20 z-0" />
      
      {/* Animated particles/glow effect */}
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute rounded-full bg-blue-500/20 dark:bg-blue-400/20 blur-xl"
            style={{
              width: Math.random() * 100 + 50,
              height: Math.random() * 100 + 50,
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
            }}
            animate={{
              x: [0, Math.random() * 40 - 20],
              y: [0, Math.random() * 40 - 20],
              opacity: [0.4, 0.8, 0.4],
            }}
            transition={{
              duration: Math.random() * 5 + 10,
              repeat: Infinity,
              repeatType: "reverse",
            }}
          />
        ))}
      </div>
      
      {/* Content */}
      <div className="relative z-10">
        <motion.h1
          className="text-4xl font-bold tracking-tight mb-2"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          {title} <span className="gradient-text font-extrabold">{highlightedText}</span>
        </motion.h1>
        <motion.p
          className="text-xl text-muted-foreground max-w-3xl"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {subtitle}
        </motion.p>
        
        {children && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
            className="mt-6"
          >
            {children}
          </motion.div>
        )}
      </div>
    </motion.div>
  )
}

================
File: components/dashboard/dashboard-stats.tsx
================
"use client"

import { motion } from "framer-motion"
import { Brain, Code, MessageSquare, Network, Database, Bot, Sparkles, Zap } from "lucide-react"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"
import { StatCard } from "@/components/dashboard/stat-card"

interface DashboardStatsProps {
  className?: string
}

interface StatsData {
  agents: number
  models: number
  tools: number
  conversations: number
  networks?: number
  workflows?: number
}

export function DashboardStats({ className }: DashboardStatsProps) {
  // Fetch real-time stats from Supabase
  const { data, isLoading, error } = useSupabaseFetch<StatsData>({
    endpoint: "/api/dashboard/stats",
    resourceName: "Dashboard Stats",
    dataKey: "stats",
  })

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const item = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    },
  }

  // Default stats in case of loading or error
  const stats = [
    { 
      label: "Active Agents", 
      value: isLoading ? "..." : data?.[0]?.agents?.toString() || "0", 
      icon: Brain, 
      color: "text-green-500",
      progress: 75
    },
    { 
      label: "Models", 
      value: isLoading ? "..." : data?.[0]?.models?.toString() || "0", 
      icon: Sparkles, 
      color: "text-violet-500",
      progress: 60
    },
    { 
      label: "Tools", 
      value: isLoading ? "..." : data?.[0]?.tools?.toString() || "0", 
      icon: Code, 
      color: "text-blue-500",
      progress: 85
    },
    { 
      label: "Conversations", 
      value: isLoading ? "..." : data?.[0]?.conversations?.toString() || "0", 
      icon: MessageSquare, 
      color: "text-amber-500",
      progress: 45
    },
  ]

  return (
    <motion.div 
      className={`grid gap-4 md:grid-cols-4 ${className}`} 
      variants={container} 
      initial="hidden" 
      animate="show"
    >
      {stats.map((stat, i) => (
        <motion.div key={i} variants={item}>
          <StatCard
            label={stat.label}
            value={stat.value}
            icon={stat.icon}
            color={stat.color}
            progress={stat.progress + (i * 5)} // Vary progress for visual interest
            index={i}
          />
        </motion.div>
      ))}
    </motion.div>
  )
}

================
File: components/dashboard/feature-card.tsx
================
"use client"

import { motion } from "framer-motion"
import { LucideIcon } from "lucide-react"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

interface FeatureCardProps {
  title: string
  description: string
  icon: LucideIcon
  color: string
  link: string
}

export function FeatureCard({ title, description, icon: Icon, color, link }: FeatureCardProps) {
  return (
    <motion.div 
      whileHover={{ 
        y: -5, 
        transition: { duration: 0.2 },
        boxShadow: "0 10px 30px -10px rgba(0, 0, 0, 0.1)" 
      }}
    >
      <Link href={link} className="block h-full">
        <Card className="h-full overflow-hidden hover:shadow-md transition-all duration-300 border-opacity-30 dark:border-opacity-20 backdrop-blur-sm">
          <div className="absolute inset-0 opacity-10 bg-gradient-to-br pointer-events-none" style={{
            background: `linear-gradient(to bottom right, var(--${color.split('-')[0]}-500), var(--${color.split('-')[1]}-600))`
          }} />
          
          <CardHeader className="pb-2 relative">
            <div className="flex items-center gap-2">
              <div className={`p-2 rounded-full bg-gradient-to-br ${color}`}>
                <Icon className="w-4 h-4 text-white" />
              </div>
              <CardTitle className="text-lg">{title}</CardTitle>
            </div>
          </CardHeader>
          
          <CardContent className="relative">
            <CardDescription className="text-sm">{description}</CardDescription>
          </CardContent>
          
          <CardFooter className="relative">
            <Button 
              variant="ghost" 
              size="sm" 
              className="ml-auto text-xs group relative overflow-hidden"
            >
              <span className="relative z-10">Explore</span>
              <span className="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-violet-500 group-hover:w-full transition-all duration-300"></span>
            </Button>
          </CardFooter>
        </Card>
      </Link>
    </motion.div>
  )
}

================
File: components/dashboard/recent-activity.tsx
================
"use client"

import { motion } from "framer-motion"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { formatDistanceToNow } from "date-fns"

interface Activity {
  id: string
  type: "agent_created" | "model_added" | "conversation_completed" | "tool_executed"
  entityId: string
  entityName: string
  userId: string
  userName: string
  userAvatar?: string
  timestamp: string
  details?: Record<string, any>
}

export function RecentActivity() {
  // Fetch recent activity from Supabase
  const { data: activities, isLoading } = useSupabaseFetch<Activity>({
    endpoint: "/api/dashboard/activity",
    resourceName: "Recent Activity",
    dataKey: "activities",
    queryParams: { limit: "5" }
  })

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05,
      },
    },
  }

  const item = {
    hidden: { y: 10, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    },
  }

  // Get badge variant based on activity type
  const getBadgeVariant = (type: Activity["type"]) => {
    switch (type) {
      case "agent_created":
        return "success"
      case "model_added":
        return "secondary"
      case "conversation_completed":
        return "default"
      case "tool_executed":
        return "outline"
      default:
        return "default"
    }
  }

  // Get human-readable activity description
  const getActivityDescription = (activity: Activity) => {
    switch (activity.type) {
      case "agent_created":
        return `created a new agent "${activity.entityName}"`
      case "model_added":
        return `added model "${activity.entityName}"`
      case "conversation_completed":
        return `completed a conversation with "${activity.entityName}"`
      case "tool_executed":
        return `executed tool "${activity.entityName}"`
      default:
        return `interacted with "${activity.entityName}"`
    }
  }

  return (
    <Card className="overflow-hidden backdrop-blur-sm border-opacity-40">
      <CardHeader className="pb-3">
        <CardTitle>Recent Activity</CardTitle>
        <CardDescription>Latest actions in your AI workspace</CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          // Loading skeleton
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="flex items-center gap-4">
                <Skeleton className="h-10 w-10 rounded-full" />
                <div className="space-y-2 flex-1">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-3 w-3/4" />
                </div>
              </div>
            ))}
          </div>
        ) : (
          // Activity list
          <motion.div 
            className="space-y-4"
            variants={container}
            initial="hidden"
            animate="show"
          >
            {activities.length > 0 ? (
              activities.map((activity, i) => (
                <motion.div 
                  key={activity.id} 
                  className="flex items-start gap-4"
                  variants={item}
                >
                  <Avatar className="h-10 w-10 border-2 border-background">
                    <AvatarImage src={activity.userAvatar} alt={activity.userName} />
                    <AvatarFallback className="bg-gradient-to-br from-blue-500 to-violet-500 text-white">
                      {activity.userName.substring(0, 2).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <div className="space-y-1 flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium">{activity.userName}</span>
                      <Badge variant={getBadgeVariant(activity.type)} className="text-xs">
                        {activity.type.replace('_', ' ')}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {getActivityDescription(activity)}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}
                    </p>
                  </div>
                </motion.div>
              ))
            ) : (
              <p className="text-center text-muted-foreground py-6">No recent activity found</p>
            )}
          </motion.div>
        )}
      </CardContent>
    </Card>
  )
}

================
File: components/dashboard/stat-card.tsx
================
"use client"

import { motion } from "framer-motion"
import { LucideIcon } from "lucide-react"
import { GradientCard } from "@/components/ui/gradient-card"
import { Progress } from "@/components/ui/progress"

interface StatCardProps {
  label: string
  value: string
  icon: LucideIcon
  color: string
  progress?: number
  index?: number
}

export function StatCard({ label, value, icon: Icon, color, progress = 60, index = 0 }: StatCardProps) {
  return (
    <motion.div 
      whileHover={{ y: -5, transition: { duration: 0.2 } }}
      className="relative"
    >
      {/* Glow effect behind card */}
      <div className={`absolute inset-0 rounded-xl blur-xl opacity-30 ${
        color.includes("green") ? "bg-green-500/30" : 
        color.includes("violet") ? "bg-violet-500/30" : 
        color.includes("blue") ? "bg-blue-500/30" : 
        "bg-amber-500/30"
      }`} />
      
      <GradientCard
        gradientFrom={
          color.includes("green") ? "from-green-500" : 
          color.includes("violet") ? "from-violet-500" : 
          color.includes("blue") ? "from-blue-500" : "from-amber-500"
        }
        gradientTo={
          color.includes("green") ? "to-emerald-600" : 
          color.includes("violet") ? "to-purple-600" : 
          color.includes("blue") ? "to-cyan-600" : "to-orange-600"
        }
        className="overflow-hidden h-full backdrop-blur-sm relative z-10"
        hoverEffect={true}
      >
        <div className="p-6">
          <div className="flex justify-between items-center">
            <div>
              <p className="text-sm font-medium text-muted-foreground">{label}</p>
              <h3 className="text-3xl font-bold mt-1">{value}</h3>
            </div>
            <div className={`p-3 rounded-full bg-gradient-to-br ${
              color.includes("green") ? "from-green-500/20 to-emerald-600/20" : 
              color.includes("violet") ? "from-violet-500/20 to-purple-600/20" : 
              color.includes("blue") ? "from-blue-500/20 to-cyan-600/20" : 
              "from-amber-500/20 to-orange-600/20"
            } backdrop-blur-sm`}>
              <Icon className={`w-6 h-6 ${color}`} />
            </div>
          </div>
          
          {/* Animated progress indicator */}
          <div className="mt-4">
            <div className="flex justify-between text-xs text-muted-foreground mb-1">
              <span>Progress</span>
              <span>{progress}%</span>
            </div>
            <motion.div 
              className={`h-1 rounded-full ${
                color.includes("green") ? "bg-green-500/20" : 
                color.includes("violet") ? "bg-violet-500/20" : 
                color.includes("blue") ? "bg-blue-500/20" : 
                "bg-amber-500/20"
              }`}
            >
              <motion.div 
                className={`h-full rounded-full ${
                  color.includes("green") ? "bg-green-500" : 
                  color.includes("violet") ? "bg-violet-500" : 
                  color.includes("blue") ? "bg-blue-500" : 
                  "bg-amber-500"
                }`}
                initial={{ width: "0%" }}
                animate={{ width: `${progress}%` }}
                transition={{ 
                  duration: 1.5, 
                  delay: 0.2 + (index * 0.1),
                  ease: "easeOut" 
                }}
              />
            </motion.div>
          </div>
        </div>
      </GradientCard>
    </motion.div>
  )
}

================
File: components/dashboard/system-metrics.tsx
================
"use client"

import { motion } from "framer-motion"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { Skeleton } from "@/components/ui/skeleton"
import { Activity, Cpu, Database, Server, User } from "lucide-react"

interface SystemMetrics {
  id: string
  cpu_usage: number
  memory_usage: number
  database_connections: number
  api_requests_per_minute: number
  average_response_time_ms: number
  active_users: number
  timestamp: string
}

export function SystemMetrics() {
  // Fetch system metrics from Supabase
  const { data: metrics, isLoading } = useSupabaseFetch<SystemMetrics>({
    endpoint: "/api/dashboard/metrics",
    resourceName: "System Metrics",
    dataKey: "metrics",
  })

  // Get the latest metrics
  const latestMetrics = metrics?.[0]

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05,
        delayChildren: 0.1,
      },
    },
  }

  const item = {
    hidden: { y: 10, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    },
  }

  // Get color based on usage percentage
  const getColorClass = (percentage: number) => {
    if (percentage < 50) return "text-green-500"
    if (percentage < 80) return "text-amber-500"
    return "text-red-500"
  }

  // Get progress color based on usage percentage
  const getProgressColor = (percentage: number) => {
    if (percentage < 50) return "bg-green-500"
    if (percentage < 80) return "bg-amber-500"
    return "bg-red-500"
  }

  return (
    <Card className="overflow-hidden backdrop-blur-sm border-opacity-40">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2">
          <Server className="h-5 w-5 text-primary" />
          System Performance
        </CardTitle>
        <CardDescription>Real-time system metrics and performance data</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="resources" className="space-y-4">
          <TabsList className="grid grid-cols-2 h-9">
            <TabsTrigger value="resources">Resources</TabsTrigger>
            <TabsTrigger value="api">API Performance</TabsTrigger>
          </TabsList>

          <TabsContent value="resources" className="space-y-4">
            {isLoading ? (
              <div className="space-y-4">
                <Skeleton className="h-16 w-full" />
                <Skeleton className="h-16 w-full" />
                <Skeleton className="h-16 w-full" />
              </div>
            ) : (
              <motion.div
                variants={container}
                initial="hidden"
                animate="show"
                className="space-y-4"
              >
                {/* CPU Usage */}
                <motion.div variants={item} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <Cpu className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">CPU Usage</span>
                    </div>
                    <span className={`text-sm font-bold ${getColorClass(latestMetrics?.cpu_usage || 0)}`}>
                      {latestMetrics?.cpu_usage || 0}%
                    </span>
                  </div>
                  <Progress
                    value={latestMetrics?.cpu_usage || 0}
                    className="h-2 bg-muted"
                    indicatorClassName={getProgressColor(latestMetrics?.cpu_usage || 0)}
                  />
                </motion.div>

                {/* Memory Usage */}
                <motion.div variants={item} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <Server className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">Memory Usage</span>
                    </div>
                    <span className={`text-sm font-bold ${getColorClass(latestMetrics?.memory_usage || 0)}`}>
                      {latestMetrics?.memory_usage || 0}%
                    </span>
                  </div>
                  <Progress
                    value={latestMetrics?.memory_usage || 0}
                    className="h-2 bg-muted"
                    indicatorClassName={getProgressColor(latestMetrics?.memory_usage || 0)}
                  />
                </motion.div>

                {/* Database Connections */}
                <motion.div variants={item} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <Database className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">Database Connections</span>
                    </div>
                    <span className="text-sm font-bold">
                      {latestMetrics?.database_connections || 0}
                    </span>
                  </div>
                  <Progress
                    value={(latestMetrics?.database_connections || 0) / 2}
                    className="h-2 bg-muted"
                    indicatorClassName="bg-blue-500"
                  />
                </motion.div>
              </motion.div>
            )}
          </TabsContent>

          <TabsContent value="api" className="space-y-4">
            {isLoading ? (
              <div className="space-y-4">
                <Skeleton className="h-16 w-full" />
                <Skeleton className="h-16 w-full" />
                <Skeleton className="h-16 w-full" />
              </div>
            ) : (
              <motion.div
                variants={container}
                initial="hidden"
                animate="show"
                className="space-y-4"
              >
                {/* API Requests */}
                <motion.div variants={item} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <Activity className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">API Requests (per min)</span>
                    </div>
                    <span className="text-sm font-bold">
                      {latestMetrics?.api_requests_per_minute || 0}
                    </span>
                  </div>
                  <Progress
                    value={(latestMetrics?.api_requests_per_minute || 0) / 2}
                    className="h-2 bg-muted"
                    indicatorClassName="bg-violet-500"
                  />
                </motion.div>

                {/* Response Time */}
                <motion.div variants={item} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <Activity className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">Avg Response Time</span>
                    </div>
                    <span className="text-sm font-bold">
                      {latestMetrics?.average_response_time_ms || 0} ms
                    </span>
                  </div>
                  <Progress
                    value={(latestMetrics?.average_response_time_ms || 0) / 10}
                    className="h-2 bg-muted"
                    indicatorClassName="bg-cyan-500"
                  />
                </motion.div>

                {/* Active Users */}
                <motion.div variants={item} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm font-medium">Active Users</span>
                    </div>
                    <span className="text-sm font-bold">
                      {latestMetrics?.active_users || 0}
                    </span>
                  </div>
                  <Progress
                    value={(latestMetrics?.active_users || 0) * 5}
                    className="h-2 bg-muted"
                    indicatorClassName="bg-green-500"
                  />
                </motion.div>
              </motion.div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}

================
File: components/integrations/connected-integration.tsx
================
"use client"

import { ReactNode } from "react"
import { format } from "date-fns"
import { Check, MoreHorizontal, Settings } from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface ConnectedIntegrationProps {
  name: string
  accountName: string
  connectedAt: string
  status: "active" | "inactive" | "error"
  icon: ReactNode
}

export function ConnectedIntegration({
  name,
  accountName,
  connectedAt,
  status,
  icon,
}: ConnectedIntegrationProps) {
  const formattedDate = format(new Date(connectedAt), "MMM d, yyyy")
  
  return (
    <Card className="border border-border/50 bg-background/50 backdrop-blur-sm">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <div className="flex items-center gap-4">
          <div className="flex h-10 w-10 items-center justify-center rounded-md bg-primary/10 text-primary">
            {icon}
          </div>
          <div>
            <CardTitle className="text-lg">{name}</CardTitle>
            <CardDescription className="text-xs">{accountName}</CardDescription>
          </div>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-8 w-8">
              <MoreHorizontal className="h-4 w-4" />
              <span className="sr-only">Open menu</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <Settings className="mr-2 h-4 w-4" />
              <span>Configure</span>
            </DropdownMenuItem>
            <DropdownMenuItem className="text-destructive">
              <span>Disconnect</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-between text-sm">
          <span className="text-muted-foreground">Connected {formattedDate}</span>
          <Badge variant={status === "active" ? "success" : status === "error" ? "destructive" : "outline"} className="gap-1">
            {status === "active" && <Check className="h-3 w-3" />}
            {status === "active" ? "Active" : status === "error" ? "Error" : "Inactive"}
          </Badge>
        </div>
      </CardContent>
      <CardFooter className="pt-2">
        <Button variant="outline" size="sm" className="w-full">
          Manage
        </Button>
      </CardFooter>
    </Card>
  )
}

================
File: components/integrations/integration-card.tsx
================
"use client"

import { ReactNode } from "react"
import Link from "next/link"
import { motion } from "framer-motion"
import { ExternalLink } from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

interface IntegrationCardProps {
  name: string
  description: string
  icon: ReactNode
  href: string
}

export function IntegrationCard({ name, description, icon, href }: IntegrationCardProps) {
  return (
    <motion.div
      whileHover={{ y: -4 }}
      transition={{ duration: 0.2 }}
    >
      <Card className="h-full overflow-hidden border border-border/50 bg-background/50 backdrop-blur-sm hover:border-primary/20 hover:shadow-md transition-all">
        <CardHeader className="flex flex-row items-center gap-4 pb-2">
          <div className="flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 text-primary">
            {icon}
          </div>
          <div>
            <CardTitle className="text-xl">{name}</CardTitle>
          </div>
        </CardHeader>
        <CardContent>
          <CardDescription className="text-sm text-muted-foreground">
            {description}
          </CardDescription>
        </CardContent>
        <CardFooter className="pt-2">
          <Button variant="outline" size="sm" className="w-full gap-1" asChild>
            <Link href={href}>
              <span>Connect</span>
              <ExternalLink className="h-3.5 w-3.5" />
            </Link>
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  )
}

================
File: components/integrations/integration-steps.tsx
================
"use client"

import { Check, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

type StepStatus = "upcoming" | "current" | "complete"

interface Step {
  title: string
  description: string
  status: StepStatus
}

interface IntegrationStepsProps {
  steps: Step[]
}

export function IntegrationSteps({ steps }: IntegrationStepsProps) {
  return (
    <div className="space-y-4">
      {steps.map((step, index) => (
        <div key={index} className="flex gap-4">
          <div className="flex flex-col items-center">
            <div
              className={cn(
                "flex h-8 w-8 items-center justify-center rounded-full border-2",
                step.status === "complete"
                  ? "border-primary bg-primary text-primary-foreground"
                  : step.status === "current"
                  ? "border-primary text-primary"
                  : "border-muted-foreground/30 text-muted-foreground/30"
              )}
            >
              {step.status === "complete" ? (
                <Check className="h-4 w-4" />
              ) : (
                <Circle className="h-4 w-4" />
              )}
            </div>
            {index < steps.length - 1 && (
              <div
                className={cn(
                  "h-full w-0.5 my-1",
                  step.status === "complete"
                    ? "bg-primary"
                    : "bg-muted-foreground/30"
                )}
              />
            )}
          </div>
          <div className="space-y-1 pt-1 pb-4">
            <p
              className={cn(
                "font-medium",
                step.status === "upcoming" && "text-muted-foreground/70"
              )}
            >
              {step.title}
            </p>
            <p
              className={cn(
                "text-sm text-muted-foreground",
                step.status === "upcoming" && "text-muted-foreground/50"
              )}
            >
              {step.description}
            </p>
          </div>
        </div>
      ))}
    </div>
  )
}

================
File: components/landing/architecture-section.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Bot, Brain, Database, Layers, MessageSquare, Zap } from "lucide-react"

export default function ArchitectureSection() {
  const [architectureData, setArchitectureData] = useState({
    title: "Modern Architecture",
    subtitle: "Built for AI-native applications",
    description: "The AI SDK Framework provides a modular architecture that makes it easy to build, deploy, and scale AI applications.",
    components: [
      {
        title: "AI Models",
        description: "Connect to OpenAI, Google, Anthropic, and other AI providers.",
        icon: "Layers",
      },
      {
        title: "Agents",
        description: "Create specialized AI agents with different capabilities.",
        icon: "Bot",
      },
      {
        title: "Tools",
        description: "Extend agent capabilities with custom tools and integrations.",
        icon: "Zap",
      },
      {
        title: "Memory",
        description: "Persistent storage for conversations and agent state.",
        icon: "Database",
      },
      {
        title: "Chat Interface",
        description: "Ready-to-use UI components for chat applications.",
        icon: "MessageSquare",
      },
      {
        title: "Reasoning Engine",
        description: "Advanced reasoning capabilities for complex tasks.",
        icon: "Brain",
      },
    ],
  })

  useEffect(() => {
    // Fetch architecture content from API
    const fetchArchitectureContent = async () => {
      try {
        const response = await fetch("/api/content/architecture")
        if (response.ok) {
          const data = await response.json()
          if (data) {
            // Update with API data if available
            setArchitectureData({
              title: data.title || architectureData.title,
              subtitle: data.subtitle || architectureData.subtitle,
              description: data.description || architectureData.description,
              components: data.data?.components || architectureData.components,
            })
          }
        }
      } catch (error) {
        console.error("Error fetching architecture content:", error)
      }
    }

    fetchArchitectureContent()
  }, [])

  // Helper function to get icon component by name
  function getIconByName(name: string) {
    const iconMap: Record<string, any> = {
      Bot: Bot,
      Brain: Brain,
      Database: Database,
      Layers: Layers,
      MessageSquare: MessageSquare,
      Zap: Zap,
    }
    return iconMap[name] || Layers
  }

  return (
    <section className="py-20 bg-gray-900 relative">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-950 via-gray-900 to-gray-950"></div>
      
      <div className="container relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Text content */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <h2 className="text-3xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400 mb-4">
              {architectureData.title}
            </h2>
            <p className="text-xl text-gray-400 mb-4">
              {architectureData.subtitle}
            </p>
            <p className="text-gray-500 mb-8">
              {architectureData.description}
            </p>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {architectureData.components.map((component, index) => {
                const Icon = getIconByName(component.icon)
                return (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="flex items-start gap-3"
                  >
                    <div className="mt-1 p-1.5 rounded-full bg-gray-800 text-blue-400">
                      <Icon className="w-4 h-4" />
                    </div>
                    <div>
                      <h3 className="font-medium text-white">{component.title}</h3>
                      <p className="text-sm text-gray-400">{component.description}</p>
                    </div>
                  </motion.div>
                )
              })}
            </div>
          </motion.div>
          
          {/* Architecture diagram */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            whileInView={{ opacity: 1, x: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
            className="relative"
          >
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-xl">
              <div className="relative aspect-square">
                {/* Central hub */}
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-24 h-24 bg-blue-500/20 rounded-full flex items-center justify-center border-2 border-blue-500/50 z-20">
                  <div className="text-center">
                    <Layers className="w-8 h-8 text-blue-400 mx-auto" />
                    <div className="text-xs font-medium text-blue-300 mt-1">AI SDK Core</div>
                  </div>
                </div>
                
                {/* Connecting lines */}
                <svg className="absolute inset-0 w-full h-full z-10" viewBox="0 0 400 400">
                  <line x1="200" y1="200" x2="100" y2="100" stroke="rgba(59, 130, 246, 0.3)" strokeWidth="2" />
                  <line x1="200" y1="200" x2="300" y2="100" stroke="rgba(59, 130, 246, 0.3)" strokeWidth="2" />
                  <line x1="200" y1="200" x2="100" y2="300" stroke="rgba(59, 130, 246, 0.3)" strokeWidth="2" />
                  <line x1="200" y1="200" x2="300" y2="300" stroke="rgba(59, 130, 246, 0.3)" strokeWidth="2" />
                  <line x1="200" y1="200" x2="100" y2="200" stroke="rgba(59, 130, 246, 0.3)" strokeWidth="2" />
                  <line x1="200" y1="200" x2="300" y2="200" stroke="rgba(59, 130, 246, 0.3)" strokeWidth="2" />
                </svg>
                
                {/* Component nodes */}
                <div className="absolute top-[25%] left-[25%] transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center border border-purple-500/50 z-20">
                  <div className="text-center">
                    <Bot className="w-6 h-6 text-purple-400 mx-auto" />
                    <div className="text-xs font-medium text-purple-300 mt-1">Agents</div>
                  </div>
                </div>
                
                <div className="absolute top-[25%] left-[75%] transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center border border-green-500/50 z-20">
                  <div className="text-center">
                    <Zap className="w-6 h-6 text-green-400 mx-auto" />
                    <div className="text-xs font-medium text-green-300 mt-1">Tools</div>
                  </div>
                </div>
                
                <div className="absolute top-[75%] left-[25%] transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-orange-500/20 rounded-full flex items-center justify-center border border-orange-500/50 z-20">
                  <div className="text-center">
                    <Database className="w-6 h-6 text-orange-400 mx-auto" />
                    <div className="text-xs font-medium text-orange-300 mt-1">Memory</div>
                  </div>
                </div>
                
                <div className="absolute top-[75%] left-[75%] transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center border border-red-500/50 z-20">
                  <div className="text-center">
                    <Brain className="w-6 h-6 text-red-400 mx-auto" />
                    <div className="text-xs font-medium text-red-300 mt-1">Reasoning</div>
                  </div>
                </div>
                
                <div className="absolute top-[50%] left-[12.5%] transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-teal-500/20 rounded-full flex items-center justify-center border border-teal-500/50 z-20">
                  <div className="text-center">
                    <Layers className="w-6 h-6 text-teal-400 mx-auto" />
                    <div className="text-xs font-medium text-teal-300 mt-1">Models</div>
                  </div>
                </div>
                
                <div className="absolute top-[50%] left-[87.5%] transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 bg-pink-500/20 rounded-full flex items-center justify-center border border-pink-500/50 z-20">
                  <div className="text-center">
                    <MessageSquare className="w-6 h-6 text-pink-400 mx-auto" />
                    <div className="text-xs font-medium text-pink-300 mt-1">Chat UI</div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Floating particles */}
            <div className="absolute top-1/4 right-1/4 w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
            <div className="absolute top-3/4 left-1/4 w-2 h-2 bg-purple-400 rounded-full animate-pulse" style={{ animationDelay: "1s" }}></div>
            <div className="absolute top-1/2 right-1/3 w-2 h-2 bg-green-400 rounded-full animate-pulse" style={{ animationDelay: "0.5s" }}></div>
          </motion.div>
        </div>
      </div>
    </section>
  )
}

================
File: components/landing/cta-section.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { ArrowRight, Github, Twitter } from "lucide-react"
import Link from "next/link"
import { Button } from "@/components/ui/button"

export default function CTASection() {
  const [ctaData, setCtaData] = useState({
    title: "Ready to Build Your AI Application?",
    description: "Get started with AI SDK Framework today and build powerful AI applications with agents, tools, and memory.",
    primaryCta: "Get Started",
    secondaryCta: "View on GitHub",
    twitterCta: "Follow on Twitter",
    githubUrl: "https://github.com/ssdeanx/ai-sdk-DM",
    twitterUrl: "https://x.com/deanmachinesai",
  })

  useEffect(() => {
    // Fetch CTA content from API
    const fetchCtaContent = async () => {
      try {
        const response = await fetch("/api/content/cta")
        if (response.ok) {
          const data = await response.json()
          if (data) {
            setCtaData({
              title: data.title || ctaData.title,
              description: data.description || ctaData.description,
              primaryCta: data.data?.primaryCta || ctaData.primaryCta,
              secondaryCta: data.data?.secondaryCta || ctaData.secondaryCta,
              twitterCta: data.data?.twitterCta || ctaData.twitterCta,
              githubUrl: data.data?.githubUrl || ctaData.githubUrl,
              twitterUrl: data.data?.twitterUrl || ctaData.twitterUrl,
            })
          }
        }
      } catch (error) {
        console.error("Error fetching CTA content:", error)
      }
    }

    fetchCtaContent()
  }, [])

  return (
    <section className="py-20 bg-gray-900 relative">
      {/* Background elements */}
      <div className="absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]"></div>
      
      {/* Glowing orbs */}
      <div className="absolute top-1/4 right-1/4 w-64 h-64 bg-blue-500 rounded-full filter blur-[128px] opacity-20 animate-pulse-slow"></div>
      <div className="absolute bottom-1/4 left-1/4 w-64 h-64 bg-purple-500 rounded-full filter blur-[128px] opacity-20 animate-pulse-slow" style={{ animationDelay: "1s" }}></div>
      
      <div className="container relative z-10">
        <div className="max-w-3xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <h2 className="text-3xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400 mb-6">
              {ctaData.title}
            </h2>
            <p className="text-gray-400 mb-8 text-lg">
              {ctaData.description}
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button asChild size="lg" className="bg-gradient-to-r from-blue-600 to-violet-600 hover:from-blue-700 hover:to-violet-700">
                <Link href="/dashboard">
                  {ctaData.primaryCta}
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
              <Button asChild size="lg" variant="outline" className="border-gray-700 text-gray-300 hover:bg-gray-800">
                <Link href={ctaData.githubUrl} target="_blank" rel="noopener noreferrer">
                  <Github className="mr-2 h-4 w-4" />
                  {ctaData.secondaryCta}
                </Link>
              </Button>
              <Button asChild size="lg" variant="outline" className="border-gray-700 text-gray-300 hover:bg-gray-800">
                <Link href={ctaData.twitterUrl} target="_blank" rel="noopener noreferrer">
                  <Twitter className="mr-2 h-4 w-4" />
                  {ctaData.twitterCta}
                </Link>
              </Button>
            </div>
          </motion.div>
          
          {/* Stats */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="grid grid-cols-2 md:grid-cols-4 gap-8 mt-16 text-center"
          >
            <div>
              <div className="text-3xl font-bold text-white mb-1">10k+</div>
              <div className="text-gray-500">Downloads</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">50+</div>
              <div className="text-gray-500">Contributors</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">100+</div>
              <div className="text-gray-500">GitHub Stars</div>
            </div>
            <div>
              <div className="text-3xl font-bold text-white mb-1">24/7</div>
              <div className="text-gray-500">Support</div>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  )
}

================
File: components/landing/features-section.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Bot, Brain, Code, Database, Layers, MessageSquare, Network, Zap } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

// Default features data
const defaultFeatures = [
  {
    title: "AI Agents",
    description: "Create and manage AI agents with different capabilities and personalities.",
    icon: Bot,
    color: "from-blue-500 to-blue-600",
  },
  {
    title: "Tools Integration",
    description: "Connect your agents to external tools and APIs for enhanced capabilities.",
    icon: Zap,
    color: "from-purple-500 to-purple-600",
  },
  {
    title: "Memory & Context",
    description: "Persistent memory and context management for more coherent conversations.",
    icon: Brain,
    color: "from-green-500 to-green-600",
  },
  {
    title: "Multi-Agent Networks",
    description: "Create networks of agents that collaborate to solve complex problems.",
    icon: Network,
    color: "from-orange-500 to-orange-600",
  },
  {
    title: "Model Flexibility",
    description: "Support for multiple AI models from different providers (OpenAI, Google, Anthropic).",
    icon: Layers,
    color: "from-red-500 to-red-600",
  },
  {
    title: "Structured Data",
    description: "Extract and work with structured data from unstructured text inputs.",
    icon: Database,
    color: "from-teal-500 to-teal-600",
  },
]

export default function FeaturesSection() {
  const [features, setFeatures] = useState(defaultFeatures)

  useEffect(() => {
    // Fetch features content from API
    const fetchFeaturesContent = async () => {
      try {
        const response = await fetch("/api/content/features")
        if (response.ok) {
          const data = await response.json()
          if (data && Array.isArray(data)) {
            // Map API data to features format
            const mappedFeatures = data.map((item: any) => ({
              title: item.title || "",
              description: item.description || "",
              icon: getIconByName(item.data?.icon || ""),
              color: item.data?.color || "from-blue-500 to-blue-600",
            }))
            setFeatures(mappedFeatures)
          }
        }
      } catch (error) {
        console.error("Error fetching features content:", error)
      }
    }

    fetchFeaturesContent()
  }, [])

  // Helper function to get icon component by name
  function getIconByName(name: string) {
    const iconMap: Record<string, any> = {
      Bot: Bot,
      Brain: Brain,
      Code: Code,
      Database: Database,
      Layers: Layers,
      MessageSquare: MessageSquare,
      Network: Network,
      Zap: Zap,
    }
    return iconMap[name] || Zap
  }

  // Animation variants
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  }

  return (
    <section className="py-20 bg-gray-950 relative">
      {/* Background elements */}
      <div className="absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]"></div>
      
      <div className="container relative z-10">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400 mb-4">
            Powerful Features
          </h2>
          <p className="text-gray-400 max-w-2xl mx-auto">
            Everything you need to build sophisticated AI applications with agents, tools, and memory.
          </p>
        </motion.div>

        <motion.div 
          variants={container}
          initial="hidden"
          whileInView="show"
          viewport={{ once: true }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        >
          {features.map((feature, index) => (
            <motion.div key={index} variants={item}>
              <Card className="bg-gray-900 border-gray-800 hover:border-gray-700 transition-all duration-300 h-full">
                <CardHeader className="pb-2">
                  <div className="flex items-center gap-2">
                    <div className={`p-2 rounded-full bg-gradient-to-br ${feature.color}`}>
                      <feature.icon className="w-4 h-4 text-white" />
                    </div>
                    <CardTitle>{feature.title}</CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <CardDescription className="text-gray-400">{feature.description}</CardDescription>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </motion.div>
      </div>
    </section>
  )
}

================
File: components/landing/footer-section.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Github, Mail, Twitter } from "lucide-react"
import Link from "next/link"

// Default footer links
const defaultFooterLinks = {
  product: [
    { title: "Features", href: "/features" },
    { title: "Use Cases", href: "/use-cases" },
    { title: "Pricing", href: "/pricing" },
    { title: "Roadmap", href: "/roadmap" },
  ],
  resources: [
    { title: "Documentation", href: "/docs" },
    { title: "API Reference", href: "/docs/api" },
    { title: "Tutorials", href: "/tutorials" },
    { title: "Blog", href: "/blog" },
  ],
  company: [
    { title: "About", href: "/about" },
    { title: "Team", href: "/team" },
    { title: "Careers", href: "/careers" },
    { title: "Contact", href: "/contact" },
  ],
  legal: [
    { title: "Privacy Policy", href: "/privacy" },
    { title: "Terms of Service", href: "/terms" },
    { title: "Cookie Policy", href: "/cookies" },
  ],
  social: [
    { title: "GitHub", href: "https://github.com/ssdeanx/ai-sdk-DM", icon: Github },
    { title: "Twitter", href: "https://x.com/deanmachinesai", icon: Twitter },
    { title: "Email", href: "mailto:info@ai-sdk-framework.com", icon: Mail },
  ],
}

export default function FooterSection() {
  const [footerData, setFooterData] = useState({
    companyName: "AI SDK Framework",
    description: "Building the future of AI applications with agents, tools, and memory.",
    copyright: `© ${new Date().getFullYear()} AI SDK Framework. All rights reserved.`,
    links: defaultFooterLinks,
  })

  useEffect(() => {
    // Fetch footer content from API
    const fetchFooterContent = async () => {
      try {
        const response = await fetch("/api/content/footer")
        if (response.ok) {
          const data = await response.json()
          if (data) {
            setFooterData({
              companyName: data.title || footerData.companyName,
              description: data.description || footerData.description,
              copyright: data.data?.copyright || `© ${new Date().getFullYear()} ${data.title || footerData.companyName}. All rights reserved.`,
              links: data.data?.links || footerData.links,
            })
          }
        }
      } catch (error) {
        console.error("Error fetching footer content:", error)
      }
    }

    fetchFooterContent()
  }, [])

  return (
    <footer className="bg-gray-950 border-t border-gray-800">
      <div className="container py-12 md:py-16">
        <div className="grid grid-cols-2 md:grid-cols-6 gap-8">
          {/* Company info */}
          <div className="col-span-2">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
            >
              <Link href="/" className="flex items-center space-x-2 mb-4">
                <div className="rounded-full bg-gradient-to-r from-blue-500 to-violet-500 p-1">
                  <div className="h-6 w-6 rounded-full bg-gray-950" />
                </div>
                <span className="font-bold text-xl text-white">{footerData.companyName}</span>
              </Link>
              <p className="text-gray-400 mb-4 max-w-xs">
                {footerData.description}
              </p>
              <div className="flex space-x-4">
                {footerData.links.social.map((link, index) => {
                  const Icon = link.icon
                  return (
                    <Link
                      key={index}
                      href={link.href}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      <Icon className="h-5 w-5" />
                      <span className="sr-only">{link.title}</span>
                    </Link>
                  )
                })}
              </div>
            </motion.div>
          </div>

          {/* Product links */}
          <div className="col-span-1">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              <h3 className="text-white font-medium mb-4">Product</h3>
              <ul className="space-y-2">
                {footerData.links.product.map((link, index) => (
                  <li key={index}>
                    <Link href={link.href} className="text-gray-400 hover:text-white transition-colors">
                      {link.title}
                    </Link>
                  </li>
                ))}
              </ul>
            </motion.div>
          </div>

          {/* Resources links */}
          <div className="col-span-1">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <h3 className="text-white font-medium mb-4">Resources</h3>
              <ul className="space-y-2">
                {footerData.links.resources.map((link, index) => (
                  <li key={index}>
                    <Link href={link.href} className="text-gray-400 hover:text-white transition-colors">
                      {link.title}
                    </Link>
                  </li>
                ))}
              </ul>
            </motion.div>
          </div>

          {/* Company links */}
          <div className="col-span-1">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              <h3 className="text-white font-medium mb-4">Company</h3>
              <ul className="space-y-2">
                {footerData.links.company.map((link, index) => (
                  <li key={index}>
                    <Link href={link.href} className="text-gray-400 hover:text-white transition-colors">
                      {link.title}
                    </Link>
                  </li>
                ))}
              </ul>
            </motion.div>
          </div>

          {/* Legal links */}
          <div className="col-span-1">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              <h3 className="text-white font-medium mb-4">Legal</h3>
              <ul className="space-y-2">
                {footerData.links.legal.map((link, index) => (
                  <li key={index}>
                    <Link href={link.href} className="text-gray-400 hover:text-white transition-colors">
                      {link.title}
                    </Link>
                  </li>
                ))}
              </ul>
            </motion.div>
          </div>
        </div>

        {/* Copyright */}
        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5, delay: 0.5 }}
          className="border-t border-gray-800 mt-12 pt-8 text-center text-gray-500 text-sm"
        >
          {footerData.copyright}
        </motion.div>
      </div>
    </footer>
  )
}

================
File: components/landing/hero-section.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { ArrowRight, Code, Sparkles, Zap } from "lucide-react"
import Link from "next/link"
import { Button } from "@/components/ui/button"

export default function HeroSection() {
  const [heroData, setHeroData] = useState({
    title: "Build Powerful AI Applications with AI SDK",
    subtitle: "The open-source framework for building AI applications with agents, tools, and memory",
    description: "Create, deploy, and manage AI agents with a powerful toolkit designed for developers.",
    cta: "Get Started",
    secondaryCta: "View Documentation",
  })

  useEffect(() => {
    // Fetch hero content from API
    const fetchHeroContent = async () => {
      try {
        const response = await fetch("/api/content/hero")
        if (response.ok) {
          const data = await response.json()
          if (data) {
            setHeroData({
              title: data.title || heroData.title,
              subtitle: data.subtitle || heroData.subtitle,
              description: data.description || heroData.description,
              cta: data.data?.cta || heroData.cta,
              secondaryCta: data.data?.secondaryCta || heroData.secondaryCta,
            })
          }
        }
      } catch (error) {
        console.error("Error fetching hero content:", error)
      }
    }

    fetchHeroContent()
  }, [])

  return (
    <section className="relative py-20 md:py-32 overflow-hidden">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-950 via-gray-900 to-gray-950"></div>
      
      {/* Animated grid */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]"></div>
      </div>
      
      {/* Glowing orbs */}
      <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-blue-500 rounded-full filter blur-[128px] opacity-20 animate-pulse-slow"></div>
      <div className="absolute bottom-1/4 right-1/4 w-64 h-64 bg-purple-500 rounded-full filter blur-[128px] opacity-20 animate-pulse-slow" style={{ animationDelay: "1s" }}></div>
      
      <div className="container relative z-10">
        <div className="flex flex-col items-center text-center max-w-4xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="mb-4"
          >
            <span className="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium bg-gradient-to-r from-blue-500/10 to-violet-500/10 text-blue-400 ring-1 ring-inset ring-blue-500/20 mb-4">
              <Sparkles className="mr-1 h-3 w-3" />
              AI SDK Framework
            </span>
          </motion.div>
          
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="text-4xl md:text-6xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400 mb-6"
          >
            {heroData.title}
          </motion.h1>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="text-xl md:text-2xl text-gray-400 mb-4"
          >
            {heroData.subtitle}
          </motion.p>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="text-gray-500 mb-8 max-w-2xl"
          >
            {heroData.description}
          </motion.p>
          
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
            className="flex flex-col sm:flex-row gap-4"
          >
            <Button asChild size="lg" className="bg-gradient-to-r from-blue-600 to-violet-600 hover:from-blue-700 hover:to-violet-700">
              <Link href="/dashboard">
                {heroData.cta}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="border-gray-700 text-gray-300 hover:bg-gray-800">
              <Link href="/docs">
                <Code className="mr-2 h-4 w-4" />
                {heroData.secondaryCta}
              </Link>
            </Button>
          </motion.div>
          
          {/* Code preview */}
          <motion.div
            initial={{ opacity: 0, y: 40 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7, delay: 0.6 }}
            className="mt-16 w-full max-w-3xl mx-auto"
          >
            <div className="bg-gray-900 border border-gray-800 rounded-lg overflow-hidden shadow-2xl">
              <div className="flex items-center justify-between px-4 py-2 bg-gray-800">
                <div className="flex space-x-1">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                </div>
                <div className="text-xs text-gray-400">example.tsx</div>
                <div></div>
              </div>
              <div className="p-4 text-left font-mono text-sm text-gray-300 overflow-x-auto">
                <pre>
                  <code>
                    <span className="text-blue-400">import</span> <span className="text-gray-300">{'{ openai }'}</span> <span className="text-blue-400">from</span> <span className="text-green-400">'@ai-sdk/openai'</span><span className="text-gray-300">;</span>
                    <br />
                    <span className="text-blue-400">import</span> <span className="text-gray-300">{'{ streamText }'}</span> <span className="text-blue-400">from</span> <span className="text-green-400">'ai'</span><span className="text-gray-300">;</span>
                    <br /><br />
                    <span className="text-blue-400">const</span> <span className="text-yellow-400">stream</span> <span className="text-gray-300">=</span> <span className="text-blue-400">await</span> <span className="text-yellow-400">streamText</span><span className="text-gray-300">{'({'}</span>
                    <br />
                    <span className="text-gray-300">{'  '}model:</span> <span className="text-yellow-400">openai</span><span className="text-gray-300">{'('}</span><span className="text-green-400">'gpt-4o'</span><span className="text-gray-300">{'),'}</span>
                    <br />
                    <span className="text-gray-300">{'  '}prompt:</span> <span className="text-green-400">'Write a short poem about AI'</span>
                    <br />
                    <span className="text-gray-300">{'})'}</span>
                    <br /><br />
                    <span className="text-blue-400">for await</span> <span className="text-gray-300">(</span><span className="text-blue-400">const</span> <span className="text-yellow-400">chunk</span> <span className="text-blue-400">of</span> <span className="text-yellow-400">stream</span><span className="text-gray-300">) {'{'}</span>
                    <br />
                    <span className="text-gray-300">{'  '}process.stdout.write(chunk);</span>
                    <br />
                    <span className="text-gray-300">{'}'}</span>
                  </code>
                </pre>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  )
}

================
File: components/landing/use-cases-section.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Check, ChevronRight, Code, FileText, MessageSquare, Search, ShoppingCart, Users } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import Link from "next/link"

// Default use cases data
const defaultUseCases = [
  {
    id: "customer-support",
    title: "Customer Support",
    description: "Build AI agents that can handle customer inquiries, troubleshoot issues, and provide personalized support 24/7.",
    icon: Users,
    features: [
      "Handle multiple customer inquiries simultaneously",
      "Access knowledge bases and documentation",
      "Escalate complex issues to human agents",
      "Personalize responses based on customer history",
    ],
    code: `import { openai } from '@ai-sdk/openai';
import { createAgent } from '@ai-sdk/agent';

// Create a customer support agent
const supportAgent = createAgent({
  name: 'Customer Support',
  model: openai('gpt-4o'),
  tools: [
    knowledgeBaseTool,
    ticketingSystemTool,
    escalationTool
  ],
  systemPrompt: \`You are a helpful customer support agent.
  Answer customer questions based on the knowledge base.
  If you can't help, create a support ticket.\`
});

// Handle customer inquiry
const response = await supportAgent.execute({
  messages: [
    { role: 'user', content: customerInquiry }
  ]
});`,
  },
  {
    id: "content-generation",
    title: "Content Generation",
    description: "Create AI agents that can generate blog posts, product descriptions, social media content, and more.",
    icon: FileText,
    features: [
      "Generate SEO-optimized content",
      "Create content in different tones and styles",
      "Research topics and incorporate facts",
      "Edit and refine existing content",
    ],
    code: `import { anthropic } from '@ai-sdk/anthropic';
import { createAgent } from '@ai-sdk/agent';

// Create a content generation agent
const contentAgent = createAgent({
  name: 'Content Generator',
  model: anthropic('claude-3-opus-20240229'),
  tools: [
    researchTool,
    seoAnalysisTool,
    imageGenerationTool
  ],
  systemPrompt: \`You are a skilled content creator.
  Generate engaging, well-researched content
  that matches the requested style and tone.\`
});

// Generate a blog post
const blogPost = await contentAgent.execute({
  messages: [
    { role: 'user', content: 'Write a blog post about AI trends in 2024' }
  ]
});`,
  },
  {
    id: "research-assistant",
    title: "Research Assistant",
    description: "Build AI agents that can search the web, analyze data, and synthesize information to help with research tasks.",
    icon: Search,
    features: [
      "Search the web for relevant information",
      "Analyze and summarize research papers",
      "Extract key insights from large datasets",
      "Generate research reports and presentations",
    ],
    code: `import { google } from '@ai-sdk/google';
import { createAgent } from '@ai-sdk/agent';

// Create a research assistant agent
const researchAgent = createAgent({
  name: 'Research Assistant',
  model: google('gemini-1.5-pro'),
  tools: [
    webSearchTool,
    pdfExtractorTool,
    dataAnalysisTool,
    citationGeneratorTool
  ],
  systemPrompt: \`You are a research assistant.
  Search for information, analyze data,
  and synthesize findings into clear reports.\`
});

// Research a topic
const researchReport = await researchAgent.execute({
  messages: [
    { role: 'user', content: 'Research the impact of AI on healthcare' }
  ]
});`,
  },
  {
    id: "code-assistant",
    title: "Code Assistant",
    description: "Create AI agents that can help developers write, debug, and optimize code across multiple programming languages.",
    icon: Code,
    features: [
      "Generate code based on requirements",
      "Debug and fix code issues",
      "Explain complex code snippets",
      "Optimize code for performance",
    ],
    code: `import { openai } from '@ai-sdk/openai';
import { createAgent } from '@ai-sdk/agent';

// Create a code assistant agent
const codeAgent = createAgent({
  name: 'Code Assistant',
  model: openai('gpt-4o'),
  tools: [
    codeAnalysisTool,
    gitTool,
    testGeneratorTool,
    documentationTool
  ],
  systemPrompt: \`You are a coding assistant.
  Help write, debug, and optimize code.
  Explain concepts clearly and follow best practices.\`
});

// Generate code
const generatedCode = await codeAgent.execute({
  messages: [
    { role: 'user', content: 'Write a React component for a todo list' }
  ]
});`,
  },
]

export default function UseCasesSection() {
  const [useCases, setUseCases] = useState(defaultUseCases)
  const [activeTab, setActiveTab] = useState(defaultUseCases[0].id)

  useEffect(() => {
    // Fetch use cases content from API
    const fetchUseCasesContent = async () => {
      try {
        const response = await fetch("/api/content/use-cases")
        if (response.ok) {
          const data = await response.json()
          if (data && Array.isArray(data)) {
            // Map API data to use cases format
            const mappedUseCases = data.map((item: any) => ({
              id: item.data?.id || item.id,
              title: item.title || "",
              description: item.description || "",
              icon: getIconByName(item.data?.icon || ""),
              features: item.data?.features || [],
              code: item.data?.code || "",
            }))
            setUseCases(mappedUseCases)
            if (mappedUseCases.length > 0) {
              setActiveTab(mappedUseCases[0].id)
            }
          }
        }
      } catch (error) {
        console.error("Error fetching use cases content:", error)
      }
    }

    fetchUseCasesContent()
  }, [])

  // Helper function to get icon component by name
  function getIconByName(name: string) {
    const iconMap: Record<string, any> = {
      Users: Users,
      FileText: FileText,
      Search: Search,
      Code: Code,
      MessageSquare: MessageSquare,
      ShoppingCart: ShoppingCart,
    }
    return iconMap[name] || Users
  }

  return (
    <section className="py-20 bg-gray-950 relative">
      <div className="container relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-400 mb-4">
            Use Cases
          </h2>
          <p className="text-gray-400 max-w-2xl mx-auto">
            Discover how AI SDK Framework can be used to build a wide range of AI-powered applications.
          </p>
        </motion.div>

        <Tabs defaultValue={activeTab} value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid grid-cols-2 md:grid-cols-4 mb-8 bg-gray-900 p-1 rounded-lg">
            {useCases.map((useCase) => (
              <TabsTrigger
                key={useCase.id}
                value={useCase.id}
                className="data-[state=active]:bg-gray-800 data-[state=active]:text-white"
              >
                <useCase.icon className="mr-2 h-4 w-4" />
                {useCase.title}
              </TabsTrigger>
            ))}
          </TabsList>
          
          {useCases.map((useCase) => (
            <TabsContent key={useCase.id} value={useCase.id} className="mt-0">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <h3 className="text-2xl font-bold text-white mb-4">{useCase.title}</h3>
                  <p className="text-gray-400 mb-6">{useCase.description}</p>
                  
                  <div className="space-y-3 mb-8">
                    {useCase.features.map((feature, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <div className="mt-1 text-green-500">
                          <Check className="h-4 w-4" />
                        </div>
                        <p className="text-gray-300">{feature}</p>
                      </div>
                    ))}
                  </div>
                  
                  <Button asChild variant="outline" className="border-gray-700 text-gray-300 hover:bg-gray-800">
                    <Link href="/docs/use-cases">
                      View Documentation
                      <ChevronRight className="ml-2 h-4 w-4" />
                    </Link>
                  </Button>
                </motion.div>
                
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <div className="bg-gray-900 border border-gray-800 rounded-lg overflow-hidden shadow-lg">
                    <div className="flex items-center justify-between px-4 py-2 bg-gray-800">
                      <div className="flex space-x-1">
                        <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                        <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                        <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      </div>
                      <div className="text-xs text-gray-400">example.ts</div>
                      <div></div>
                    </div>
                    <div className="p-4 font-mono text-sm text-gray-300 overflow-x-auto">
                      <pre className="whitespace-pre-wrap">
                        <code>{useCase.code}</code>
                      </pre>
                    </div>
                  </div>
                </motion.div>
              </div>
            </TabsContent>
          ))}
        </Tabs>
      </div>
    </section>
  )
}

================
File: components/layout/sidebar.tsx
================
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import {
  LayoutDashboard,
  Settings,
  MessageSquare,
  Wrench,
  Bot,
  FileText,
  Network,
  Blocks,
  ChevronDown,
  ChevronRight,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { DatabaseStatus } from "@/components/ui/database-status"
import { TopNavbar } from "@/components/layout/top-navbar"
import { MainSidebar } from "@/components/layout/main-sidebar"

interface SidebarProps {
  className?: string
}

interface SidebarItem {
  title: string
  href: string
  icon: React.ElementType
  submenu?: SidebarItem[]
}

export function Sidebar({ className }: SidebarProps) {
  const pathname = usePathname()
  const [openSubmenu, setOpenSubmenu] = useState<string | null>(null)

  // Automatically open submenu based on current path
  useEffect(() => {
    const items = sidebarItems.flatMap((item) => (item.submenu ? [item] : []))
    for (const item of items) {
      if (item.submenu?.some((subitem) => pathname === subitem.href)) {
        setOpenSubmenu(item.title)
        break
      }
    }
  }, [pathname])

  const sidebarItems: SidebarItem[] = [
    {
      title: "Dashboard",
      href: "/dashboard",
      icon: LayoutDashboard,
    },
    {
      title: "Chat",
      href: "/chat",
      icon: MessageSquare,
    },
    {
      title: "AI Configuration",
      href: "#",
      icon: Blocks,
      submenu: [
        {
          title: "Models",
          href: "/models",
          icon: Blocks,
        },
        {
          title: "Tools",
          href: "/tools",
          icon: Wrench,
        },
        {
          title: "Agents",
          href: "/agents",
          icon: Bot,
        },
      ],
    },
    {
      title: "Content",
      href: "#",
      icon: FileText,
      submenu: [
        {
          title: "Blog",
          href: "/blog",
          icon: FileText,
        },
        {
          title: "MDX Builder",
          href: "/mdx-builder",
          icon: FileText,
        },
      ],
    },
    {
      title: "Advanced",
      href: "#",
      icon: Network,
      submenu: [
        {
          title: "Networks",
          href: "/networks",
          icon: Network,
        },
        {
          title: "App Builder",
          href: "/app-builder",
          icon: Blocks,
        },
      ],
    },
    {
      title: "Settings",
      href: "/settings",
      icon: Settings,
    },
  ]

  const toggleSubmenu = (title: string) => {
    setOpenSubmenu((prev) => (prev === title ? null : title))
  }

  return (
    <div className={cn("pb-12 h-full flex flex-col", className)}>
      <div className="space-y-4 py-4 flex-1">
        <div className="px-3 py-2">
          <div className="flex items-center justify-between mb-2">
            <h2 className="mb-2 px-4 text-lg font-semibold tracking-tight">AI SDK Framework</h2>
          </div>
          <div className="px-4 mb-2">
            <DatabaseStatus />
          </div>
        </div>
        <ScrollArea className="flex-1">
          <div className="space-y-1 px-3">
            {sidebarItems.map((item) =>
              !item.submenu ? (
                <Button
                  key={item.title}
                  asChild
                  variant={pathname === item.href ? "secondary" : "ghost"}
                  className="w-full justify-start"
                >
                  <Link href={item.href}>
                    <item.icon className="mr-2 h-4 w-4" />
                    {item.title}
                  </Link>
                </Button>
              ) : (
                <div key={item.title} className="space-y-1">
                  <Button variant="ghost" className="w-full justify-start" onClick={() => toggleSubmenu(item.title)}>
                    <item.icon className="mr-2 h-4 w-4" />
                    {item.title}
                    {openSubmenu === item.title ? (
                      <ChevronDown className="ml-auto h-4 w-4" />
                    ) : (
                      <ChevronRight className="ml-auto h-4 w-4" />
                    )}
                  </Button>
                  {openSubmenu === item.title && (
                    <div className="pl-4 space-y-1">
                      {item.submenu.map((subitem) => (
                        <Button
                          key={subitem.title}
                          asChild
                          variant={pathname === subitem.href ? "secondary" : "ghost"}
                          className="w-full justify-start"
                        >
                          <Link href={subitem.href}>
                            <subitem.icon className="mr-2 h-4 w-4" />
                            {subitem.title}
                          </Link>
                        </Button>
                      ))}
                    </div>
                  )}
                </div>
              ),
            )}
          </div>
        </ScrollArea>
      </div>
    </div>
  )
}

// Export the DashboardLayout component
export function DashboardLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="flex min-h-screen flex-col">
      <TopNavbar />
      <div className="flex flex-1">
        <MainSidebar />
        <main className="flex-1 overflow-hidden">
          <div className="container py-6">{children}</div>
        </main>
      </div>
    </div>
  )
}

================
File: components/networks/networks-list.tsx
================
"use client"

import { useEffect, useState } from "react"
import { NetworkCard } from "@/components/networks/network-card"
import { Button } from "@/components/ui/button"
import { PlusCircle, RefreshCw } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { CreateNetworkDialog } from "@/components/networks/create-network-dialog"
import type { Network } from "@/types/networks"
import { Skeleton } from "@/components/ui/skeleton"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"
import { Input } from "@/components/ui/input"
import { useDebounce } from "@/hooks/use-debounce"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"

export function NetworksList() {
  const [filteredNetworks, setFilteredNetworks] = useState<Network[]>([])
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const debouncedSearchQuery = useDebounce(searchQuery, 300)
  const { toast } = useToast()

  // Use the standardized hook for fetching networks
  const {
    data: networks,
    isLoading,
    error,
    refresh: fetchNetworks,
  } = useSupabaseFetch<Network>({
    endpoint: "/api/networks",
    resourceName: "Networks",
    dataKey: "networks",
  })

  useEffect(() => {
    if (debouncedSearchQuery.trim() === "") {
      setFilteredNetworks(networks)
    } else {
      const query = debouncedSearchQuery.toLowerCase()
      const filtered = networks.filter(
        (network) => network.name.toLowerCase().includes(query) || network.description.toLowerCase().includes(query),
      )
      setFilteredNetworks(filtered)
    }
  }, [debouncedSearchQuery, networks])

  const handleRefresh = () => {
    setIsRefreshing(true)
    fetchNetworks().finally(() => setIsRefreshing(false))
  }

  const handleCreateNetwork = async (newNetwork: Omit<Network, "id">) => {
    try {
      const response = await fetch("/api/networks", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newNetwork),
      })

      if (!response.ok) {
        throw new Error(`Error creating network: ${response.statusText}`)
      }

      // Refresh the networks list after creating a new network
      fetchNetworks()

      toast({
        title: "Success",
        description: "Network created successfully!",
      })

      setIsDialogOpen(false)
    } catch (err) {
      console.error("Failed to create network:", err)
      toast({
        title: "Error",
        description: "Failed to create network. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleDeleteNetwork = async (id: string) => {
    try {
      const response = await fetch(`/api/networks/${id}`, {
        method: "DELETE",
      })

      if (!response.ok) {
        throw new Error(`Error deleting network: ${response.statusText}`)
      }

      // Refresh the networks list after deleting a network
      fetchNetworks()

      // Also update filtered networks
      setFilteredNetworks((prevNetworks) => prevNetworks.filter((network) => network.id !== id))

      toast({
        title: "Success",
        description: "Network deleted successfully!",
      })
    } catch (err) {
      console.error("Failed to delete network:", err)
      toast({
        title: "Error",
        description: "Failed to delete network. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleUpdateNetwork = async (updatedNetwork: Network) => {
    try {
      const response = await fetch(`/api/networks/${updatedNetwork.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedNetwork),
      })

      if (!response.ok) {
        throw new Error(`Error updating network: ${response.statusText}`)
      }

      // Refresh the networks list after updating a network
      fetchNetworks()

      // Also update filtered networks if needed
      const updated = await response.json()
      setFilteredNetworks((prevNetworks) =>
        prevNetworks.map((network) => (network.id === updated.id ? updated : network)),
      )

      toast({
        title: "Success",
        description: "Network updated successfully!",
      })
    } catch (err) {
      console.error("Failed to update network:", err)
      toast({
        title: "Error",
        description: "Failed to update network. Please try again.",
        variant: "destructive",
      })
    }
  }

  if (error) {
    return (
      <Alert variant="destructive" className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>{error.message}</AlertDescription>
        <Button variant="outline" size="sm" className="mt-2" onClick={fetchNetworks}>
          Try Again
        </Button>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div className="relative w-full sm:w-64 md:w-80">
          <Input
            type="text"
            placeholder="Search networks..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="bg-gray-900 border-gray-800"
          />
        </div>
        <div className="flex space-x-2 w-full sm:w-auto justify-end">
          <Button variant="outline" size="sm" onClick={handleRefresh} disabled={isRefreshing}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? "animate-spin" : ""}`} />
            Refresh
          </Button>
          <Button variant="default" size="sm" onClick={() => setIsDialogOpen(true)}>
            <PlusCircle className="h-4 w-4 mr-2" />
            New Network
          </Button>
        </div>
      </div>

      {isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, index) => (
            <div key={index} className="border rounded-lg p-4 bg-gray-900 border-gray-800">
              <Skeleton className="h-8 w-3/4 mb-4" />
              <Skeleton className="h-4 w-full mb-2" />
              <Skeleton className="h-4 w-2/3 mb-4" />
              <div className="flex justify-between mt-4">
                <Skeleton className="h-8 w-20" />
                <Skeleton className="h-8 w-20" />
              </div>
            </div>
          ))}
        </div>
      ) : filteredNetworks.length === 0 ? (
        <div className="text-center py-12 bg-gray-900 rounded-lg border border-gray-800">
          <h3 className="text-xl font-medium text-gray-300 mb-2">
            {networks.length === 0 ? "No networks found" : "No matching networks found"}
          </h3>
          <p className="text-gray-400 mb-6">
            {networks.length === 0 ? "Create your first network to get started" : "Try adjusting your search criteria"}
          </p>
          {networks.length === 0 && (
            <Button variant="default" onClick={() => setIsDialogOpen(true)}>
              <PlusCircle className="h-4 w-4 mr-2" />
              Create Network
            </Button>
          )}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredNetworks.map((network) => (
            <NetworkCard
              key={network.id}
              network={network}
              onDelete={handleDeleteNetwork}
              onUpdate={handleUpdateNetwork}
            />
          ))}
        </div>
      )}

      <CreateNetworkDialog
        isOpen={isDialogOpen}
        onClose={() => setIsDialogOpen(false)}
        onCreateNetwork={handleCreateNetwork}
      />
    </div>
  )
}

================
File: components/theme-provider.tsx
================
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: components/tools/create-tool-dialog.tsx
================
"use client"

import type React from "react"

import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import type { Tool } from "@/types/tools"
import { Loader2 } from "lucide-react"

interface CreateToolDialogProps {
  isOpen: boolean
  onClose: () => void
  onCreateTool: (tool: Omit<Tool, "id">) => Promise<void>
}

export function CreateToolDialog({ isOpen, onClose, onCreateTool }: CreateToolDialogProps) {
  const [name, setName] = useState("")
  const [description, setDescription] = useState("")
  const [category, setCategory] = useState("api")
  const [schema, setSchema] = useState("{}")
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!name.trim()) {
      newErrors.name = "Name is required"
    }

    if (!description.trim()) {
      newErrors.description = "Description is required"
    }

    if (!category) {
      newErrors.category = "Category is required"
    }

    try {
      JSON.parse(schema)
    } catch (e) {
      newErrors.schema = "Invalid JSON schema"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      await onCreateTool({
        name,
        description,
        category,
        schema: JSON.parse(schema),
        status: "active",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      })

      // Reset form
      setName("")
      setDescription("")
      setCategory("api")
      setSchema("{}")
      setErrors({})
    } catch (error) {
      console.error("Error creating tool:", error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleClose = () => {
    setName("")
    setDescription("")
    setCategory("api")
    setSchema("{}")
    setErrors({})
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px] bg-gray-950 border-gray-800">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle className="text-xl text-white">Create New Tool</DialogTitle>
            <DialogDescription>Configure your AI tool with the details below.</DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="name" className={errors.name ? "text-red-500" : ""}>
                Name {errors.name && <span className="text-red-500">*</span>}
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter tool name"
                className={`bg-gray-900 border-gray-800 ${errors.name ? "border-red-500" : ""}`}
              />
              {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="description" className={errors.description ? "text-red-500" : ""}>
                Description {errors.description && <span className="text-red-500">*</span>}
              </Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Enter tool description"
                className={`bg-gray-900 border-gray-800 min-h-[100px] ${errors.description ? "border-red-500" : ""}`}
              />
              {errors.description && <p className="text-red-500 text-sm">{errors.description}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="category" className={errors.category ? "text-red-500" : ""}>
                Category {errors.category && <span className="text-red-500">*</span>}
              </Label>
              <Select value={category} onValueChange={setCategory}>
                <SelectTrigger className={`bg-gray-900 border-gray-800 ${errors.category ? "border-red-500" : ""}`}>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-gray-800">
                  <SelectItem value="api">API</SelectItem>
                  <SelectItem value="data">Data Processing</SelectItem>
                  <SelectItem value="web">Web</SelectItem>
                  <SelectItem value="file">File</SelectItem>
                  <SelectItem value="custom">Custom</SelectItem>
                </SelectContent>
              </Select>
              {errors.category && <p className="text-red-500 text-sm">{errors.category}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="schema" className={errors.schema ? "text-red-500" : ""}>
                Schema {errors.schema && <span className="text-red-500">*</span>}
              </Label>
              <Textarea
                id="schema"
                value={schema}
                onChange={(e) => setSchema(e.target.value)}
                placeholder="Enter JSON schema"
                className={`bg-gray-900 border-gray-800 min-h-[150px] font-mono text-sm ${errors.schema ? "border-red-500" : ""}`}
              />
              {errors.schema && <p className="text-red-500 text-sm">{errors.schema}</p>}
              <p className="text-gray-400 text-xs">Define the input parameters for your tool in JSON format.</p>
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={handleClose} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create Tool"
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/tools/edit-tool-dialog.tsx
================
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import type { Tool } from "@/types/tools"
import { Loader2 } from "lucide-react"

interface EditToolDialogProps {
  isOpen: boolean
  onClose: () => void
  tool: Tool
  onUpdateTool: (tool: Tool) => Promise<void>
}

export function EditToolDialog({ isOpen, onClose, tool, onUpdateTool }: EditToolDialogProps) {
  const [name, setName] = useState(tool.name)
  const [description, setDescription] = useState(tool.description)
  const [category, setCategory] = useState(tool.category)
  const [schema, setSchema] = useState(JSON.stringify(tool.schema, null, 2))
  const [status, setStatus] = useState(tool.status)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string, string>>({})

  useEffect(() => {
    if (isOpen) {
      setName(tool.name)
      setDescription(tool.description)
      setCategory(tool.category)
      setSchema(JSON.stringify(tool.schema, null, 2))
      setStatus(tool.status)
      setErrors({})
    }
  }, [isOpen, tool])

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!name.trim()) {
      newErrors.name = "Name is required"
    }

    if (!description.trim()) {
      newErrors.description = "Description is required"
    }

    if (!category) {
      newErrors.category = "Category is required"
    }

    try {
      JSON.parse(schema)
    } catch (e) {
      newErrors.schema = "Invalid JSON schema"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      await onUpdateTool({
        ...tool,
        name,
        description,
        category,
        schema: JSON.parse(schema),
        status,
        updatedAt: new Date().toISOString(),
      })

      onClose()
    } catch (error) {
      console.error("Error updating tool:", error)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px] bg-gray-950 border-gray-800">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle className="text-xl text-white">Edit Tool</DialogTitle>
            <DialogDescription>Update your AI tool details below.</DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="name" className={errors.name ? "text-red-500" : ""}>
                Name {errors.name && <span className="text-red-500">*</span>}
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter tool name"
                className={`bg-gray-900 border-gray-800 ${errors.name ? "border-red-500" : ""}`}
              />
              {errors.name && <p className="text-red-500 text-sm">{errors.name}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="description" className={errors.description ? "text-red-500" : ""}>
                Description {errors.description && <span className="text-red-500">*</span>}
              </Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Enter tool description"
                className={`bg-gray-900 border-gray-800 min-h-[100px] ${errors.description ? "border-red-500" : ""}`}
              />
              {errors.description && <p className="text-red-500 text-sm">{errors.description}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="category" className={errors.category ? "text-red-500" : ""}>
                Category {errors.category && <span className="text-red-500">*</span>}
              </Label>
              <Select value={category} onValueChange={setCategory}>
                <SelectTrigger className={`bg-gray-900 border-gray-800 ${errors.category ? "border-red-500" : ""}`}>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent className="bg-gray-900 border-gray-800">
                  <SelectItem value="api">API</SelectItem>
                  <SelectItem value="data">Data Processing</SelectItem>
                  <SelectItem value="web">Web</SelectItem>
                  <SelectItem value="file">File</SelectItem>
                  <SelectItem value="custom">Custom</SelectItem>
                </SelectContent>
              </Select>
              {errors.category && <p className="text-red-500 text-sm">{errors.category}</p>}
            </div>

            <div className="grid gap-2">
              <Label htmlFor="schema" className={errors.schema ? "text-red-500" : ""}>
                Schema {errors.schema && <span className="text-red-500">*</span>}
              </Label>
              <Textarea
                id="schema"
                value={schema}
                onChange={(e) => setSchema(e.target.value)}
                placeholder="Enter JSON schema"
                className={`bg-gray-900 border-gray-800 min-h-[150px] font-mono text-sm ${errors.schema ? "border-red-500" : ""}`}
              />
              {errors.schema && <p className="text-red-500 text-sm">{errors.schema}</p>}
              <p className="text-gray-400 text-xs">Define the input parameters for your tool in JSON format.</p>
            </div>

            <div className="flex items-center justify-between">
              <Label htmlFor="status">Active Status</Label>
              <Switch
                id="status"
                checked={status === "active"}
                onCheckedChange={(checked) => setStatus(checked ? "active" : "inactive")}
              />
            </div>
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Updating...
                </>
              ) : (
                "Update Tool"
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/tools/enhanced-tool-card.tsx
================
"use client"

import { useState } from "react"
import { MoreHorizontal, Trash2, Edit, Play, Code, Copy, Check } from "lucide-react"
import { motion } from "framer-motion"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Badge } from "@/components/ui/badge"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ToolExecutor } from "./tool-executor"

interface ToolCardProps {
  tool: {
    id: string
    name: string
    description: string
    parameters_schema: string
    category?: string
    implementation?: string
    is_enabled?: boolean
    created_at: string
    updated_at: string
  }
  onEdit: (tool: any) => void
  onDelete: (id: string) => void
  onDuplicate?: (tool: any) => void
}

export function EnhancedToolCard({ tool, onEdit, onDelete, onDuplicate }: ToolCardProps) {
  const [isDeleting, setIsDeleting] = useState(false)
  const [showExecutor, setShowExecutor] = useState(false)
  const [showImplementation, setShowImplementation] = useState(false)
  const [copied, setCopied] = useState(false)

  const handleDelete = async () => {
    try {
      setIsDeleting(true)
      await onDelete(tool.id)
    } finally {
      setIsDeleting(false)
    }
  }

  const handleDuplicate = () => {
    if (onDuplicate) {
      onDuplicate(tool)
    }
  }

  const copyImplementation = () => {
    if (tool.implementation) {
      navigator.clipboard.writeText(tool.implementation)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    }
  }

  // Parse the schema to display parameter info
  let parametersCount = 0
  let requiredParams: string[] = []
  try {
    const schema = JSON.parse(tool.parameters_schema)
    parametersCount = schema.properties ? Object.keys(schema.properties).length : 0
    requiredParams = schema.required || []
  } catch (e) {
    console.error("Error parsing schema:", e)
  }

  const getCategoryColor = (category?: string) => {
    switch (category?.toLowerCase()) {
      case "web":
        return "bg-blue-500/10 text-blue-500 border-blue-500/20"
      case "code":
        return "bg-amber-500/10 text-amber-500 border-amber-500/20"
      case "data":
        return "bg-green-500/10 text-green-500 border-green-500/20"
      case "ai":
        return "bg-purple-500/10 text-purple-500 border-purple-500/20"
      case "custom":
        return "bg-orange-500/10 text-orange-500 border-orange-500/20"
      default:
        return "bg-gray-500/10 text-gray-500 border-gray-500/20"
    }
  }

  return (
    <>
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
        <Card className={`overflow-hidden h-full flex flex-col ${!tool.is_enabled ? "opacity-70" : ""}`}>
          <CardHeader className="pb-2">
            <div className="flex items-start justify-between">
              <div className="space-y-1">
                <CardTitle className="flex items-center">
                  <span className="mr-2">{tool.name}</span>
                  {!tool.is_enabled && (
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Badge variant="outline" className="bg-gray-500/10 text-gray-500 ml-2">
                            Disabled
                          </Badge>
                        </TooltipTrigger>
                        <TooltipContent>This tool is currently disabled</TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  )}
                </CardTitle>
                <CardDescription>{tool.description}</CardDescription>
              </div>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon" className="h-8 w-8">
                    <MoreHorizontal className="h-4 w-4" />
                    <span className="sr-only">Open menu</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => onEdit(tool)}>
                    <Edit className="mr-2 h-4 w-4" />
                    Edit
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setShowExecutor(true)}>
                    <Play className="mr-2 h-4 w-4" />
                    Test
                  </DropdownMenuItem>
                  {tool.implementation && (
                    <DropdownMenuItem onClick={() => setShowImplementation(true)}>
                      <Code className="mr-2 h-4 w-4" />
                      View Implementation
                    </DropdownMenuItem>
                  )}
                  {onDuplicate && (
                    <DropdownMenuItem onClick={handleDuplicate}>
                      <Copy className="mr-2 h-4 w-4" />
                      Duplicate
                    </DropdownMenuItem>
                  )}
                  <DropdownMenuItem onClick={handleDelete} disabled={isDeleting} className="text-destructive">
                    <Trash2 className="mr-2 h-4 w-4" />
                    {isDeleting ? "Deleting..." : "Delete"}
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </CardHeader>
          <CardContent className="pb-2 flex-1">
            <div className="space-y-2">
              <div className="flex items-center text-sm">
                <span className="text-muted-foreground">Parameters:</span>
                <span className="ml-1 font-medium">{parametersCount}</span>
                {requiredParams.length > 0 && (
                  <span className="ml-1 text-muted-foreground">({requiredParams.length} required)</span>
                )}
              </div>
            </div>
          </CardContent>
          <CardFooter className="border-t bg-muted/20 mt-auto">
            <div className="flex w-full justify-between items-center">
              <Badge variant="outline" className={getCategoryColor(tool.category)}>
                {tool.category || "Unknown"}
              </Badge>
              <Button size="sm" onClick={() => setShowExecutor(true)}>
                <Play className="h-4 w-4 mr-2" />
                Test
              </Button>
            </div>
          </CardFooter>
        </Card>
      </motion.div>

      {/* Tool Executor Dialog */}
      <Dialog open={showExecutor} onOpenChange={setShowExecutor}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Test Tool: {tool.name}</DialogTitle>
          </DialogHeader>
          <ToolExecutor tool={tool} onExecutionComplete={() => {}} />
        </DialogContent>
      </Dialog>

      {/* Implementation Viewer Dialog */}
      <Dialog open={showImplementation} onOpenChange={setShowImplementation}>
        <DialogContent className="sm:max-w-[800px]">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <span>Implementation: {tool.name}</span>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" onClick={copyImplementation}>
                  {copied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
                  {copied ? "Copied" : "Copy"}
                </Button>
                <Button variant="outline" size="sm" onClick={() => onEdit(tool)}>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </Button>
              </div>
            </DialogTitle>
          </DialogHeader>
          <Tabs defaultValue="code">
            <TabsList>
              <TabsTrigger value="code">Code</TabsTrigger>
              <TabsTrigger value="docs">Documentation</TabsTrigger>
            </TabsList>
            <TabsContent value="code" className="p-0">
              <div className="relative">
                <pre className="bg-muted p-4 rounded-md overflow-auto max-h-[400px] text-sm font-mono">
                  {tool.implementation || "// No implementation available"}
                </pre>
              </div>
            </TabsContent>
            <TabsContent value="docs">
              <div className="p-4 space-y-4">
                <div>
                  <h3 className="text-lg font-medium">Description</h3>
                  <p className="text-muted-foreground">{tool.description}</p>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Parameters</h3>
                  <pre className="bg-muted p-4 rounded-md overflow-auto max-h-[200px] text-sm font-mono">
                    {tool.parameters_schema}
                  </pre>
                </div>
                <div>
                  <h3 className="text-lg font-medium">Usage</h3>
                  <p className="text-muted-foreground">This tool can be used by agents or directly through the API.</p>
                  <div className="mt-2">
                    <h4 className="font-medium">API Endpoint</h4>
                    <code className="bg-muted p-2 rounded-md text-sm block">POST /api/tools/execute</code>
                    <h4 className="font-medium mt-2">Request Body</h4>
                    <pre className="bg-muted p-2 rounded-md text-sm overflow-auto">
                      {JSON.stringify(
                        {
                          toolId: tool.id,
                          parameters: "/* Your parameters here */",
                        },
                        null,
                        2,
                      )}
                    </pre>
                  </div>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>
    </>
  )
}

================
File: components/tools/execute-tool-dialog.tsx
================
"use client"

import { useState, useEffect } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import type { Tool } from "@/types/tools"
import { Loader2 } from "lucide-react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useToolExecutor } from "@/hooks/use-executor"

interface ExecuteToolDialogProps {
  isOpen: boolean
  onClose: () => void
  tool: Tool
  onExecuteTool: (id: string, params: Record<string, any>) => Promise<any>
}

export function ExecuteToolDialog({ isOpen, onClose, tool, onExecuteTool }: ExecuteToolDialogProps) {
  const [params, setParams] = useState<Record<string, any>>({})
  const [result, setResult] = useState<any>(null)
  const [error, setError] = useState<string | null>(null)

  // Use our custom hook for tool execution
  const { executeTool, isExecuting } = useToolExecutor({
    toolId: tool.id,
    onSuccess: (data) => {
      setResult(data.result)
    },
    onError: (err) => {
      setError(err.message)
    }
  })

  useEffect(() => {
    if (isOpen) {
      // Initialize params based on schema
      const initialParams: Record<string, any> = {}
      if (tool.schema && typeof tool.schema === "object") {
        Object.entries(tool.schema).forEach(([key, value]) => {
          if (value && typeof value === "object" && "default" in value) {
            initialParams[key] = value.default
          } else {
            initialParams[key] = ""
          }
        })
      }
      setParams(initialParams)
      setResult(null)
      setError(null)
    }
  }, [isOpen, tool])

  const handleParamChange = (key: string, value: any) => {
    setParams((prev) => ({
      ...prev,
      [key]: value,
    }))
  }

  const handleExecute = async () => {
    setResult(null)
    setError(null)

    try {
      // Use our custom hook to execute the tool
      await executeTool(params)
    } catch (err) {
      console.error("Error executing tool:", err)
      // Error handling is done in the hook
    }
  }

  const renderParamInputs = () => {
    if (!tool.schema || typeof tool.schema !== "object") {
      return <div className="text-gray-400 italic">No parameters defined for this tool.</div>
    }

    return Object.entries(tool.schema).map(([key, value]) => {
      const paramType = value && typeof value === "object" && "type" in value ? value.type : "string"

      const paramDescription = value && typeof value === "object" && "description" in value ? value.description : ""

      return (
        <div key={key} className="grid gap-2">
          <Label htmlFor={`param-${key}`} className="flex items-center justify-between">
            <span>{key}</span>
            {paramType && <span className="text-xs text-gray-500">{paramType}</span>}
          </Label>

          {paramType === "object" || paramType === "array" ? (
            <Textarea
              id={`param-${key}`}
              value={typeof params[key] === "object" ? JSON.stringify(params[key], null, 2) : params[key]}
              onChange={(e) => {
                try {
                  const value = JSON.parse(e.target.value)
                  handleParamChange(key, value)
                } catch {
                  handleParamChange(key, e.target.value)
                }
              }}
              placeholder={`Enter ${paramType} value`}
              className="bg-gray-900 border-gray-800 font-mono text-sm"
            />
          ) : (
            <Input
              id={`param-${key}`}
              value={params[key] || ""}
              onChange={(e) => handleParamChange(key, e.target.value)}
              placeholder={`Enter ${key}`}
              className="bg-gray-900 border-gray-800"
              type={paramType === "number" ? "number" : "text"}
            />
          )}

          {paramDescription && <p className="text-gray-400 text-xs">{paramDescription}</p>}
        </div>
      )
    })
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px] bg-gray-950 border-gray-800 max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="text-xl text-white">Execute Tool: {tool.name}</DialogTitle>
          <DialogDescription>Configure parameters and execute the tool.</DialogDescription>
        </DialogHeader>

        <ScrollArea className="flex-1 pr-4">
          <div className="grid gap-4 py-4">
            {renderParamInputs()}

            {result && (
              <div className="mt-4">
                <Label>Result</Label>
                <div className="bg-gray-900 border border-gray-800 rounded-md p-3 mt-1">
                  <pre className="text-sm text-white overflow-auto max-h-[200px]">
                    {typeof result === "object" ? JSON.stringify(result, null, 2) : result}
                  </pre>
                </div>
              </div>
            )}

            {error && (
              <div className="mt-4 p-3 bg-red-900/20 border border-red-800 rounded-md">
                <p className="text-red-400 text-sm">{error}</p>
              </div>
            )}
          </div>
        </ScrollArea>

        <DialogFooter className="pt-4">
          <Button type="button" variant="outline" onClick={onClose} disabled={isExecuting}>
            Close
          </Button>
          <Button type="button" onClick={handleExecute} disabled={isExecuting}>
            {isExecuting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Executing...
              </>
            ) : (
              "Execute Tool"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/tools/tools-header.tsx
================
"use client"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, Filter } from "lucide-react"
import { useState } from "react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ToolsHeader() {
  const [searchQuery, setSearchQuery] = useState("")

  return (
    <div className="mb-8 space-y-4">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-white">Tools</h1>
          <p className="text-gray-400 mt-1">Create and manage your AI tools and integrations</p>
        </div>
        <div className="flex items-center gap-2 w-full sm:w-auto">
          <div className="relative flex-1 sm:flex-initial">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
            <Input
              type="text"
              placeholder="Search tools..."
              className="pl-8 bg-gray-900 border-gray-800 w-full"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="icon">
                <Filter className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Filter By</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Recently Created</DropdownMenuItem>
              <DropdownMenuItem>Alphabetical (A-Z)</DropdownMenuItem>
              <DropdownMenuItem>Alphabetical (Z-A)</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuLabel>Category</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>API</DropdownMenuItem>
              <DropdownMenuItem>Data Processing</DropdownMenuItem>
              <DropdownMenuItem>Web</DropdownMenuItem>
              <DropdownMenuItem>File</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>
  )
}

================
File: components/tools/tools-list.tsx
================
"use client"

import { useState } from "react"
import { ToolCard } from "@/components/tools/tool-card"
import { Button } from "@/components/ui/button"
import { PlusCircle, RefreshCw } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { CreateToolDialog } from "@/components/tools/create-tool-dialog"
import type { Tool } from "@/types/tools"
import { Skeleton } from "@/components/ui/skeleton"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { AlertCircle } from "lucide-react"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"

export function ToolsList() {
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const { toast } = useToast()

  // Use the standardized hook for fetching tools
  const {
    data: tools,
    isLoading,
    error,
    refresh: fetchTools,
  } = useSupabaseFetch<Tool>({
    endpoint: "/api/tools",
    resourceName: "Tools",
    dataKey: "tools",
  })

  const handleRefresh = () => {
    setIsRefreshing(true)
    fetchTools().finally(() => setIsRefreshing(false))
  }

  const handleCreateTool = async (newTool: Omit<Tool, "id">) => {
    try {
      const response = await fetch("/api/tools", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newTool),
      })

      if (!response.ok) {
        throw new Error(`Error creating tool: ${response.statusText}`)
      }

      // Refresh the tools list after creating a new tool
      fetchTools()

      toast({
        title: "Success",
        description: "Tool created successfully!",
      })

      setIsDialogOpen(false)
    } catch (err) {
      console.error("Failed to create tool:", err)
      toast({
        title: "Error",
        description: "Failed to create tool. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleDeleteTool = async (id: string) => {
    try {
      const response = await fetch(`/api/tools/${id}`, {
        method: "DELETE",
      })

      if (!response.ok) {
        throw new Error(`Error deleting tool: ${response.statusText}`)
      }

      // Refresh the tools list after deleting a tool
      fetchTools()

      toast({
        title: "Success",
        description: "Tool deleted successfully!",
      })
    } catch (err) {
      console.error("Failed to delete tool:", err)
      toast({
        title: "Error",
        description: "Failed to delete tool. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleUpdateTool = async (updatedTool: Tool) => {
    try {
      const response = await fetch(`/api/tools/${updatedTool.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedTool),
      })

      if (!response.ok) {
        throw new Error(`Error updating tool: ${response.statusText}`)
      }

      // Refresh the tools list after updating a tool
      fetchTools()

      toast({
        title: "Success",
        description: "Tool updated successfully!",
      })
    } catch (err) {
      console.error("Failed to update tool:", err)
      toast({
        title: "Error",
        description: "Failed to update tool. Please try again.",
        variant: "destructive",
      })
    }
  }

  const handleExecuteTool = async (id: string, params: Record<string, any>) => {
    try {
      const response = await fetch(`/api/tools/execute`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ toolId: id, params }),
      })

      if (!response.ok) {
        throw new Error(`Error executing tool: ${response.statusText}`)
      }

      const result = await response.json()

      toast({
        title: "Success",
        description: "Tool executed successfully!",
      })

      return result
    } catch (err) {
      console.error("Failed to execute tool:", err)
      toast({
        title: "Error",
        description: "Failed to execute tool. Please try again.",
        variant: "destructive",
      })
      throw err
    }
  }

  if (error) {
    return (
      <Alert variant="destructive" className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>{error.message}</AlertDescription>
        <Button variant="outline" size="sm" className="mt-2" onClick={fetchTools}>
          Try Again
        </Button>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-white">Available Tools</h2>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" onClick={handleRefresh} disabled={isRefreshing}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? "animate-spin" : ""}`} />
            Refresh
          </Button>
          <Button variant="default" size="sm" onClick={() => setIsDialogOpen(true)}>
            <PlusCircle className="h-4 w-4 mr-2" />
            New Tool
          </Button>
        </div>
      </div>

      {isLoading ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, index) => (
            <div key={index} className="border rounded-lg p-4 bg-gray-900 border-gray-800">
              <Skeleton className="h-8 w-3/4 mb-4" />
              <Skeleton className="h-4 w-full mb-2" />
              <Skeleton className="h-4 w-2/3 mb-4" />
              <div className="flex justify-between mt-4">
                <Skeleton className="h-8 w-20" />
                <Skeleton className="h-8 w-20" />
              </div>
            </div>
          ))}
        </div>
      ) : tools.length === 0 ? (
        <div className="text-center py-12 bg-gray-900 rounded-lg border border-gray-800">
          <h3 className="text-xl font-medium text-gray-300 mb-2">No tools found</h3>
          <p className="text-gray-400 mb-6">Create your first tool to get started</p>
          <Button variant="default" onClick={() => setIsDialogOpen(true)}>
            <PlusCircle className="h-4 w-4 mr-2" />
            Create Tool
          </Button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {tools.map((tool) => (
            <ToolCard
              key={tool.id}
              tool={tool}
              onDelete={handleDeleteTool}
              onUpdate={handleUpdateTool}
              onExecute={handleExecuteTool}
            />
          ))}
        </div>
      )}

      <CreateToolDialog isOpen={isDialogOpen} onClose={() => setIsDialogOpen(false)} onCreateTool={handleCreateTool} />
    </div>
  )
}

================
File: components/tools/tools-loading.tsx
================
import { Skeleton } from "@/components/ui/skeleton"

export function ToolsLoading() {
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <Skeleton className="h-8 w-48" />
        <div className="flex space-x-2">
          <Skeleton className="h-9 w-24" />
          <Skeleton className="h-9 w-24" />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(6)].map((_, index) => (
          <div key={index} className="border rounded-lg p-4 bg-gray-900 border-gray-800">
            <Skeleton className="h-8 w-3/4 mb-4" />
            <Skeleton className="h-4 w-full mb-2" />
            <Skeleton className="h-4 w-2/3 mb-4" />
            <div className="flex justify-between mt-4">
              <Skeleton className="h-8 w-20" />
              <Skeleton className="h-8 w-20" />
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
        success: "border-transparent bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
        warning: "border-transparent bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
        info: "border-transparent bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/error-boundary.tsx
================
"use client"

import type React from "react"

import { useEffect, useState } from "react"
import { AlertTriangle } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface ErrorBoundaryProps {
  children: React.ReactNode
  fallback?: React.ReactNode
}

export function ErrorBoundary({ children, fallback }: ErrorBoundaryProps) {
  const [hasError, setHasError] = useState(false)
  const [error, setError] = useState<Error | null>(null)

  useEffect(() => {
    const errorHandler = (error: ErrorEvent) => {
      console.error("Error caught by error boundary:", error)
      setError(error.error)
      setHasError(true)
    }

    window.addEventListener("error", errorHandler)

    return () => {
      window.removeEventListener("error", errorHandler)
    }
  }, [])

  if (hasError) {
    if (fallback) {
      return <>{fallback}</>
    }

    return (
      <Alert variant="destructive" className="my-4">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>Something went wrong</AlertTitle>
        <AlertDescription>
          <div className="mt-2">
            <p className="text-sm">{error?.message || "An unexpected error occurred"}</p>
            {error?.stack && (
              <pre className="mt-2 max-h-40 overflow-auto rounded bg-secondary p-2 text-xs">{error.stack}</pre>
            )}
          </div>
          <Button
            variant="outline"
            className="mt-4"
            onClick={() => {
              setHasError(false)
              setError(null)
            }}
          >
            Try again
          </Button>
        </AlertDescription>
      </Alert>
    )
  }

  return <>{children}</>
}

================
File: components/ui/form-container.tsx
================
"use client"

import type React from "react"

import { type ReactNode, useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Loader2, Save } from "lucide-react"
import { cn } from "@/lib/utils"

interface FormContainerProps {
  title: string
  description?: string
  children: ReactNode
  onSubmit: () => Promise<void>
  onCancel?: () => void
  isSubmitting?: boolean
  className?: string
  submitLabel?: string
  cancelLabel?: string
  footerContent?: ReactNode
}

export function FormContainer({
  title,
  description,
  children,
  onSubmit,
  onCancel,
  isSubmitting = false,
  className,
  submitLabel = "Save",
  cancelLabel = "Cancel",
  footerContent,
}: FormContainerProps) {
  const [isSubmittingInternal, setIsSubmittingInternal] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmittingInternal(true)
    try {
      await onSubmit()
    } finally {
      setIsSubmittingInternal(false)
    }
  }

  const submitting = isSubmitting || isSubmittingInternal

  return (
    <Card className={cn("w-full", className)}>
      <form onSubmit={handleSubmit}>
        <CardHeader>
          <CardTitle>{title}</CardTitle>
          {description && <CardDescription>{description}</CardDescription>}
        </CardHeader>
        <CardContent>{children}</CardContent>
        <CardFooter className="flex justify-between">
          <div>{footerContent}</div>
          <div className="flex gap-2">
            {onCancel && (
              <Button type="button" variant="outline" onClick={onCancel} disabled={submitting}>
                {cancelLabel}
              </Button>
            )}
            <Button type="submit" disabled={submitting}>
              {submitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  {submitLabel}
                </>
              )}
            </Button>
          </div>
        </CardFooter>
      </form>
    </Card>
  )
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/gradient-avatar.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

interface GradientAvatarProps extends React.ComponentProps<typeof Avatar> {
  gradientFrom?: string
  gradientTo?: string
  borderWidth?: "thin" | "medium" | "thick"
  fallback: string
  src?: string
  alt?: string
}

export function GradientAvatar({
  className,
  gradientFrom = "from-blue-500",
  gradientTo = "to-violet-500",
  borderWidth = "medium",
  fallback,
  src,
  alt,
  ...props
}: GradientAvatarProps) {
  // Determine border width
  const borderWidthClass = {
    thin: "p-[1px]",
    medium: "p-[2px]",
    thick: "p-[3px]",
  }[borderWidth]

  return (
    <div
      className={cn(
        "rounded-full bg-gradient-to-br",
        gradientFrom,
        gradientTo,
        borderWidthClass,
        className
      )}
    >
      <Avatar className="h-full w-full" {...props}>
        {src && <AvatarImage src={src} alt={alt || fallback} />}
        <AvatarFallback className="bg-background text-foreground">
          {fallback}
        </AvatarFallback>
      </Avatar>
    </div>
  )
}

================
File: components/ui/gradient-card.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

interface GradientCardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "subtle" | "outline"
  gradientDirection?: "top" | "right" | "bottom" | "left" | "tr" | "br" | "bl" | "tl"
  gradientFrom?: string
  gradientTo?: string
  hoverEffect?: boolean
}

const GradientCard = React.forwardRef<HTMLDivElement, GradientCardProps>(
  ({ 
    className, 
    variant = "default", 
    gradientDirection = "br", 
    gradientFrom = "from-blue-500", 
    gradientTo = "to-violet-500",
    hoverEffect = true,
    ...props 
  }, ref) => {
    // Determine gradient direction class
    const directionClass = {
      top: "bg-gradient-to-t",
      right: "bg-gradient-to-r",
      bottom: "bg-gradient-to-b",
      left: "bg-gradient-to-l",
      tr: "bg-gradient-to-tr",
      br: "bg-gradient-to-br",
      bl: "bg-gradient-to-bl",
      tl: "bg-gradient-to-tl",
    }[gradientDirection]

    // Determine variant classes
    const variantClasses = {
      default: "relative p-[1px] bg-background overflow-hidden rounded-lg",
      subtle: "relative p-[1px] bg-background overflow-hidden rounded-lg",
      outline: "relative p-[1px] bg-transparent overflow-hidden rounded-lg",
    }[variant]

    // Determine hover effect classes
    const hoverClasses = hoverEffect 
      ? "transition-all duration-300 hover:shadow-md hover:shadow-accent/10" 
      : ""

    return (
      <div
        ref={ref}
        className={cn(variantClasses, hoverClasses, className)}
        {...props}
      >
        {/* Gradient border */}
        <div 
          className={cn(
            "absolute inset-0 -z-10",
            directionClass,
            gradientFrom,
            gradientTo,
            variant === "subtle" && "opacity-30 dark:opacity-20"
          )}
        />
        
        {/* Card content */}
        <div className="relative h-full w-full rounded-[7px] bg-background p-4">
          {props.children}
        </div>
      </div>
    )
  }
)
GradientCard.displayName = "GradientCard"

export { GradientCard }

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/resizable.tsx
================
"use client"

import type React from "react"

import { DragHandleDots2Icon } from "@radix-ui/react-icons"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: components/ui/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: components/agents/agent-card.tsx
================
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Badge } from "@/components/ui/badge"
import type { Agent } from "@/types/agents"
import { MoreHorizontal, MessageSquare, Edit, Trash2, Bot, Brain, Search, UserCircle } from "lucide-react"
import { EditAgentDialog } from "@/components/agents/edit-agent-dialog"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { useRouter } from "next/navigation"

interface AgentCardProps {
  agent: Agent
  onDelete: (id: string) => Promise<void>
  onUpdate: (agent: Agent) => Promise<void>
}

export function AgentCard({ agent, onDelete, onUpdate }: AgentCardProps) {
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const router = useRouter()

  const getAgentIcon = (type: string) => {
    switch (type) {
      case "assistant":
        return <Bot className="h-5 w-5 text-blue-400" />
      case "chatbot":
        return <MessageSquare className="h-5 w-5 text-green-400" />
      case "researcher":
        return <Search className="h-5 w-5 text-purple-400" />
      default:
        return <UserCircle className="h-5 w-5 text-gray-400" />
    }
  }

  const handleDelete = async () => {
    try {
      setIsDeleting(true)
      await onDelete(agent.id)
      setIsDeleteDialogOpen(false)
    } catch (error) {
      console.error("Error deleting agent:", error)
    } finally {
      setIsDeleting(false)
    }
  }

  const handleChat = () => {
    router.push(`/chat?agent=${agent.id}`)
  }

  return (
    <>
      <Card className="bg-gray-900 border-gray-800 hover:border-gray-700 transition-all duration-200">
        <CardHeader className="pb-2">
          <div className="flex justify-between items-start">
            <div className="flex items-center gap-2">
              {getAgentIcon(agent.type)}
              <Badge variant={agent.status === "active" ? "default" : "secondary"} className="text-xs">
                {agent.status === "active" ? "Active" : "Inactive"}
              </Badge>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="h-8 w-8">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="bg-gray-950 border-gray-800">
                <DropdownMenuLabel>Actions</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleChat}>
                  <MessageSquare className="h-4 w-4 mr-2" />
                  Chat
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setIsEditDialogOpen(true)}>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => setIsDeleteDialogOpen(true)}
                  className="text-red-500 focus:text-red-500"
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          <CardTitle className="text-lg font-bold text-white mt-2">{agent.name}</CardTitle>
          <CardDescription className="text-gray-400 line-clamp-2">{agent.description}</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-2 mb-2">
            <Brain className="h-4 w-4 text-gray-500" />
            <span className="text-sm text-gray-300">{agent.model}</span>
          </div>
          <div className="text-xs text-gray-500">Created: {new Date(agent.createdAt).toLocaleDateString()}</div>
        </CardContent>
        <CardFooter className="flex justify-between pt-2">
          <Button variant="outline" size="sm" onClick={() => setIsEditDialogOpen(true)}>
            <Edit className="h-3.5 w-3.5 mr-1.5" />
            Edit
          </Button>
          <Button variant="default" size="sm" onClick={handleChat}>
            <MessageSquare className="h-3.5 w-3.5 mr-1.5" />
            Chat
          </Button>
        </CardFooter>
      </Card>

      <EditAgentDialog
        isOpen={isEditDialogOpen}
        onClose={() => setIsEditDialogOpen(false)}
        agent={agent}
        onUpdateAgent={onUpdate}
      />

      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent className="bg-gray-950 border-gray-800">
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the agent "{agent.name}" and remove it from our
              servers.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={(e) => {
                e.preventDefault()
                handleDelete()
              }}
              disabled={isDeleting}
              className="bg-red-600 hover:bg-red-700 focus:ring-red-600"
            >
              {isDeleting ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}

================
File: components/auth/sign-in-dialog.tsx
================
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Loader2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { useToast } from "@/hooks/use-toast"

const formSchema = z.object({
  email: z.string().email({
    message: "Please enter a valid email address.",
  }),
  password: z.string().min(8, {
    message: "Password must be at least 8 characters.",
  }),
})

interface SignInDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function SignInDialog({ open, onOpenChange }: SignInDialogProps) {
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(false)

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true)

    try {
      const response = await fetch("/api/auth/signin", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || "Failed to sign in")
      }

      toast({
        title: "Sign in successful",
        description: "Welcome back!",
      })

      // Close the dialog
      onOpenChange(false)

      // In a real app, you would store the token and redirect
      console.log("User signed in:", data)
    } catch (error) {
      console.error("Sign in error:", error)
      toast({
        title: "Sign in failed",
        description: error instanceof Error ? error.message : "Please try again",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px] rounded-xl p-0 overflow-hidden">
        <div className="h-2 bg-gradient-to-r from-blue-500 to-violet-500" />
        <DialogHeader className="px-6 pt-6">
          <DialogTitle className="text-2xl font-bold text-center">Sign In</DialogTitle>
          <DialogDescription className="text-center">
            Enter your credentials to access your account
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 px-6 py-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="your.email@example.com"
                      className="rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center justify-between">
                    <FormLabel>Password</FormLabel>
                    <Button variant="link" size="sm" className="h-auto p-0 text-xs">
                      Forgot password?
                    </Button>
                  </div>
                  <FormControl>
                    <Input
                      type="password"
                      placeholder="••••••••"
                      className="rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button
              type="submit"
              variant="gradient"
              disabled={isLoading}
              className="w-full mt-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Signing in...
                </>
              ) : (
                "Sign In"
              )}
            </Button>

            <div className="relative my-4">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-border" />
              </div>
              <div className="relative flex justify-center text-xs">
                <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <Button variant="outline" type="button" className="gap-2">
                <svg className="h-4 w-4" viewBox="0 0 24 24">
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    fill="#4285F4"
                  />
                  <path
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    fill="#EA4335"
                  />
                </svg>
                Google
              </Button>
              <Button variant="outline" type="button" className="gap-2">
                <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                </svg>
                GitHub
              </Button>
            </div>
          </form>
        </Form>
        <div className="px-6 py-4 bg-muted/30 flex flex-row items-center justify-center">
          <p className="text-sm text-muted-foreground">
            Don&apos;t have an account?{" "}
            <Button
              variant="link"
              className="p-0 h-auto text-blue-500 dark:text-blue-400"
              onClick={() => {
                onOpenChange(false)
                // You would typically open the sign-up dialog here
              }}
            >
              Sign up
            </Button>
          </p>
        </div>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/auth/sign-up-dialog.tsx
================
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Loader2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { useToast } from "@/hooks/use-toast"

const formSchema = z
  .object({
    name: z.string().min(2, {
      message: "Name must be at least 2 characters.",
    }),
    email: z.string().email({
      message: "Please enter a valid email address.",
    }),
    password: z.string().min(8, {
      message: "Password must be at least 8 characters.",
    }),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords do not match",
    path: ["confirmPassword"],
  })

interface SignUpDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function SignUpDialog({ open, onOpenChange }: SignUpDialogProps) {
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(false)

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true)

    try {
      const response = await fetch("/api/auth/signup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: values.name,
          email: values.email,
          password: values.password,
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || "Failed to sign up")
      }

      toast({
        title: "Account created",
        description: "Your account has been created successfully.",
      })

      // Close the dialog
      onOpenChange(false)

      // In a real app, you would redirect or open the sign-in dialog
      console.log("User signed up:", data)
    } catch (error) {
      console.error("Sign up error:", error)
      toast({
        title: "Sign up failed",
        description: error instanceof Error ? error.message : "Please try again",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px] rounded-xl p-0 overflow-hidden">
        <div className="h-2 bg-gradient-to-r from-blue-500 to-violet-500" />
        <DialogHeader className="px-6 pt-6">
          <DialogTitle className="text-2xl font-bold text-center">Create Account</DialogTitle>
          <DialogDescription className="text-center">
            Enter your details to create a new account
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 px-6 py-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Full Name</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="John Doe"
                      className="rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="your.email@example.com"
                      className="rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Password</FormLabel>
                  <FormControl>
                    <Input
                      type="password"
                      placeholder="••••••••"
                      className="rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                  <p className="text-xs text-muted-foreground">
                    Password must be at least 8 characters long
                  </p>
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="confirmPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Confirm Password</FormLabel>
                  <FormControl>
                    <Input
                      type="password"
                      placeholder="••••••••"
                      className="rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Button
              type="submit"
              variant="gradient"
              disabled={isLoading}
              className="w-full mt-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating account...
                </>
              ) : (
                "Create Account"
              )}
            </Button>

            <div className="relative my-4">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-border" />
              </div>
              <div className="relative flex justify-center text-xs">
                <span className="bg-background px-2 text-muted-foreground">Or continue with</span>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <Button variant="outline" type="button" className="gap-2">
                <svg className="h-4 w-4" viewBox="0 0 24 24">
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    fill="#4285F4"
                  />
                  <path
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    fill="#EA4335"
                  />
                </svg>
                Google
              </Button>
              <Button variant="outline" type="button" className="gap-2">
                <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                </svg>
                GitHub
              </Button>
            </div>
          </form>
        </Form>
        <div className="px-6 py-4 bg-muted/30 flex flex-row items-center justify-center">
          <p className="text-sm text-muted-foreground">
            Already have an account?{" "}
            <Button
              variant="link"
              className="p-0 h-auto text-blue-500 dark:text-blue-400"
              onClick={() => {
                onOpenChange(false)
                // You would typically open the sign-in dialog here
              }}
            >
              Sign in
            </Button>
          </p>
        </div>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/chat/ai-image-generator.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Download, Copy, Check, Sparkles, RefreshCw, Image as ImageIcon, Wand2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { cn } from "@/lib/utils"

export interface AIImageGeneratorProps {
  title?: string
  initialPrompt?: string
  generatedImage?: string
  className?: string
  onGenerate?: (prompt: string, settings: ImageGenerationSettings) => Promise<string>
}

interface ImageGenerationSettings {
  model: string
  style: string
  size: string
  quality: number
  seed?: number
}

export function AIImageGenerator({
  title = "AI Image Generator",
  initialPrompt = "",
  generatedImage = "",
  className,
  onGenerate
}: AIImageGeneratorProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [copied, setCopied] = useState(false)
  const [prompt, setPrompt] = useState(initialPrompt)
  const [image, setImage] = useState(generatedImage)
  const [generating, setGenerating] = useState(false)
  const [settings, setSettings] = useState<ImageGenerationSettings>({
    model: "dall-e-3",
    style: "vivid",
    size: "1024x1024",
    quality: 75,
    seed: undefined
  })

  // Handle copy prompt
  const handleCopyPrompt = async () => {
    await navigator.clipboard.writeText(prompt)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  // Handle download image
  const handleDownload = () => {
    if (!image) return

    const link = document.createElement("a")
    link.href = image
    link.download = `ai-image-${Date.now()}.png`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  // Handle generate image
  const handleGenerate = async () => {
    if (!prompt.trim() || !onGenerate) return

    setGenerating(true)
    try {
      const newImage = await onGenerate(prompt, settings)
      setImage(newImage)
    } catch (error) {
      console.error("Failed to generate image:", error)
      // Show error message
    } finally {
      setGenerating(false)
    }
  }

  // Handle setting change
  const handleSettingChange = (key: keyof ImageGenerationSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }))
  }

  // Handle random seed
  const handleRandomSeed = () => {
    const randomSeed = Math.floor(Math.random() * 1000000)
    handleSettingChange('seed', randomSeed)
  }

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-fuchsia-700 to-pink-700 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <Sparkles className="h-4 w-4" />
          <span className="font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          {image && (
            <>
              <Button
                variant="ghost"
                size="icon-sm"
                className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
                onClick={handleCopyPrompt}
              >
                {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
                <span className="sr-only">Copy prompt</span>
              </Button>
              <Button
                variant="ghost"
                size="icon-sm"
                className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
                onClick={handleDownload}
              >
                <Download className="h-3.5 w-3.5" />
                <span className="sr-only">Download image</span>
              </Button>
            </>
          )}
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn(
        "flex flex-col",
        expanded ? "flex-1" : "max-h-[600px]"
      )}>
        <div className="p-4 border-b">
          <Textarea
            placeholder="Describe the image you want to generate..."
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="min-h-[80px] resize-none"
          />

          <div className="grid grid-cols-2 gap-4 mt-4">
            <div>
              <Label htmlFor="model">Model</Label>
              <Select
                value={settings.model}
                onValueChange={(value) => handleSettingChange('model', value)}
              >
                <SelectTrigger id="model">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="dall-e-3">DALL-E 3</SelectItem>
                  <SelectItem value="dall-e-2">DALL-E 2</SelectItem>
                  <SelectItem value="stable-diffusion">Stable Diffusion</SelectItem>
                  <SelectItem value="midjourney">Midjourney</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="style">Style</Label>
              <Select
                value={settings.style}
                onValueChange={(value) => handleSettingChange('style', value)}
              >
                <SelectTrigger id="style">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="vivid">Vivid</SelectItem>
                  <SelectItem value="natural">Natural</SelectItem>
                  <SelectItem value="cinematic">Cinematic</SelectItem>
                  <SelectItem value="anime">Anime</SelectItem>
                  <SelectItem value="digital-art">Digital Art</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="size">Size</Label>
              <Select
                value={settings.size}
                onValueChange={(value) => handleSettingChange('size', value)}
              >
                <SelectTrigger id="size">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1024x1024">1024x1024 (Square)</SelectItem>
                  <SelectItem value="1792x1024">1792x1024 (Landscape)</SelectItem>
                  <SelectItem value="1024x1792">1024x1792 (Portrait)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="seed" className="flex items-center justify-between">
                <span>Seed</span>
                <Button
                  variant="ghost"
                  size="icon-sm"
                  onClick={handleRandomSeed}
                  className="h-5 w-5"
                >
                  <RefreshCw className="h-3 w-3" />
                </Button>
              </Label>
              <div className="flex items-center gap-2">
                <Input
                  id="seed"
                  type="number"
                  value={settings.seed || ''}
                  onChange={(e) => handleSettingChange('seed', e.target.value ? Number(e.target.value) : undefined)}
                  placeholder="Random"
                  className="flex-1"
                />
              </div>
            </div>
          </div>

          <div className="mt-4">
            <Label htmlFor="quality" className="flex items-center justify-between">
              <span>Quality: {settings.quality}%</span>
            </Label>
            <Slider
              id="quality"
              min={25}
              max={100}
              step={25}
              value={[settings.quality]}
              onValueChange={(value) => handleSettingChange('quality', value[0])}
              className="mt-2"
            />
          </div>

          <Button
            variant="gradient"
            className="w-full mt-4"
            onClick={handleGenerate}
            disabled={!prompt.trim() || generating}
          >
            {generating ? (
              <>
                <div className="h-4 w-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2"></div>
                Generating...
              </>
            ) : (
              <>
                <Wand2 className="mr-2 h-4 w-4" />
                Generate Image
              </>
            )}
          </Button>
        </div>

        <div className={cn(
          "flex-1 overflow-auto p-4 flex items-center justify-center bg-muted/30",
          !image && "min-h-[300px]"
        )}>
          {image ? (
            <img
              src={image}
              alt={prompt}
              className="max-w-full max-h-full object-contain rounded-md shadow-md"
            />
          ) : (
            <div className="text-center text-muted-foreground">
              <ImageIcon className="h-12 w-12 mx-auto mb-2 opacity-20" />
              <p>Generated image will appear here</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

// Input component for seed
function Input({ className, ...props }: React.InputHTMLAttributes<HTMLInputElement>) {
  return (
    <input
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

================
File: components/chat/browser-display.tsx
================
"use client"

import { useState, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, RefreshCw, ExternalLink, Copy, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface BrowserDisplayProps {
  url: string
  title?: string
  className?: string
}

export function BrowserDisplay({ url, title, className }: BrowserDisplayProps) {
  const [expanded, setExpanded] = useState(false)
  const [loading, setLoading] = useState(true)
  const [hovered, setHovered] = useState(false)
  const [copied, setCopied] = useState(false)
  const iframeRef = useRef<HTMLIFrameElement>(null)

  const handleRefresh = () => {
    if (iframeRef.current) {
      iframeRef.current.src = iframeRef.current.src
      setLoading(true)
    }
  }

  const handleCopyUrl = async () => {
    await navigator.clipboard.writeText(url)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const handleOpenExternal = () => {
    window.open(url, "_blank")
  }

  return (
    <div 
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      {/* Browser chrome */}
      <div className="flex items-center bg-gradient-to-r from-gray-100 to-gray-50 dark:from-gray-900 dark:to-gray-800 px-3 py-2 border-b border-border/50">
        {/* URL bar */}
        <div className="flex-1 flex items-center bg-background/80 backdrop-blur-sm rounded-md px-3 py-1.5 text-sm border border-border/30 mr-2">
          <div className="w-full truncate text-muted-foreground">{url}</div>
        </div>
        
        {/* Controls */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full hover:bg-accent/50"
            onClick={handleRefresh}
          >
            <RefreshCw className="h-3.5 w-3.5" />
            <span className="sr-only">Refresh</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full hover:bg-accent/50"
            onClick={handleCopyUrl}
          >
            {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
            <span className="sr-only">Copy URL</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full hover:bg-accent/50"
            onClick={handleOpenExternal}
          >
            <ExternalLink className="h-3.5 w-3.5" />
            <span className="sr-only">Open in new tab</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full hover:bg-accent/50"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>
      
      {/* Browser content */}
      <div className={cn(
        "relative bg-white",
        expanded ? "flex-1" : "h-[400px]"
      )}>
        {loading && (
          <div className="absolute inset-0 flex items-center justify-center bg-background/50 backdrop-blur-sm z-10">
            <div className="flex flex-col items-center">
              <div className="h-5 w-5 border-2 border-primary border-t-transparent rounded-full animate-spin mb-2"></div>
              <span className="text-sm text-muted-foreground">Loading...</span>
            </div>
          </div>
        )}
        <iframe 
          ref={iframeRef}
          src={url} 
          title={title || "Browser content"} 
          className="w-full h-full border-0"
          onLoad={() => setLoading(false)}
          sandbox="allow-scripts allow-same-origin allow-forms"
        />
      </div>
    </div>
  )
}

================
File: components/chat/canvasDisplay.tsx
================
"use client";

import React, { useRef, useEffect, useState } from "react";
import { cn } from "@/lib/utils";
import styles from './canvasDisplay.module.css';
// Import xterm.js and the canvas addon
import { Terminal } from "@xterm/xterm";
import { CanvasAddon } from "@xterm/addon-canvas";
import "xterm/css/xterm.css";

export interface CanvasDisplayProps {
  width?: number;
  height?: number;
  className?: string;
  draw?: (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => void;
  children?: React.ReactNode;
  terminal?: boolean; // If true, show a terminal in the canvas
  terminalOptions?: ConstructorParameters<typeof Terminal>[0];
  terminalWelcomeMessage?: string;
}

/**
 * CanvasDisplay: Renders a live HTML5 canvas and allows custom drawing via a draw callback.
 * You can use this to render code, terminal, or even a VSCode-like UI in the canvas.
 *
 * Example usage:
 * <CanvasDisplay width={600} height={400} draw={(ctx, canvas) => { ctx.fillStyle = '#222'; ctx.fillRect(0,0,canvas.width,canvas.height); }} />
 */
export function CanvasDisplay({
  width = 600,
  height = 400,
  className,
  draw,
  children,
  terminal = false,
  terminalOptions,
  terminalWelcomeMessage = 'Welcome to the AI SDK Canvas Terminal!',
}: CanvasDisplayProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const terminalRef = useRef<HTMLDivElement>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [term, setTerm] = useState<Terminal | null>(null);

  // Canvas drawing effect
  useEffect(() => {
    if (!canvasRef.current) return;
    const ctx = canvasRef.current.getContext("2d");
    if (!ctx) return;
    ctx.clearRect(0, 0, width, height);
    if (draw) {
      setIsDrawing(true);
      draw(ctx, canvasRef.current);
      setIsDrawing(false);
    }
  }, [draw, width, height, children]);

  // Terminal effect
  useEffect(() => {
    if (!terminal || !terminalRef.current) return;
    if (term) return;
    const xterm = new Terminal({
      fontSize: 16,
      theme: {
        background: '#18181b',
        foreground: '#e5e5e5',
        cursor: '#00ff00',
      },
      ...terminalOptions,
    });
    const canvasAddon = new CanvasAddon();
    xterm.loadAddon(canvasAddon);
    xterm.open(terminalRef.current);
    xterm.writeln(terminalWelcomeMessage);
    const prompt = () => {
      xterm.write('\r\n$ ');
    };
    prompt();
    xterm.onKey(({ key, domEvent }: { key: string; domEvent: KeyboardEvent }) => {
      if (domEvent.key === 'Enter') {
        prompt();
      } else if (domEvent.key === 'Backspace') {
        if (xterm.buffer.active.cursorX > 2) {
          xterm.write('\b \b');
        }
      } else if (domEvent.key.length === 1) {
        xterm.write(key);
      }
    });
    setTerm(xterm);
    return () => {
      xterm.dispose();
      setTerm(null);
    };
  }, [terminal, terminalOptions, terminalWelcomeMessage, term]);

  return (
    <div className={cn(styles.canvasDisplayRoot, className)}>
      <canvas
        ref={canvasRef}
        width={width}
        height={height}
        className={styles.canvas}
      />
      {terminal && (
        <div
          ref={terminalRef}
          className={styles.terminal}
        />
      )}
      {children && <div className="hidden">{children}</div>}
      {isDrawing && <div className={styles.drawingStatus}>Drawing...</div>}
    </div>
  );
}

================
File: components/chat/chat-sidebar.tsx
================
"use client"

import { useState } from "react"
import {
  Bot,
  ChevronLeft,
  ChevronRight,
  History,
  LineChart,
  PenToolIcon as Tool,
  Settings,
  Sparkles,
  Plus,
  MessageSquare,
} from "lucide-react"
import { motion } from "framer-motion"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { GradientCard } from "@/components/ui/gradient-card"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Badge } from "@/components/ui/badge"
import { Slider } from "@/components/ui/slider"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface ChatSidebarProps {
  className?: string
  models: Array<{ id: string; name: string }>
  tools: Array<{ id: string; name: string; description: string }>
  threads: Array<{ id: string; name: string; updated_at: string }>
  selectedModelId: string
  selectedThreadId: string
  selectedTools: string[]
  temperature: number
  maxTokens: number
  onModelChange: (modelId: string) => void
  onThreadChange: (threadId: string) => void
  onToolToggle: (toolId: string) => void
  onTemperatureChange: (value: number) => void
  onMaxTokensChange: (value: number) => void
  onCreateThread: () => void
}

export function ChatSidebar({
  className,
  models = [],
  tools = [],
  threads = [],
  selectedModelId,
  selectedThreadId,
  selectedTools,
  temperature,
  maxTokens,
  onModelChange,
  onThreadChange,
  onToolToggle,
  onTemperatureChange,
  onMaxTokensChange,
  onCreateThread,
}: ChatSidebarProps) {
  const [collapsed, setCollapsed] = useState(false)
  const [activeTab, setActiveTab] = useState("history")
  const [messages, setMessages] = useState<any[]>([]) // Initialize messages state

  // Animation variants
  const sidebarVariants = {
    expanded: { width: 280, transition: { duration: 0.2, ease: "easeInOut" } },
    collapsed: { width: 64, transition: { duration: 0.2, ease: "easeInOut" } },
  }

  const textVariants = {
    expanded: { opacity: 1, x: 0, display: "block" },
    collapsed: { opacity: 0, x: -10, display: "none", transition: { duration: 0.1 } },
  }

  return (
    <motion.div
      initial={false}
      animate={collapsed ? "collapsed" : "expanded"}
      variants={sidebarVariants}
      className={cn(
        "border-l border-border/40 bg-background/80 backdrop-blur-sm z-10 shadow-sm",
        collapsed ? "w-[64px]" : "w-[280px]",
        className,
      )}
    >
      {/* Collapse toggle */}
      <div className="flex h-12 items-center justify-between border-b px-3">
        <motion.h3
          variants={textVariants}
          className="text-sm font-medium"
        >
          Chat Settings
        </motion.h3>
        <Button
          variant="ghost"
          size="icon-sm"
          className={cn("h-7 w-7 rounded-full hover:bg-accent/50", collapsed && "ml-auto")}
          onClick={() => setCollapsed(!collapsed)}
        >
          {collapsed ? <ChevronRight className="h-3.5 w-3.5" /> : <ChevronLeft className="h-3.5 w-3.5" />}
          <span className="sr-only">{collapsed ? "Expand" : "Collapse"}</span>
        </Button>
      </div>

        {collapsed ? (
          <TooltipProvider delayDuration={0}>
            <div className="flex flex-col items-center gap-4 py-4">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={activeTab === "history" ? "secondary" : "ghost"}
                    size="icon-sm"
                    className="h-8 w-8 rounded-full"
                    onClick={() => setActiveTab("history")}
                  >
                    <History className="h-4 w-4" />
                    <span className="sr-only">History</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="right">History</TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={activeTab === "tools" ? "secondary" : "ghost"}
                    size="icon-sm"
                    className="h-8 w-8 rounded-full"
                    onClick={() => setActiveTab("tools")}
                  >
                    <Tool className="h-4 w-4" />
                    <span className="sr-only">Tools</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="right">Tools</TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={activeTab === "settings" ? "secondary" : "ghost"}
                    size="icon-sm"
                    className="h-8 w-8 rounded-full"
                    onClick={() => setActiveTab("settings")}
                  >
                    <Settings className="h-4 w-4" />
                    <span className="sr-only">Settings</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="right">Settings</TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={activeTab === "trace" ? "secondary" : "ghost"}
                    size="icon-sm"
                    className="h-8 w-8 rounded-full"
                    onClick={() => setActiveTab("trace")}
                  >
                    <LineChart className="h-4 w-4" />
                    <span className="sr-only">Trace</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="right">Trace</TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant={activeTab === "context" ? "secondary" : "ghost"}
                    size="icon-sm"
                    className="h-8 w-8 rounded-full"
                    onClick={() => setActiveTab("context")}
                  >
                    <Sparkles className="h-4 w-4" />
                    <span className="sr-only">Context</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="right">Context</TooltipContent>
              </Tooltip>
            </div>
          </TooltipProvider>
        ) : (
          <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 overflow-hidden">
            <TabsList className="w-full grid grid-cols-5 p-1">
              <TabsTrigger value="history" className="rounded-md">
                <History className="h-3.5 w-3.5 mr-2" />
                <span className="text-xs">History</span>
              </TabsTrigger>
              <TabsTrigger value="tools" className="rounded-md">
                <Tool className="h-3.5 w-3.5 mr-2" />
                <span className="text-xs">Tools</span>
              </TabsTrigger>
              <TabsTrigger value="settings" className="rounded-md">
                <Settings className="h-3.5 w-3.5 mr-2" />
                <span className="text-xs">Settings</span>
              </TabsTrigger>
              <TabsTrigger value="trace" className="rounded-md">
                <LineChart className="h-3.5 w-3.5 mr-2" />
                <span className="text-xs">Trace</span>
              </TabsTrigger>
              <TabsTrigger value="context" className="rounded-md">
                <Sparkles className="h-3.5 w-3.5 mr-2" />
                <span className="text-xs">Context</span>
              </TabsTrigger>
            </TabsList>
            <TabsContent value="history" className="p-4 h-[calc(100vh-8.5rem)] overflow-auto">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-base font-medium">Chat History</h3>
                <Button
                  variant="gradient"
                  size="sm"
                  onClick={onCreateThread}
                  className="gap-1"
                >
                  <Plus className="h-3.5 w-3.5" />
                  New Chat
                </Button>
              </div>
              {threads.length > 0 ? (
                <div className="space-y-3">
                  {threads.map((thread) => (
                    <GradientCard
                      key={thread.id}
                      variant={selectedThreadId === thread.id ? "default" : "subtle"}
                      gradientFrom={selectedThreadId === thread.id ? "from-blue-500" : "from-gray-500"}
                      gradientTo={selectedThreadId === thread.id ? "to-violet-500" : "to-gray-600"}
                      className="cursor-pointer hover:shadow-md transition-all"
                      onClick={() => onThreadChange(thread.id)}
                    >
                      <div className="p-3">
                        <div className="flex items-center gap-3">
                          <div className="rounded-full bg-background/80 p-1.5 flex-shrink-0">
                            <MessageSquare className="h-3.5 w-3.5 text-foreground/70" />
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="font-medium text-sm truncate">{thread.name}</div>
                            <div className="text-xs text-muted-foreground mt-0.5">
                              {new Date(thread.updated_at).toLocaleString(undefined, {
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                              })}
                            </div>
                          </div>
                        </div>
                      </div>
                    </GradientCard>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-40 text-center">
                  <div className="rounded-full bg-blue-100 dark:bg-blue-900/30 p-3 mb-4">
                    <MessageSquare className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                  </div>
                  <p className="text-muted-foreground mb-4">No chat history yet</p>
                  <Button
                    variant="gradient"
                    onClick={onCreateThread}
                    className="gap-1"
                  >
                    <Plus className="h-3.5 w-3.5" />
                    Start a new chat
                  </Button>
                </div>
              )}
            </TabsContent>
            <TabsContent value="tools" className="p-4 h-[calc(100vh-8.5rem)] overflow-auto">
              <h3 className="text-lg font-medium mb-4">Available Tools</h3>
              {tools.length > 0 ? (
                <div className="space-y-2">
                  {tools.map((tool) => (
                    <Card key={tool.id} className="overflow-hidden">
                      <CardContent className="p-3">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="font-medium">{tool.name}</div>
                            <div className="text-xs text-muted-foreground">{tool.description}</div>
                          </div>
                          <Switch
                            checked={selectedTools.includes(tool.id)}
                            onCheckedChange={() => onToolToggle(tool.id)}
                          />
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center text-muted-foreground py-8">
                  <p>No tools available</p>
                </div>
              )}
              {selectedTools.length > 0 && (
                <div className="mt-4">
                  <h4 className="text-sm font-medium mb-2">Selected Tools</h4>
                  <div className="flex flex-wrap gap-2">
                    {selectedTools.map((toolId) => {
                      const tool = tools.find((t) => t.id === toolId)
                      return (
                        <Badge
                          key={toolId}
                          variant="outline"
                          className="bg-blue-500/10 text-blue-500 border-blue-500/20"
                        >
                          {tool?.name || toolId}
                        </Badge>
                      )
                    })}
                  </div>
                </div>
              )}
            </TabsContent>
            <TabsContent value="settings" className="p-4 h-[calc(100vh-8.5rem)] overflow-auto">
              <h3 className="text-lg font-medium mb-4">Model Settings</h3>
              <div className="space-y-6">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Model</label>
                  <Select value={selectedModelId} onValueChange={onModelChange} disabled={models.length === 0}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a model" />
                    </SelectTrigger>
                    <SelectContent>
                      {models.map((model) => (
                        <SelectItem key={model.id} value={model.id}>
                          {model.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {models.length === 0 && (
                    <p className="text-xs text-muted-foreground mt-1">
                      No models available. Please add models in the settings.
                    </p>
                  )}
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium">Temperature: {temperature}</label>
                    <span className="text-xs text-muted-foreground">
                      {temperature < 0.3 ? "More deterministic" : temperature > 0.7 ? "More creative" : "Balanced"}
                    </span>
                  </div>
                  <Slider
                    value={[temperature]}
                    min={0}
                    max={1}
                    step={0.1}
                    onValueChange={(value) => onTemperatureChange(value[0])}
                  />
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium">Max Tokens: {maxTokens}</label>
                    <span className="text-xs text-muted-foreground">
                      {maxTokens < 500 ? "Short responses" : maxTokens > 1500 ? "Long responses" : "Medium responses"}
                    </span>
                  </div>
                  <Slider
                    value={[maxTokens]}
                    min={100}
                    max={2000}
                    step={100}
                    onValueChange={(value) => onMaxTokensChange(value[0])}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="trace" className="p-4 h-[calc(100vh-8.5rem)] overflow-auto">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium">Agent Tracing</h3>
                <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
                  Langfuse Enabled
                </Badge>
              </div>
              <div className="space-y-4">
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <Bot className="h-4 w-4 text-blue-500" />
                        <span className="font-medium">Agent Execution</span>
                      </div>
                      <Badge variant="outline">Active</Badge>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      Trace ID: <span className="font-mono">trace_abc123def456</span>
                    </div>
                  </CardContent>
                </Card>
                <div className="text-center text-muted-foreground py-4">
                  <p>Tracing data will appear here during agent execution</p>
                </div>
              </div>
            </TabsContent>
            <TabsContent value="context" className="p-4 h-[calc(100vh-8.5rem)] overflow-auto">
              <h3 className="text-lg font-medium mb-4">Context & Memory</h3>
              <div className="space-y-4">
                <Card>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">Memory Usage</span>
                      <Badge variant="outline">2 KB / 16 KB</Badge>
                    </div>
                    <div className="w-full h-2 bg-muted rounded-full overflow-hidden">
                      <div className="h-full bg-blue-500 rounded-full" style={{ width: "12.5%" }} />
                    </div>
                  </CardContent>
                </Card>
                <div className="space-y-2">
                  <h4 className="text-sm font-medium">Active Context</h4>
                  <Card>
                    <CardContent className="p-3 text-sm text-muted-foreground">
                      <p>Current conversation ({messages?.length || 0} messages)</p>
                    </CardContent>
                  </Card>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium">Upload Context</h4>
                    <Button variant="outline" size="sm">
                      Upload File
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Upload documents to provide additional context to the AI.
                  </p>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        )}
      </motion.div>
  )
}

================
File: components/chat/computer-use.tsx
================
"use client"

import { useState, useRef } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Terminal, Copy, Check, Play, Pause, RefreshCw } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface ComputerUseProps {
  title: string
  content: string
  isTerminal?: boolean
  isRunnable?: boolean
  className?: string
  onRun?: () => void
}

export function ComputerUse({ 
  title, 
  content, 
  isTerminal = false, 
  isRunnable = false,
  className,
  onRun
}: ComputerUseProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [copied, setCopied] = useState(false)
  const [running, setRunning] = useState(false)
  const contentRef = useRef<HTMLDivElement>(null)

  const handleCopy = async () => {
    await navigator.clipboard.writeText(content)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const handleRunToggle = () => {
    if (onRun) {
      onRun()
    }
    setRunning(!running)
  }

  return (
    <div 
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      {/* Header */}
      <div className="flex items-center justify-between bg-gradient-to-r from-zinc-900 to-zinc-800 px-3 py-2 text-white">
        <div className="flex items-center gap-2">
          <Terminal className="h-4 w-4 text-green-400" />
          <span className="text-sm font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleCopy}
          >
            {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
            <span className="sr-only">Copy content</span>
          </Button>
          {isRunnable && (
            <Button
              variant="ghost"
              size="icon-sm"
              className={cn(
                "h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20",
                running && "bg-green-500/20 text-green-400 hover:bg-green-500/30"
              )}
              onClick={handleRunToggle}
            >
              {running ? <Pause className="h-3.5 w-3.5" /> : <Play className="h-3.5 w-3.5" />}
              <span className="sr-only">{running ? "Stop" : "Run"}</span>
            </Button>
          )}
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>
      
      {/* Content */}
      <div 
        ref={contentRef}
        className={cn(
          "p-4 overflow-auto font-mono text-sm",
          isTerminal ? "bg-black text-green-400" : "bg-zinc-950 text-zinc-200",
          expanded ? "flex-1" : "max-h-[400px]"
        )}
      >
        {isTerminal ? (
          <pre className="whitespace-pre-wrap">{content}</pre>
        ) : (
          <pre className="whitespace-pre">{content}</pre>
        )}
        
        {running && isRunnable && (
          <div className="mt-4 border-t border-zinc-800 pt-4">
            <div className="flex items-center gap-2 text-yellow-400 animate-pulse">
              <RefreshCw className="h-4 w-4 animate-spin" />
              <span>Running...</span>
            </div>
            <div className="mt-2 text-zinc-400">
              {/* Simulated output could go here */}
              <p>$ executing command...</p>
              <p>$ process started with PID 1234</p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

================
File: components/chat/data-table.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Download, Copy, Check, Table, Search, ArrowUpDown, ChevronDown, ChevronUp } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"

export interface Column {
  key: string
  title: string
  sortable?: boolean
  filterable?: boolean
  render?: (value: any, row: any) => React.ReactNode
}

export interface DataTableProps {
  title?: string
  data: any[]
  columns: Column[]
  className?: string
  pagination?: boolean
  pageSize?: number
}

export function DataTable({
  title = "Data Table",
  data = [],
  columns = [],
  className,
  pagination = true,
  pageSize = 10
}: DataTableProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [copied, setCopied] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [currentPage, setCurrentPage] = useState(1)
  const [sortConfig, setSortConfig] = useState<{key: string, direction: 'asc' | 'desc'} | null>(null)
  const [filters, setFilters] = useState<Record<string, string>>({})

  // Handle copy data
  const handleCopyData = async () => {
    const dataString = JSON.stringify(data, null, 2)
    await navigator.clipboard.writeText(dataString)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  // Handle download CSV
  const handleDownloadCSV = () => {
    // Create CSV content
    const headers = columns.map(col => col.title).join(',')
    const rows = data.map(row =>
      columns.map(col => {
        const value = row[col.key]
        // Handle values with commas by wrapping in quotes
        return typeof value === 'string' && value.includes(',')
          ? `"${value}"`
          : value
      }).join(',')
    ).join('\n')

    const csvContent = `${headers}\n${rows}`

    // Create and trigger download
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.setAttribute('download', `${title.replace(/\s+/g, '-').toLowerCase()}.csv`)
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  // Handle sort
  const handleSort = (key: string) => {
    let direction: 'asc' | 'desc' = 'asc'

    if (sortConfig && sortConfig.key === key) {
      direction = sortConfig.direction === 'asc' ? 'desc' : 'asc'
    }

    setSortConfig({ key, direction })
  }

  // Handle filter change
  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }))
    setCurrentPage(1) // Reset to first page when filtering
  }

  // Handle search
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value)
    setCurrentPage(1) // Reset to first page when searching
  }

  // Apply sorting, filtering and pagination
  const processedData = (() => {
    // First apply search across all columns
    let result = searchQuery
      ? data.filter(row =>
          columns.some(col =>
            String(row[col.key]).toLowerCase().includes(searchQuery.toLowerCase())
          )
        )
      : [...data]

    // Then apply column-specific filters
    Object.entries(filters).forEach(([key, value]) => {
      if (value) {
        result = result.filter(row =>
          String(row[key]).toLowerCase().includes(value.toLowerCase())
        )
      }
    })

    // Then apply sorting
    if (sortConfig) {
      result.sort((a, b) => {
        const aValue = a[sortConfig.key]
        const bValue = b[sortConfig.key]

        if (aValue < bValue) {
          return sortConfig.direction === 'asc' ? -1 : 1
        }
        if (aValue > bValue) {
          return sortConfig.direction === 'asc' ? 1 : -1
        }
        return 0
      })
    }

    return result
  })()

  // Calculate pagination
  const totalPages = Math.ceil(processedData.length / pageSize)
  const paginatedData = pagination
    ? processedData.slice((currentPage - 1) * pageSize, currentPage * pageSize)
    : processedData

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-blue-800 to-blue-700 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <Table className="h-4 w-4" />
          <span className="font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleCopyData}
          >
            {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
            <span className="sr-only">Copy data</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownloadCSV}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download CSV</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn(
        "flex flex-col",
        expanded ? "flex-1" : "max-h-[400px]"
      )}>
        {/* Search bar */}
        <div className="p-2 border-b">
          <div className="relative">
            <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              type="text"
              placeholder="Search all columns..."
              className="pl-8"
              value={searchQuery}
              onChange={handleSearch}
            />
          </div>
        </div>

        {/* Table */}
        <div className="overflow-auto flex-1">
          <table className="w-full">
            <thead className="bg-muted/50 sticky top-0">
              <tr>
                {columns.map((column, i) => (
                  <th key={i} className="px-4 py-2 text-left font-medium text-sm">
                    <div className="flex items-center gap-2">
                      <span>{column.title}</span>
                      {column.sortable && (
                        <Button
                          variant="ghost"
                          size="icon-sm"
                          onClick={() => handleSort(column.key)}
                          className="h-5 w-5 rounded-full hover:bg-muted"
                        >
                          {sortConfig?.key === column.key ? (
                            sortConfig.direction === 'asc' ? (
                              <ChevronUp className="h-3 w-3" />
                            ) : (
                              <ChevronDown className="h-3 w-3" />
                            )
                          ) : (
                            <ArrowUpDown className="h-3 w-3" />
                          )}
                        </Button>
                      )}
                    </div>
                    {column.filterable && (
                      <div className="mt-1">
                        <Input
                          type="text"
                          placeholder={`Filter ${column.title}...`}
                          className="h-6 text-xs"
                          value={filters[column.key] || ''}
                          onChange={(e) => handleFilterChange(column.key, e.target.value)}
                        />
                      </div>
                    )}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {paginatedData.length > 0 ? (
                paginatedData.map((row, rowIndex) => (
                  <tr
                    key={rowIndex}
                    className="border-b hover:bg-muted/50 transition-colors"
                  >
                    {columns.map((column, colIndex) => (
                      <td key={colIndex} className="px-4 py-2 text-sm">
                        {column.render
                          ? column.render(row[column.key], row)
                          : row[column.key]}
                      </td>
                    ))}
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan={columns.length}
                    className="px-4 py-8 text-center text-muted-foreground"
                  >
                    No data found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        {pagination && totalPages > 1 && (
          <div className="p-2 border-t flex items-center justify-between bg-muted/20">
            <div className="text-sm text-muted-foreground">
              Showing {(currentPage - 1) * pageSize + 1} to {Math.min(currentPage * pageSize, processedData.length)} of {processedData.length} entries
            </div>
            <div className="flex items-center gap-1">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
              >
                Previous
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
              >
                Next
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

================
File: components/chat/data-visualization.tsx
================
"use client"

import { useState, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import {
  Maximize, Minimize, Download, RefreshCw, Copy, Check, BarChart,
  PieChart, LineChart, AreaChart, ScatterPlot, Activity, Grid3X3
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"
import { createTrace, createSpan, logEvent } from "@/lib/langfuse-integration"

// Import libraries dynamically to avoid SSR issues
let Chart: any = null
let Plotly: any = null

// Import Recharts components dynamically - we'll use these in a future implementation
import dynamic from "next/dynamic"
const RechartsResponsiveContainer = dynamic(() => import('recharts').then(mod => mod.ResponsiveContainer), { ssr: false })

export interface DataPoint {
  label: string
  value: number
  color?: string
  x?: number | string
  y?: number
  z?: number
  size?: number
  [key: string]: any
}

export interface DataSeries {
  name: string
  data: DataPoint[] | number[]
  color?: string
  type?: string
}

export interface DataVisualizationProps {
  title?: string
  data: DataPoint[] | DataSeries[]
  type?: "bar" | "line" | "pie" | "doughnut" | "radar" | "polarArea" | "scatter" | "area" | "heatmap" | "bubble" | "radialBar" | "treemap"
  labels?: string[]
  className?: string
  xAxisLabel?: string
  yAxisLabel?: string
  stacked?: boolean
  is3D?: boolean
  isMultiSeries?: boolean
  theme?: "light" | "dark" | "colorful" | "monochrome"
  showLegend?: boolean
  showGrid?: boolean
  showTooltip?: boolean
  showAnimation?: boolean
  library?: "chartjs" | "plotly" | "recharts"
}

export function DataVisualization({
  title = "Data Visualization",
  data,
  type = "bar",
  labels,
  className,
  xAxisLabel,
  yAxisLabel,
  stacked = false,
  is3D = false,
  isMultiSeries = false,
  theme = "light",
  showLegend = true,
  showGrid = true,
  showTooltip = true,
  showAnimation = true,
  library = "chartjs"
}: DataVisualizationProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [copied, setCopied] = useState(false)
  const [activeChart, setActiveChart] = useState<string>(type)
  const [activeLibrary, setActiveLibrary] = useState<string>(library)
  const [chartInstance, setChartInstance] = useState<any>(null)
  const [plotlyInstance, setPlotlyInstance] = useState<any>(null)
  const [showSettings, setShowSettings] = useState(false)
  const [chartSettings, setChartSettings] = useState({
    stacked,
    is3D,
    showLegend,
    showGrid,
    showTooltip,
    showAnimation,
    theme
  })
  const [traceId, setTraceId] = useState<string | null>(null)

  const chartRef = useRef<HTMLCanvasElement>(null)
  const plotlyRef = useRef<HTMLDivElement>(null)

  // Create a trace when the component mounts
  useEffect(() => {
    async function initTrace() {
      try {
        const trace = await createTrace({
          name: "data_visualization",
          metadata: {
            title,
            type,
            dataPoints: Array.isArray(data) ? data.length : 0,
            chartLibrary: library
          }
        })

        if (trace?.id) {
          setTraceId(trace.id)

          // Log visualization initialization event
          await logEvent({
            traceId: trace.id,
            name: "visualization_initialized",
            metadata: {
              chartType: type,
              dataSize: JSON.stringify(data).length,
              settings: chartSettings
            }
          })
        }
      } catch (error) {
        console.error("Error creating trace:", error)
      }
    }

    initTrace()

    // Cleanup function
    return () => {
      // Log component unmount if we have a trace
      if (traceId) {
        logEvent({
          traceId,
          name: "visualization_unmounted",
          metadata: {
            duration: "component_lifetime"
          }
        }).catch(console.error)
      }
    }
  }, []) // Empty dependency array means this runs once on mount

  // Default colors if not provided
  const defaultColors = [
    'rgba(54, 162, 235, 0.8)',
    'rgba(255, 99, 132, 0.8)',
    'rgba(255, 206, 86, 0.8)',
    'rgba(75, 192, 192, 0.8)',
    'rgba(153, 102, 255, 0.8)',
    'rgba(255, 159, 64, 0.8)',
    'rgba(199, 199, 199, 0.8)',
    'rgba(83, 102, 255, 0.8)',
    'rgba(40, 159, 64, 0.8)',
    'rgba(210, 199, 199, 0.8)',
  ]

  // Theme colors
  const themeColors = {
    light: defaultColors,
    dark: [
      'rgba(32, 156, 238, 0.8)',
      'rgba(235, 77, 112, 0.8)',
      'rgba(255, 193, 7, 0.8)',
      'rgba(0, 230, 118, 0.8)',
      'rgba(156, 39, 176, 0.8)',
      'rgba(255, 87, 34, 0.8)',
      'rgba(84, 110, 122, 0.8)',
      'rgba(63, 81, 181, 0.8)',
      'rgba(0, 188, 212, 0.8)',
      'rgba(205, 220, 57, 0.8)',
    ],
    colorful: [
      'rgba(255, 99, 132, 0.8)',
      'rgba(54, 162, 235, 0.8)',
      'rgba(255, 206, 86, 0.8)',
      'rgba(75, 192, 192, 0.8)',
      'rgba(153, 102, 255, 0.8)',
      'rgba(255, 159, 64, 0.8)',
      'rgba(255, 0, 255, 0.8)',
      'rgba(0, 255, 255, 0.8)',
      'rgba(128, 0, 128, 0.8)',
      'rgba(0, 128, 128, 0.8)',
    ],
    monochrome: [
      'rgba(44, 62, 80, 0.9)',
      'rgba(44, 62, 80, 0.8)',
      'rgba(44, 62, 80, 0.7)',
      'rgba(44, 62, 80, 0.6)',
      'rgba(44, 62, 80, 0.5)',
      'rgba(44, 62, 80, 0.4)',
      'rgba(44, 62, 80, 0.3)',
      'rgba(44, 62, 80, 0.2)',
      'rgba(44, 62, 80, 0.15)',
      'rgba(44, 62, 80, 0.1)',
    ]
  }

  // Determine if data is multi-series
  const isDataMultiSeries = Array.isArray(data) && data.length > 0 && 'name' in data[0] && 'data' in data[0]

  // Prepare chart data for Chart.js
  const prepareChartJsData = () => {
    if (isDataMultiSeries) {
      // Multi-series data
      const multiSeriesData = data as DataSeries[]
      const chartLabels = labels || (multiSeriesData[0].data as DataPoint[]).map(item => item.label || item.x || '')

      return {
        labels: chartLabels,
        datasets: multiSeriesData.map((series, seriesIndex) => {
          const color = series.color || themeColors[chartSettings.theme][seriesIndex % themeColors[chartSettings.theme].length]

          return {
            label: series.name,
            data: (series.data as DataPoint[]).map(item => typeof item === 'number' ? item : item.value || item.y),
            backgroundColor: color,
            borderColor: color.replace('0.8', '1'),
            borderWidth: 1,
            fill: activeChart === 'area',
            tension: 0.4,
          }
        }),
      }
    } else {
      // Single series data
      const singleSeriesData = data as DataPoint[]
      const chartLabels = labels || singleSeriesData.map(item => item.label || item.x || '')
      const chartValues = singleSeriesData.map(item => item.value || item.y)
      const chartColors = singleSeriesData.map((item, index) =>
        item.color || themeColors[chartSettings.theme][index % themeColors[chartSettings.theme].length]
      )

      return {
        labels: chartLabels,
        datasets: [
          {
            label: title,
            data: chartValues,
            backgroundColor: chartColors,
            borderColor: chartColors.map(color => color.replace('0.8', '1')),
            borderWidth: 1,
            fill: activeChart === 'area',
            tension: 0.4,
          },
        ],
      }
    }
  }

  // Prepare data for Plotly
  const preparePlotlyData = () => {
    if (isDataMultiSeries) {
      // Multi-series data
      const multiSeriesData = data as DataSeries[]

      return multiSeriesData.map((series, seriesIndex) => {
        const color = series.color || themeColors[chartSettings.theme][seriesIndex % themeColors[chartSettings.theme].length]
        const seriesData = series.data as DataPoint[]

        const baseTrace = {
          name: series.name,
          marker: { color },
        }

        if (activeChart === 'bar') {
          return {
            ...baseTrace,
            type: 'bar',
            x: seriesData.map(item => item.label || item.x),
            y: seriesData.map(item => item.value || item.y),
          }
        } else if (activeChart === 'line' || activeChart === 'area') {
          return {
            ...baseTrace,
            type: 'scatter',
            mode: 'lines+markers',
            x: seriesData.map(item => item.label || item.x),
            y: seriesData.map(item => item.value || item.y),
            fill: activeChart === 'area' ? 'tozeroy' : 'none',
          }
        } else if (activeChart === 'pie') {
          return {
            ...baseTrace,
            type: 'pie',
            labels: seriesData.map(item => item.label || item.x),
            values: seriesData.map(item => item.value || item.y),
          }
        } else if (activeChart === 'scatter') {
          return {
            ...baseTrace,
            type: 'scatter',
            mode: 'markers',
            x: seriesData.map(item => item.x),
            y: seriesData.map(item => item.y),
            marker: {
              color,
              size: seriesData.map(item => item.size || 10),
            }
          }
        } else if (activeChart === 'bubble') {
          return {
            ...baseTrace,
            type: 'scatter',
            mode: 'markers',
            x: seriesData.map(item => item.x),
            y: seriesData.map(item => item.y),
            marker: {
              color,
              size: seriesData.map(item => item.size || 10),
              opacity: 0.7,
            }
          }
        } else if (activeChart === 'radar') {
          return {
            ...baseTrace,
            type: 'scatterpolar',
            r: seriesData.map(item => item.value || item.y),
            theta: seriesData.map(item => item.label || item.x),
            fill: 'toself',
          }
        } else {
          // Default to bar
          return {
            ...baseTrace,
            type: 'bar',
            x: seriesData.map(item => item.label || item.x),
            y: seriesData.map(item => item.value || item.y),
          }
        }
      })
    } else {
      // Single series data
      const singleSeriesData = data as DataPoint[]

      if (activeChart === 'bar') {
        return [{
          type: 'bar',
          x: singleSeriesData.map(item => item.label || item.x),
          y: singleSeriesData.map(item => item.value || item.y),
          marker: {
            color: singleSeriesData.map((item, index) =>
              item.color || themeColors[chartSettings.theme][index % themeColors[chartSettings.theme].length]
            ),
          },
        }]
      } else if (activeChart === 'line' || activeChart === 'area') {
        return [{
          type: 'scatter',
          mode: 'lines+markers',
          x: singleSeriesData.map(item => item.label || item.x),
          y: singleSeriesData.map(item => item.value || item.y),
          fill: activeChart === 'area' ? 'tozeroy' : 'none',
          line: { color: themeColors[chartSettings.theme][0] },
        }]
      } else if (activeChart === 'pie') {
        return [{
          type: 'pie',
          labels: singleSeriesData.map(item => item.label || item.x),
          values: singleSeriesData.map(item => item.value || item.y),
          marker: {
            colors: singleSeriesData.map((item, index) =>
              item.color || themeColors[chartSettings.theme][index % themeColors[chartSettings.theme].length]
            ),
          },
        }]
      } else if (activeChart === 'scatter') {
        return [{
          type: 'scatter',
          mode: 'markers',
          x: singleSeriesData.map(item => item.x),
          y: singleSeriesData.map(item => item.y),
          marker: {
            color: themeColors[chartSettings.theme][0],
            size: singleSeriesData.map(item => item.size || 10),
          }
        }]
      } else if (activeChart === 'bubble') {
        return [{
          type: 'scatter',
          mode: 'markers',
          x: singleSeriesData.map(item => item.x),
          y: singleSeriesData.map(item => item.y),
          marker: {
            color: singleSeriesData.map((item, index) =>
              item.color || themeColors[chartSettings.theme][index % themeColors[chartSettings.theme].length]
            ),
            size: singleSeriesData.map(item => item.size || 10),
            opacity: 0.7,
          }
        }]
      } else if (activeChart === 'radar') {
        return [{
          type: 'scatterpolar',
          r: singleSeriesData.map(item => item.value || item.y),
          theta: singleSeriesData.map(item => item.label || item.x),
          fill: 'toself',
          line: { color: themeColors[chartSettings.theme][0] },
        }]
      } else {
        // Default to bar
        return [{
          type: 'bar',
          x: singleSeriesData.map(item => item.label || item.x),
          y: singleSeriesData.map(item => item.value || item.y),
          marker: {
            color: singleSeriesData.map((item, index) =>
              item.color || themeColors[chartSettings.theme][index % themeColors[chartSettings.theme].length]
            ),
          },
        }]
      }
    }
  }

  // Prepare data for Recharts
  const prepareRechartsData = () => {
    if (isDataMultiSeries) {
      // Multi-series data
      const multiSeriesData = data as DataSeries[]
      const seriesNames = multiSeriesData.map(series => series.name)
      const firstSeries = multiSeriesData[0].data as DataPoint[]

      // Create a combined dataset for Recharts
      return firstSeries.map((item, index) => {
        const dataPoint: any = {
          name: item.label || item.x || `Item ${index + 1}`,
        }

        // Add values from each series
        multiSeriesData.forEach(series => {
          const seriesData = series.data as DataPoint[]
          dataPoint[series.name] = seriesData[index]?.value || seriesData[index]?.y || 0
        })

        return dataPoint
      })
    } else {
      // Single series data
      const singleSeriesData = data as DataPoint[]

      return singleSeriesData.map(item => ({
        name: item.label || item.x || '',
        ...item // Include all original properties
      }))
    }
  }

  // Create or update Chart.js chart
  useEffect(() => {
    if (activeLibrary !== 'chartjs') return

    let isMounted = true
    let startTime: Date | null = null

    async function loadAndDrawChartJs() {
      if (!chartRef.current) return

      startTime = new Date()

      // Log chart rendering start
      if (traceId) {
        await logEvent({
          traceId,
          name: "chart_render_start",
          metadata: {
            chartType: activeChart,
            library: "chartjs"
          }
        })
      }

      try {
        // Dynamically import Chart.js only on client
        const mod = await import("chart.js/auto")
        Chart = mod.Chart

        // Destroy existing chart
        if (chartInstance) {
          chartInstance.destroy()
        }

        // Create new chart
        const ctx = chartRef.current.getContext('2d')
        if (!ctx) return

        const newChart = new Chart(ctx, {
          type: activeChart === 'area' ? 'line' : activeChart as any,
          data: prepareChartJsData(),
          options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
              duration: chartSettings.showAnimation ? 1000 : 0,
            },
            plugins: {
              legend: {
                display: chartSettings.showLegend,
                position: 'top',
              },
              title: {
                display: !!title,
                text: title
              },
              tooltip: {
                enabled: chartSettings.showTooltip,
              }
            },
            scales: {
              x: {
                stacked: chartSettings.stacked,
                title: {
                  display: !!xAxisLabel,
                  text: xAxisLabel
                },
                grid: {
                  display: chartSettings.showGrid,
                }
              },
              y: {
                stacked: chartSettings.stacked,
                title: {
                  display: !!yAxisLabel,
                  text: yAxisLabel
                },
                grid: {
                  display: chartSettings.showGrid,
                }
              }
            }
          },
        })

        if (isMounted) {
          setChartInstance(newChart)

          // Log successful chart rendering
          if (traceId && startTime) {
            const endTime = new Date()
            const renderTime = endTime.getTime() - startTime.getTime()

            await logEvent({
              traceId,
              name: "chart_render_complete",
              metadata: {
                chartType: activeChart,
                library: "chartjs",
                renderTimeMs: renderTime,
                success: true
              }
            })
          }
        }
      } catch (error) {
        console.error("Error rendering chart:", error)

        // Log chart rendering error
        if (traceId && startTime) {
          const endTime = new Date()
          const renderTime = endTime.getTime() - startTime.getTime()

          await logEvent({
            traceId,
            name: "chart_render_error",
            metadata: {
              chartType: activeChart,
              library: "chartjs",
              renderTimeMs: renderTime,
              error: error instanceof Error ? error.message : String(error)
            }
          })
        }
      }
    }

    loadAndDrawChartJs()

    // Cleanup
    return () => {
      isMounted = false
      if (chartInstance) {
        chartInstance.destroy()
      }
    }
  }, [activeChart, activeLibrary, data, title, labels, xAxisLabel, yAxisLabel, chartSettings, traceId])

  // Create or update Plotly chart
  useEffect(() => {
    if (activeLibrary !== 'plotly') return

    let isMounted = true

    async function loadAndDrawPlotly() {
      if (!plotlyRef.current) return

      // Dynamically import Plotly.js only on client
      const mod = await import("plotly.js-dist")
      Plotly = mod.default

      // Create new plot
      const plotData = preparePlotlyData()

      const layout = {
        title: title,
        showlegend: chartSettings.showLegend,
        xaxis: {
          title: xAxisLabel,
          showgrid: chartSettings.showGrid,
        },
        yaxis: {
          title: yAxisLabel,
          showgrid: chartSettings.showGrid,
        },
        hovermode: chartSettings.showTooltip ? 'closest' : false,
        barmode: chartSettings.stacked ? 'stack' : 'group',
        paper_bgcolor: 'rgba(0,0,0,0)',
        plot_bgcolor: 'rgba(0,0,0,0)',
        margin: { t: 50, r: 50, b: 50, l: 50 },
        font: {
          family: 'system-ui, sans-serif',
        },
      }

      const config = {
        responsive: true,
        displayModeBar: false,
      }

      // Clear previous plot
      plotlyRef.current.innerHTML = ''

      // Create new plot
      Plotly.newPlot(plotlyRef.current, plotData, layout, config)

      if (isMounted) setPlotlyInstance(plotlyRef.current)
    }

    loadAndDrawPlotly()

    // Cleanup
    return () => {
      isMounted = false
      if (plotlyInstance && Plotly) {
        Plotly.purge(plotlyInstance)
      }
    }
  }, [activeChart, activeLibrary, data, title, labels, xAxisLabel, yAxisLabel, chartSettings])

  // Handle copy data
  const handleCopyData = async () => {
    try {
      const dataString = JSON.stringify(data, null, 2)
      await navigator.clipboard.writeText(dataString)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)

      // Log copy data event
      if (traceId) {
        await logEvent({
          traceId,
          name: "chart_data_copied",
          metadata: {
            dataSize: dataString.length,
            chartType: activeChart
          }
        })
      }
    } catch (error) {
      console.error("Error copying data:", error)

      // Log copy error
      if (traceId) {
        await logEvent({
          traceId,
          name: "chart_data_copy_error",
          metadata: {
            error: error instanceof Error ? error.message : String(error)
          }
        })
      }
    }
  }

  // Handle download chart
  const handleDownload = () => {
    if (!chartRef.current) return

    try {
      const link = document.createElement('a')
      link.download = `${title.replace(/\s+/g, '-').toLowerCase()}-chart.png`
      link.href = chartRef.current.toDataURL('image/png')
      link.click()

      // Log download event
      if (traceId) {
        logEvent({
          traceId,
          name: "chart_downloaded",
          metadata: {
            chartType: activeChart,
            format: "png",
            title
          }
        }).catch(console.error)
      }
    } catch (error) {
      console.error("Error downloading chart:", error)

      // Log download error
      if (traceId) {
        logEvent({
          traceId,
          name: "chart_download_error",
          metadata: {
            error: error instanceof Error ? error.message : String(error)
          }
        }).catch(console.error)
      }
    }
  }

  // Handle chart type change with tracing
  const handleChartTypeChange = (type: string) => {
    setActiveChart(type)

    // Log chart type change
    if (traceId) {
      logEvent({
        traceId,
        name: "chart_type_changed",
        metadata: {
          previousType: activeChart,
          newType: type
        }
      }).catch(console.error)
    }
  }

  // Handle expand/collapse with tracing
  const handleExpandCollapse = () => {
    setExpanded(!expanded)

    // Log expand/collapse event
    if (traceId) {
      logEvent({
        traceId,
        name: expanded ? "chart_collapsed" : "chart_expanded",
        metadata: {
          chartType: activeChart
        }
      }).catch(console.error)
    }
  }

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-indigo-900 to-purple-900 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          {activeChart === 'bar' && <BarChart className="h-4 w-4" />}
          {activeChart === 'pie' && <PieChart className="h-4 w-4" />}
          {activeChart === 'line' && <LineChart className="h-4 w-4" />}
          {activeChart === 'area' && <AreaChart className="h-4 w-4" />}
          {activeChart === 'scatter' && <ScatterPlot className="h-4 w-4" />}
          <span className="font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleCopyData}
          >
            {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
            <span className="sr-only">Copy data</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download chart</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleExpandCollapse}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn(
        "p-4 bg-white dark:bg-zinc-900",
        expanded ? "flex-1" : "h-[300px]"
      )}>
        <Tabs value={activeChart} onValueChange={handleChartTypeChange} className="h-full flex flex-col">
          <TabsList className="mb-4 grid grid-cols-5">
            <TabsTrigger value="bar">Bar</TabsTrigger>
            <TabsTrigger value="line">Line</TabsTrigger>
            <TabsTrigger value="pie">Pie</TabsTrigger>
            <TabsTrigger value="area">Area</TabsTrigger>
            <TabsTrigger value="scatter">Scatter</TabsTrigger>
          </TabsList>

          <div className="flex-1 relative min-h-[200px]">
            <canvas ref={chartRef} className="w-full h-full" />
            <div ref={plotlyRef} className="w-full h-full" style={{ display: activeLibrary === 'plotly' ? 'block' : 'none' }} />
          </div>
        </Tabs>
      </div>
    </div>
  )
}


export default DataVisualization

export type { DataPoint, DataSeries, DataVisualizationProps }

================
File: components/chat/interactive-form.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, FormInput, Check, AlertCircle, Info } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { cn } from "@/lib/utils"

export interface FormField {
  id: string
  type: 'text' | 'textarea' | 'number' | 'email' | 'checkbox' | 'radio' | 'select' | 'date'
  label: string
  placeholder?: string
  required?: boolean
  options?: { value: string, label: string }[] // For radio and select
  validation?: {
    pattern?: string
    min?: number
    max?: number
    minLength?: number
    maxLength?: number
    errorMessage?: string
  }
}

export interface InteractiveFormProps {
  title?: string
  description?: string
  fields: FormField[]
  submitLabel?: string
  cancelLabel?: string
  onSubmit?: (data: Record<string, any>) => void
  onCancel?: () => void
  className?: string
}

export function InteractiveForm({
  title = "Feedback Form",
  description,
  fields = [],
  submitLabel = "Submit",
  cancelLabel = "Cancel",
  onSubmit,
  onCancel,
  className
}: InteractiveFormProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [formData, setFormData] = useState<Record<string, any>>({})
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [submitted, setSubmitted] = useState(false)
  const [submitting, setSubmitting] = useState(false)

  // Handle form input change
  const handleChange = (id: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [id]: value
    }))

    // Clear error when field is changed
    if (errors[id]) {
      setErrors(prev => {
        const newErrors = { ...prev }
        delete newErrors[id]
        return newErrors
      })
    }
  }

  // Validate a single field
  const validateField = (field: FormField, value: any): string | null => {
    // Required check
    if (field.required && (value === undefined || value === null || value === '')) {
      return `${field.label} is required`
    }

    // Type-specific validation
    if (field.validation) {
      const { pattern, min, max, minLength, maxLength, errorMessage } = field.validation

      // Pattern validation
      if (pattern && typeof value === 'string' && !new RegExp(pattern).test(value)) {
        return errorMessage || `${field.label} has an invalid format`
      }

      // Number range validation
      if (field.type === 'number') {
        const numValue = Number(value)
        if (min !== undefined && numValue < min) {
          return `${field.label} must be at least ${min}`
        }
        if (max !== undefined && numValue > max) {
          return `${field.label} must be at most ${max}`
        }
      }

      // String length validation
      if (typeof value === 'string') {
        if (minLength !== undefined && value.length < minLength) {
          return `${field.label} must be at least ${minLength} characters`
        }
        if (maxLength !== undefined && value.length > maxLength) {
          return `${field.label} must be at most ${maxLength} characters`
        }
      }
    }

    return null
  }

  // Validate all fields
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {}

    fields.forEach(field => {
      const value = formData[field.id]
      const error = validateField(field, value)
      if (error) {
        newErrors[field.id] = error
      }
    })

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (validateForm()) {
      setSubmitting(true)

      // Simulate API call
      setTimeout(() => {
        if (onSubmit) {
          onSubmit(formData)
        }
        setSubmitted(true)
        setSubmitting(false)
      }, 1000)
    }
  }

  // Reset form
  const resetForm = () => {
    setFormData({})
    setErrors({})
    setSubmitted(false)
  }

  // Render form field based on type
  const renderField = (field: FormField) => {
    const { id, type, label, placeholder, required, options } = field
    const value = formData[id]
    const error = errors[id]

    switch (type) {
      case 'text':
      case 'email':
      case 'number':
        return (
          <div className="space-y-2">
            <Label htmlFor={id} className="flex items-center gap-1">
              {label}
              {required && <span className="text-red-500">*</span>}
            </Label>
            <Input
              id={id}
              type={type}
              placeholder={placeholder}
              value={value || ''}
              onChange={(e) => handleChange(id, e.target.value)}
              className={cn(error && "border-red-500 focus:ring-red-500")}
            />
            {error && (
              <p className="text-xs text-red-500 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                {error}
              </p>
            )}
          </div>
        )

      case 'textarea':
        return (
          <div className="space-y-2">
            <Label htmlFor={id} className="flex items-center gap-1">
              {label}
              {required && <span className="text-red-500">*</span>}
            </Label>
            <Textarea
              id={id}
              placeholder={placeholder}
              value={value || ''}
              onChange={(e) => handleChange(id, e.target.value)}
              className={cn(error && "border-red-500 focus:ring-red-500")}
            />
            {error && (
              <p className="text-xs text-red-500 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                {error}
              </p>
            )}
          </div>
        )

      case 'checkbox':
        return (
          <div className="flex items-start space-x-2">
            <Checkbox
              id={id}
              checked={value || false}
              onCheckedChange={(checked) => handleChange(id, checked)}
            />
            <div className="space-y-1 leading-none">
              <Label htmlFor={id} className="flex items-center gap-1">
                {label}
                {required && <span className="text-red-500">*</span>}
              </Label>
              {error && (
                <p className="text-xs text-red-500 flex items-center gap-1">
                  <AlertCircle className="h-3 w-3" />
                  {error}
                </p>
              )}
            </div>
          </div>
        )

      case 'radio':
        return (
          <div className="space-y-2">
            <Label className="flex items-center gap-1">
              {label}
              {required && <span className="text-red-500">*</span>}
            </Label>
            <RadioGroup
              value={value || ''}
              onValueChange={(value) => handleChange(id, value)}
            >
              {options?.map((option) => (
                <div key={option.value} className="flex items-center space-x-2">
                  <RadioGroupItem value={option.value} id={`${id}-${option.value}`} />
                  <Label htmlFor={`${id}-${option.value}`}>{option.label}</Label>
                </div>
              ))}
            </RadioGroup>
            {error && (
              <p className="text-xs text-red-500 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                {error}
              </p>
            )}
          </div>
        )

      case 'select':
        return (
          <div className="space-y-2">
            <Label htmlFor={id} className="flex items-center gap-1">
              {label}
              {required && <span className="text-red-500">*</span>}
            </Label>
            <Select
              value={value || ''}
              onValueChange={(value) => handleChange(id, value)}
            >
              <SelectTrigger id={id} className={cn(error && "border-red-500 focus:ring-red-500")}>
                <SelectValue placeholder={placeholder || `Select ${label}`} />
              </SelectTrigger>
              <SelectContent>
                {options?.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {error && (
              <p className="text-xs text-red-500 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                {error}
              </p>
            )}
          </div>
        )

      case 'date':
        return (
          <div className="space-y-2">
            <Label htmlFor={id} className="flex items-center gap-1">
              {label}
              {required && <span className="text-red-500">*</span>}
            </Label>
            <Input
              id={id}
              type="date"
              value={value || ''}
              onChange={(e) => handleChange(id, e.target.value)}
              className={cn(error && "border-red-500 focus:ring-red-500")}
            />
            {error && (
              <p className="text-xs text-red-500 flex items-center gap-1">
                <AlertCircle className="h-3 w-3" />
                {error}
              </p>
            )}
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-purple-800 to-violet-700 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <FormInput className="h-4 w-4" />
          <span className="font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn(
        "p-4 overflow-auto",
        expanded ? "flex-1" : "max-h-[400px]"
      )}>
        {submitted ? (
          <div className="flex flex-col items-center justify-center py-8 text-center">
            <div className="h-12 w-12 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center mb-4">
              <Check className="h-6 w-6 text-green-600 dark:text-green-400" />
            </div>
            <h3 className="text-xl font-medium mb-2">Thank You!</h3>
            <p className="text-muted-foreground mb-6">Your submission has been received.</p>
            <Button onClick={resetForm}>Submit Another Response</Button>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            {description && (
              <div className="mb-6 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md border border-blue-100 dark:border-blue-800 flex items-start gap-3">
                <Info className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-blue-700 dark:text-blue-300">{description}</p>
              </div>
            )}

            <div className="space-y-6">
              {fields.map((field) => (
                <div key={field.id}>
                  {renderField(field)}
                </div>
              ))}
            </div>

            <div className="mt-8 flex justify-end gap-2">
              {onCancel && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={onCancel}
                  disabled={submitting}
                >
                  {cancelLabel}
                </Button>
              )}
              <Button
                type="submit"
                variant="gradient"
                disabled={submitting}
              >
                {submitting ? (
                  <>
                    <div className="h-4 w-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2"></div>
                    Processing...
                  </>
                ) : submitLabel}
              </Button>
            </div>
          </form>
        )}
      </div>
    </div>
  )
}

================
File: components/chat/interactive-map.tsx
================
"use client"

import { useState, useRef, useEffect, useLayoutEffect } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Download, MapPin, Search, Plus, Minus, Copy, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { cn } from "@/lib/utils"
import L from "leaflet"

// Import Leaflet CSS statically to ensure it's bundled correctly
import "leaflet/dist/leaflet.css"

// Import Leaflet dynamically to avoid SSR issues
import dynamic from "next/dynamic"
const MapContainer = dynamic(() => import('react-leaflet').then(mod => mod.MapContainer), { ssr: false })
const TileLayer = dynamic(() => import('react-leaflet').then(mod => mod.TileLayer), { ssr: false })
const Marker = dynamic(() => import('react-leaflet').then(mod => mod.Marker), { ssr: false })
const Popup = dynamic(() => import('react-leaflet').then(mod => mod.Popup), { ssr: false })
const ZoomControl = dynamic(() => import('react-leaflet').then(mod => mod.ZoomControl), { ssr: false })

export interface Location {
  lat: number
  lng: number
  title?: string
  description?: string
}

export interface InteractiveMapProps {
  title?: string
  center?: [number, number]
  zoom?: number
  locations?: Location[]
  className?: string
}

export function InteractiveMap({ 
  title = "Location Map", 
  center = [51.505, -0.09], // Default to London
  zoom = 13,
  locations = [],
  className
}: InteractiveMapProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [copied, setCopied] = useState(false)
  const [mapReady, setMapReady] = useState(false)
  const [currentZoom, setCurrentZoom] = useState(zoom)
  const [searchQuery, setSearchQuery] = useState("")
  const mapRef = useRef<L.Map>(null)

  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Leaflet CSS is now imported statically above

      // Fix marker icon issues
      import('leaflet').then(L => {
        delete (L.Icon.Default.prototype as any)._getIconUrl

        L.Icon.Default.mergeOptions({
          iconRetinaUrl: '/images/marker-icon-2x.png',
          iconUrl: '/images/marker-icon.png',
          shadowUrl: '/images/marker-shadow.png',
        })

        setMapReady(true)
      })
    }
  }, [])

  // Handle copy locations
  const handleCopyLocations = async () => {
    const locationsString = JSON.stringify(locations, null, 2)
    await navigator.clipboard.writeText(locationsString)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  // Handle download map (screenshot)
  const handleDownload = () => {
    // This is a placeholder - actual implementation would require html2canvas or similar
    alert("Map download functionality would be implemented here")
  }

  // Handle zoom in
  const handleZoomIn = () => {
    if (mapRef.current) {
      mapRef.current.zoomIn()
    }
  }

  // Handle zoom out
  const handleZoomOut = () => {
    if (mapRef.current) {
      mapRef.current.zoomOut()
    }
  }

  // Handle search
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    
    // This is a placeholder - actual implementation would use a geocoding service
    alert(`Search for: ${searchQuery}`)
  }

  return (
    <div 
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-green-800 to-teal-800 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <MapPin className="h-4 w-4" />
          <span className="font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleCopyLocations}
          >
            {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
            <span className="sr-only">Copy locations</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download map</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>
      
      <div className={cn(
        "relative bg-white dark:bg-zinc-900",
        expanded ? "flex-1" : "h-[300px]"
      )}>
        {/* Search bar */}
        <div className="absolute top-2 left-0 right-0 z-10 px-4">
          <form onSubmit={handleSearch} className="flex gap-2">
            <Input
              type="text"
              placeholder="Search location..."
              className="bg-white/90 backdrop-blur-sm"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            <Button type="submit" size="icon" variant="secondary">
              <Search className="h-4 w-4" />
            </Button>
          </form>
        </div>
        
        {/* Zoom controls */}
        <div className="absolute top-16 right-4 z-10 flex flex-col gap-2">
          <Button size="icon-sm" variant="secondary" onClick={handleZoomIn}>
            <Plus className="h-4 w-4" />
          </Button>
          <Button size="icon-sm" variant="secondary" onClick={handleZoomOut}>
            <Minus className="h-4 w-4" />
          </Button>
        </div>
        
        {/* Map */}
        {mapReady && (
            <MapContainer
              ref={mapRef}
              center={center as [number, number]} 
              zoom={currentZoom} 
              style={{ height: '100%', width: '100%' }}
              zoomControl={false} // Set to false as a separate ZoomControl component is used
              whenReady={() => {
                if (mapRef.current) {
                  setCurrentZoom(mapRef.current.getZoom());
                }
              }}
            >
              <TileLayer
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
              />
              {locations.map((location: Location, index: number) => (
              <Marker key={index} position={[location.lat, location.lng] as [number, number]}>
                {(location.title || location.description) && (
                <Popup>
                  {location.title && <h3 className="font-medium">{location.title}</h3>}
                  {location.description && <p>{location.description}</p>}
                </Popup>
                )}
              </Marker>
              ))}
              <ZoomControl position="bottomright" />
            </MapContainer>
        )}
        
        {!mapReady && (
          <div className="h-full w-full flex items-center justify-center text-muted-foreground">
            Loading map...
          </div>
        )}
      </div>
    </div>
  )
}

export default InteractiveMap

export type { InteractiveMapProps, Location }

================
File: components/chat/openai-assistant-chat.tsx
================
'use client';

import { useState, useRef, useEffect } from 'react';
import { useAssistant, Message } from '@ai-sdk/react';
import {
  Bot, User, Send, Loader2, RefreshCw, XCircle, Paperclip,
  FileText, Code, Mic, Copy, Check, Eraser,
  Maximize2, Minimize2, ThumbsUp, ThumbsDown,
  Zap, Settings, MessageSquare
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Card, CardContent } from '@/components/ui/card';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import { CodeBlock } from './code-block';
import { MermaidDiagram } from './mermaid-diagram';
import { nanoid } from 'nanoid';

export interface OpenAIAssistantChatProps {
  apiEndpoint?: string;
  initialThreadId?: string;
  className?: string;
}

export function OpenAIAssistantChat({
  apiEndpoint = '/api/assistant',
  initialThreadId,
  className,
}: OpenAIAssistantChatProps) {
  // Refs
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // State
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [isCopied, setIsCopied] = useState(false);
  const [threadName, setThreadName] = useState('Assistant Chat');

  // Use the AI SDK useAssistant hook
  const {
    messages,
    input,
    handleInputChange,
    status,
    submitMessage,
    error,
    // reload, (removed as it does not exist on UseAssistantHelpers)
    stop
  } = useAssistant({
    api: apiEndpoint,
    threadId: initialThreadId,
    onError: (error) => {
      console.error('Assistant error:', error);
    }
  });

  // Derived state
  const isLoading = status === 'in_progress';

  // Auto-scroll to bottom of messages
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Auto-resize textarea based on content
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [input]);

  // Copy conversation to clipboard
  const copyConversation = () => {
    const text = messages.map(m => `${m.role === 'user' ? 'You' : 'AI'}: ${m.content}`).join('\n\n');
    navigator.clipboard.writeText(text).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    });
  };

  // Toggle fullscreen
  const toggleFullScreen = () => {
    setIsFullScreen(prev => !prev);
    // In a real app, you would implement actual fullscreen functionality
  };

  // Handle form submission
  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (input.trim() === '') return;
    submitMessage(e);
  };

  // Handle keyboard shortcuts
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      formRef.current?.requestSubmit();
    }
  };

  // Render content with code blocks
  const renderContent = (content: string) => {
    const parts = [];
    
    // Check for code blocks
    const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
    let lastIndex = 0;
    let match;

    while ((match = codeBlockRegex.exec(content)) !== null) {
      // Add text before code block
      if (match.index > lastIndex) {
        parts.push(
          <p key={`text-${lastIndex}`} className="whitespace-pre-wrap">
            {content.slice(lastIndex, match.index)}
          </p>
        );
      }

      const language = match[1] || 'plaintext';
      const code = match[2];

      // Handle special code blocks
      if (language === 'mermaid') {
        parts.push(<MermaidDiagram key={`mermaid-${match.index}`} code={code} />);
      } else {
        parts.push(
          <CodeBlock key={`code-${match.index}`} language={language} code={code} />
        );
      }

      lastIndex = match.index + match[0].length;
    }

    // Add remaining text
    if (lastIndex < content.length) {
      parts.push(
        <p key={`text-${lastIndex}`} className="whitespace-pre-wrap">
          {content.slice(lastIndex)}
        </p>
      );
    }

    return parts.length > 0 ? parts : <p className="whitespace-pre-wrap">{content}</p>;
  };

  return (
    <div className={cn(
      "flex flex-col h-full bg-background border rounded-lg overflow-hidden",
      isFullScreen ? "fixed inset-0 z-50" : "relative",
      className
    )}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center gap-2">
          <Bot className="h-5 w-5 text-primary" />
          <h2 className="text-lg font-semibold">{threadName}</h2>
        </div>
        <div className="flex items-center gap-2">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" onClick={copyConversation}>
                  {isCopied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{isCopied ? 'Copied!' : 'Copy conversation'}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" onClick={toggleFullScreen}>
                  {isFullScreen ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{isFullScreen ? 'Exit fullscreen' : 'Fullscreen'}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        <AnimatePresence initial={false}>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.2 }}
              className={cn(
                "flex items-start gap-3 p-3 rounded-lg",
                message.role === 'user' ? "bg-muted/50 ml-6" : "bg-primary/5 mr-6"
              )}
            >
              <Avatar className={cn(
                "h-8 w-8",
                message.role === 'user' ? "bg-primary" : "bg-primary/20"
              )}>
                <AvatarFallback>
                  {message.role === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                </AvatarFallback>
              </Avatar>
              <div className="flex-1 overflow-hidden">
                {message.role === 'data' ? (
                  <div>
                    <p className="font-medium">{(message.data as any)?.description || 'Data'}</p>
                    <pre className="bg-muted p-2 rounded mt-2 overflow-x-auto">
                      {JSON.stringify(message.data, null, 2)}
                    </pre>
                  </div>
                ) : (
                  <div>{renderContent(message.content)}</div>
                )}
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t">
        <form ref={formRef} onSubmit={onSubmit} className="relative">
          <Textarea
            ref={textareaRef}
            value={input}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            placeholder="Type a message..."
            className="min-h-[60px] w-full resize-none pr-16 py-3"
            disabled={isLoading}
          />
          <div className="absolute right-2 bottom-2 flex items-center gap-2">
            {isLoading ? (
              <Button type="button" size="icon" variant="ghost" onClick={() => stop()}>
                <XCircle className="h-5 w-5 text-muted-foreground" />
              </Button>
            ) : (
              <Button type="submit" size="icon" disabled={input.trim() === ''}>
                <Send className="h-5 w-5" />
              </Button>
            )}
          </div>
        </form>
        {isLoading && (
          <div className="flex items-center justify-center mt-2">
            <Loader2 className="h-4 w-4 animate-spin mr-2" />
            <span className="text-sm text-muted-foreground">Assistant is thinking...</span>
          </div>
        )}
        {error && (
          <div className="flex items-center justify-between mt-2 p-2 bg-destructive/10 text-destructive rounded">
            <span className="text-sm">Error: {error.message || 'Something went wrong'}</span>
            {/* <Button size="sm" variant="ghost" onClick={reload}>
              <RefreshCw className="h-4 w-4 mr-1" /> Retry
            </Button> */}
          </div>
        )}
      </div>
    </div>
  );
}

================
File: components/chat/screen-share.tsx
================
"use client"

import { useState, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Play, Pause, Download, Monitor } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface ScreenShareProps {
  src: string
  title?: string
  isVideo?: boolean
  className?: string
}

export function ScreenShare({ src, title, isVideo = true, className }: ScreenShareProps) {
  const [expanded, setExpanded] = useState(false)
  const [playing, setPlaying] = useState(false)
  const [hovered, setHovered] = useState(false)
  const videoRef = useRef<HTMLVideoElement>(null)

  const handlePlayPause = () => {
    if (videoRef.current) {
      if (videoRef.current.paused) {
        videoRef.current.play()
        setPlaying(true)
      } else {
        videoRef.current.pause()
        setPlaying(false)
      }
    }
  }

  const handleDownload = () => {
    const link = document.createElement("a")
    link.href = src
    link.download = title || "screen-recording"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  useEffect(() => {
    const videoElement = videoRef.current
    if (videoElement) {
      const handlePlay = () => setPlaying(true)
      const handlePause = () => setPlaying(false)
      
      videoElement.addEventListener("play", handlePlay)
      videoElement.addEventListener("pause", handlePause)
      
      return () => {
        videoElement.removeEventListener("play", handlePlay)
        videoElement.removeEventListener("pause", handlePause)
      }
    }
  }, [])

  return (
    <div 
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      {/* Header */}
      <div className="flex items-center justify-between bg-gradient-to-r from-gray-900/90 to-gray-800/90 px-3 py-2 text-white">
        <div className="flex items-center gap-2">
          <Monitor className="h-4 w-4 text-blue-400" />
          <span className="text-sm font-medium">{title || "Screen Recording"}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          {isVideo && (
            <Button
              variant="ghost"
              size="icon-sm"
              className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
              onClick={handlePlayPause}
            >
              {playing ? <Pause className="h-3.5 w-3.5" /> : <Play className="h-3.5 w-3.5" />}
              <span className="sr-only">{playing ? "Pause" : "Play"}</span>
            </Button>
          )}
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>
      
      {/* Content */}
      <div className={cn(
        "relative bg-black",
        expanded ? "flex-1" : "h-[400px]"
      )}>
        {isVideo ? (
          <video 
            ref={videoRef}
            src={src} 
            className="w-full h-full object-contain"
            controls={false}
            playsInline
          />
        ) : (
          <img 
            src={src} 
            alt={title || "Screen capture"} 
            className="w-full h-full object-contain"
          />
        )}
        
        {/* Video controls overlay (visible on hover) */}
        {isVideo && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: hovered ? 0.8 : 0 }}
            transition={{ duration: 0.2 }}
            className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4"
          >
            <div className="flex items-center justify-center">
              <Button
                variant="ghost"
                size="icon"
                className="h-10 w-10 rounded-full bg-white/20 text-white hover:bg-white/30"
                onClick={handlePlayPause}
              >
                {playing ? <Pause className="h-5 w-5" /> : <Play className="h-5 w-5" />}
              </Button>
            </div>
          </motion.div>
        )}
      </div>
    </div>
  )
}

================
File: components/chat/visualization-with-tracing.tsx
================
"use client"

import { useState, useEffect } from "react"
import { DataVisualization } from "./data-visualization"
import { TracingVisualization } from "./tracing-visualization"
import { createTrace, logEvent } from "@/lib/langfuse-integration"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { BarChart, Activity, RefreshCw } from "lucide-react"

export interface VisualizationWithTracingProps {
  title?: string
  data: any
  type?: string
  className?: string
}

export function VisualizationWithTracing({
  title = "Data Visualization with Tracing",
  data,
  type = "bar",
  className
}: VisualizationWithTracingProps) {
  const [traceId, setTraceId] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<string>("chart")
  const [loading, setLoading] = useState(false)
  
  // Initialize tracing
  useEffect(() => {
    async function initTracing() {
      try {
        setLoading(true)
        
        // Create a parent trace for the visualization
        const trace = await createTrace({
          name: "visualization_with_tracing",
          metadata: {
            title,
            chartType: type,
            dataSize: JSON.stringify(data).length
          }
        })
        
        if (trace?.id) {
          setTraceId(trace.id)
          
          // Log initialization event
          await logEvent({
            traceId: trace.id,
            name: "visualization_with_tracing_initialized",
            metadata: {
              timestamp: new Date().toISOString()
            }
          })
        }
      } catch (error) {
        console.error("Error initializing tracing:", error)
      } finally {
        setLoading(false)
      }
    }
    
    initTracing()
  }, [title, type, data])
  
  // Handle tab change
  const handleTabChange = (value: string) => {
    setActiveTab(value)
    
    // Log tab change event
    if (traceId) {
      logEvent({
        traceId,
        name: "tab_changed",
        metadata: {
          previousTab: activeTab,
          newTab: value,
          timestamp: new Date().toISOString()
        }
      }).catch(console.error)
    }
  }
  
  // Handle refresh
  const handleRefresh = async () => {
    try {
      setLoading(true)
      
      // Create a new trace
      const trace = await createTrace({
        name: "visualization_with_tracing",
        metadata: {
          title,
          chartType: type,
          dataSize: JSON.stringify(data).length,
          isRefresh: true
        }
      })
      
      if (trace?.id) {
        setTraceId(trace.id)
        
        // Log refresh event
        await logEvent({
          traceId: trace.id,
          name: "visualization_refreshed",
          metadata: {
            timestamp: new Date().toISOString()
          }
        })
      }
    } catch (error) {
      console.error("Error refreshing tracing:", error)
    } finally {
      setLoading(false)
    }
  }
  
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium">{title}</h3>
        <Button 
          variant="outline" 
          size="sm" 
          onClick={handleRefresh}
          disabled={loading}
        >
          <RefreshCw className="h-4 w-4 mr-2" />
          Refresh
        </Button>
      </div>
      
      <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
        <TabsList className="grid grid-cols-2">
          <TabsTrigger value="chart" className="flex items-center gap-2">
            <BarChart className="h-4 w-4" />
            Chart
          </TabsTrigger>
          <TabsTrigger value="tracing" className="flex items-center gap-2">
            <Activity className="h-4 w-4" />
            Tracing
          </TabsTrigger>
        </TabsList>
        
        <div className="mt-4">
          {activeTab === "chart" && (
            <DataVisualization
              title={title}
              data={data}
              type={type as any}
              className={className}
            />
          )}
          
          {activeTab === "tracing" && traceId && (
            <TracingVisualization
              traceId={traceId}
              title={`Tracing for ${title}`}
              className={className}
              refreshInterval={3000}
            />
          )}
          
          {activeTab === "tracing" && !traceId && (
            <div className="p-8 text-center border border-dashed rounded-lg">
              <p className="text-muted-foreground">
                {loading ? "Initializing tracing..." : "No tracing data available"}
              </p>
            </div>
          )}
        </div>
      </Tabs>
    </div>
  )
}

================
File: components/layout/main-nav.tsx
================
"use client"

import * as React from "react"
import { useCallback, useState, useEffect, memo } from "react"
import Link from "next/link"
import { usePathname, useRouter } from "next/navigation"
import {
  motion,
  AnimatePresence,
  useMotionValue,
  useTransform,
  useSpring,
  useReducedMotion,
  useScroll,
  useInView
} from "framer-motion"
import {
  Menu,
  X,
  Home,
  LayoutDashboard,
  Zap,
  CreditCard,
  FileText,
  Info,
  ChevronDown,
  Bell,
  Search,
  User,
  Github,
  Twitter,
  Linkedin,
  ExternalLink,
  ChevronRight,
  Sparkles,
  Command,
  Keyboard,
  Settings,
  MessageSquare,
  Sun,
  Moon
} from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { ModeToggle } from "@/components/layout/mode-toggle"
import { SignInDialog } from "@/components/auth/sign-in-dialog"
import { SignUpDialog } from "@/components/auth/sign-up-dialog"
import { Input } from "@/components/ui/input"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger
} from "@/components/ui/tooltip"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuGroup,
  DropdownMenuShortcut
} from "@/components/ui/dropdown-menu"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/components/ui/use-toast"
import { useMediaQuery } from "@/hooks/use-media-query"
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator
} from "@/components/ui/command"

/**
 * MainNav Component
 *
 * Enhanced navigation component with advanced animations, search functionality,
 * command palette, and responsive design.
 */
export const MainNav = memo(function MainNav() {
  const pathname = usePathname()
  const router = useRouter()
  const { toast } = useToast()
  const prefersReducedMotion = useReducedMotion()
  const isMobile = useMediaQuery("(max-width: 768px)")

  // State management
  const [isOpen, setIsOpen] = useState(false)
  const [showSignIn, setShowSignIn] = useState(false)
  const [showSignUp, setShowSignUp] = useState(false)
  const [showSearch, setShowSearch] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [notifications, setNotifications] = useState(3)
  const [commandOpen, setCommandOpen] = useState(false)
  const [lastActivity, setLastActivity] = useState<number>(Date.now())

  // Refs for animations and interactions
  const navRef = React.useRef<HTMLDivElement>(null)
  const searchInputRef = React.useRef<HTMLInputElement>(null)

  // Check if nav is in view
  const navInView = useInView(navRef, { once: true })

  // Motion values for animations
  const mouseX = useMotionValue(0)
  const mouseY = useMotionValue(0)

  // Spring animations for smoother motion
  const springConfig = { stiffness: 300, damping: 30 }
  const mouseXSpring = useSpring(mouseX, springConfig)
  const mouseYSpring = useSpring(mouseY, springConfig)

  // Transform values for hover effects
  const rotateX = useTransform(mouseYSpring, [0, 100], prefersReducedMotion ? [0, 0] : [2, -2])
  const rotateY = useTransform(mouseXSpring, [0, 200], prefersReducedMotion ? [0, 0] : [-2, 2])

  // Scroll progress for animations
  const { scrollYProgress } = useScroll()
  const navOpacity = useTransform(scrollYProgress, [0, 0.2], [1, 0.95])
  const navScale = useTransform(scrollYProgress, [0, 0.2], [1, 0.98])

  // Handle mouse movement for hover effects
  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
    const { left, top } = e.currentTarget.getBoundingClientRect()
    mouseX.set(e.clientX - left)
    mouseY.set(e.clientY - top)
    setLastActivity(Date.now())
  }, [mouseX, mouseY])

  // Handle keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Command+K or Ctrl+K to open command palette
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault()
        setCommandOpen(true)
      }

      // Escape to close search
      if (e.key === 'Escape' && showSearch) {
        setShowSearch(false)
      }

      setLastActivity(Date.now())
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [showSearch])

  // Focus search input when search is shown
  useEffect(() => {
    if (showSearch && searchInputRef.current) {
      searchInputRef.current.focus()
    }
  }, [showSearch])

  // Handle search submission
  const handleSearchSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      toast({
        title: "Search submitted",
        description: `Searching for "${searchQuery}"`,
        duration: 2000,
      })
      // In a real app, you would navigate to search results
      // router.push(`/search?q=${encodeURIComponent(searchQuery)}`)
      setShowSearch(false)
    }
  }, [searchQuery, toast])

  // Enhanced routes with additional metadata
  const routes = [
    {
      href: "/",
      label: "Home",
      active: pathname === "/",
      icon: <Home className="h-4 w-4" />,
      description: "Return to the homepage",
      shortcut: "h",
      isNew: false,
      badge: null
    },
    {
      href: "/dashboard",
      label: "Dashboard",
      active: pathname === "/dashboard" || pathname?.startsWith("/dashboard/"),
      icon: <LayoutDashboard className="h-4 w-4" />,
      description: "View your AI dashboard",
      shortcut: "d",
      isNew: false,
      badge: null
    },
    {
      href: "/features",
      label: "Features",
      active: pathname === "/features",
      icon: <Zap className="h-4 w-4" />,
      description: "Explore platform features",
      shortcut: "f",
      isNew: true,
      badge: "New"
    },
    {
      href: "/pricing",
      label: "Pricing",
      active: pathname === "/pricing",
      icon: <CreditCard className="h-4 w-4" />,
      description: "View pricing plans",
      shortcut: "p",
      isNew: false,
      badge: null
    },
    {
      href: "/blog",
      label: "Blog",
      active: pathname === "/blog" || pathname?.startsWith("/blog/"),
      icon: <FileText className="h-4 w-4" />,
      description: "Read our latest articles",
      shortcut: "b",
      isNew: false,
      badge: null
    },
    {
      href: "/about",
      label: "About",
      active: pathname === "/about",
      icon: <Info className="h-4 w-4" />,
      description: "Learn more about us",
      shortcut: "a",
      isNew: false,
      badge: null
    },
  ]

  // Command palette items for quick navigation
  const commandItems = [
    ...routes,
    {
      href: "/settings",
      label: "Settings",
      active: pathname === "/settings",
      icon: <Settings className="h-4 w-4" />,
      description: "Manage your account settings",
      shortcut: "s",
      isNew: false,
      badge: null
    },
    {
      href: "/chat",
      label: "Chat",
      active: pathname === "/chat",
      icon: <MessageSquare className="h-4 w-4" />,
      description: "Open AI chat interface",
      shortcut: "c",
      isNew: false,
      badge: null
    }
  ]

  return (
    <>
      <motion.div
        ref={navRef}
        className="flex items-center justify-between py-4"
        onMouseMove={handleMouseMove}
        style={{
          opacity: navOpacity,
          scale: navScale
        }}
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.4 }}
      >
        <div className="flex items-center gap-6 md:gap-10">
          <Link href="/" className="flex items-center space-x-2 group">
            <motion.div
              initial={{ rotate: 0, scale: 1 }}
              animate={{
                rotate: prefersReducedMotion ? 0 : 360,
                scale: prefersReducedMotion ? 1 : [1, 1.05, 1]
              }}
              transition={{
                rotate: { duration: 10, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                scale: { duration: 3, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" }
              }}
              className="relative"
              style={{
                rotateX,
                rotateY,
                transformPerspective: 1000
              }}
            >
              <motion.div
                className="absolute inset-0 rounded-full bg-gradient-to-r from-green-500 via-teal-500 to-blue-600 opacity-70 blur-sm"
                animate={{
                  rotate: prefersReducedMotion ? 0 : [0, 360],
                  scale: prefersReducedMotion ? 1 : [1, 1.05, 1]
                }}
                transition={{
                  duration: 10,
                  repeat: Infinity,
                  repeatType: "reverse"
                }}
              />
              <motion.div
                className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 via-cyan-600 to-teal-500 opacity-70 blur-[2px]"
                animate={{
                  rotate: prefersReducedMotion ? 0 : [0, -360]
                }}
                transition={{
                  duration: 15,
                  repeat: Infinity,
                  ease: "linear"
                }}
              />
              <div className="relative h-7 w-7 rounded-full bg-background flex items-center justify-center">
                <Zap className="h-4 w-4 text-primary" />
              </div>
            </motion.div>
            <motion.span
              className="font-bold text-xl bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600"
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
            >
              DeanmachinesAI
            </motion.span>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex gap-6">
            <AnimatePresence>
              {routes.map((route, index) => (
                <TooltipProvider key={route.href} delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <motion.div
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.05 }}
                        whileHover={{ y: prefersReducedMotion ? 0 : -2 }}
                      >
                        <Link
                          href={route.href}
                          className={cn(
                            "text-sm font-medium transition-colors hover:text-primary flex items-center gap-1.5",
                            route.active ? "text-primary" : "text-muted-foreground",
                          )}
                        >
                          {route.icon}
                          <span>{route.label}</span>
                          {route.isNew && (
                            <Badge className="ml-1 bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700">
                              {route.badge}
                            </Badge>
                          )}
                        </Link>
                      </motion.div>
                    </TooltipTrigger>
                    <TooltipContent side="bottom" className="flex items-center gap-2">
                      <p>{route.description}</p>
                      <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                        <span className="text-xs">⌘</span>{route.shortcut}
                      </kbd>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              ))}
            </AnimatePresence>
          </nav>
        </div>

        <div className="flex items-center gap-3">
          {/* Enhanced Search with form submission */}
          <AnimatePresence>
            {showSearch ? (
              <motion.form
                initial={{ width: 0, opacity: 0 }}
                animate={{ width: "250px", opacity: 1 }}
                exit={{ width: 0, opacity: 0 }}
                transition={{ duration: 0.2 }}
                className="relative hidden md:flex"
                onSubmit={(e) => {
                  e.preventDefault()
                  if (searchQuery.trim()) {
                    toast({
                      title: "Search submitted",
                      description: `Searching for "${searchQuery}"`,
                      duration: 2000,
                    })
                    setShowSearch(false)
                  }
                }}
              >
                <Input
                  ref={searchInputRef}
                  type="text"
                  placeholder="Search..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="h-9 w-full rounded-lg bg-background pr-8"
                  aria-label="Search"
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-9 w-9"
                  onClick={() => setShowSearch(false)}
                >
                  <X className="h-4 w-4" />
                  <span className="sr-only">Close search</span>
                </Button>
              </motion.form>
            ) : (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="hidden md:flex"
              >
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-9 w-9"
                        onClick={() => setShowSearch(true)}
                        aria-label="Search"
                      >
                        <Search className="h-4 w-4" />
                        <span className="sr-only">Search</span>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="bottom" className="flex items-center gap-2">
                      <p>Search</p>
                      <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                        <span className="text-xs">⌘</span>K
                      </kbd>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Enhanced Notifications with animation */}
          <div className="hidden md:flex">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-9 w-9 relative"
                    aria-label={`Notifications (${notifications} unread)`}
                  >
                    <Bell className="h-4 w-4" />
                    {notifications > 0 && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{
                          scale: [1, 1.2, 1],
                          transition: {
                            repeat: 3,
                            repeatType: "reverse",
                            duration: 0.3
                          }
                        }}
                        className="absolute -top-1 -right-1 h-4 w-4 rounded-full bg-gradient-to-r from-green-500 to-blue-600 flex items-center justify-center"
                      >
                        <span className="text-[10px] font-medium text-white">{notifications}</span>
                      </motion.div>
                    )}
                  </Button>
                </TooltipTrigger>
                <TooltipContent side="bottom">
                  <p>Notifications</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>

          {/* Enhanced User Menu */}
          <div className="hidden md:flex items-center gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="gap-1.5 relative overflow-hidden group"
                >
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-green-500/10 to-blue-600/10 opacity-0 group-hover:opacity-100"
                    initial={{ x: "-100%" }}
                    whileHover={{ x: "100%" }}
                    transition={{ duration: 0.6 }}
                  />
                  <User className="h-4 w-4" />
                  <span>Account</span>
                  <ChevronDown className="h-3 w-3 opacity-50" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>My Account</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => setShowSignIn(true)}
                  className="flex justify-between items-center"
                >
                  <span>Sign In</span>
                  <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                    S
                  </kbd>
                </DropdownMenuItem>
                <DropdownMenuItem
                  onClick={() => setShowSignUp(true)}
                  className="flex justify-between items-center"
                >
                  <span>Sign Up</span>
                  <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                    U
                  </kbd>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

            <Button
              className="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 border-none relative overflow-hidden group"
              onClick={() => setShowSignUp(true)}
            >
              <motion.div
                className="absolute inset-0 bg-white/20 opacity-0 group-hover:opacity-100"
                initial={{ x: "-100%" }}
                whileHover={{ x: "100%" }}
                transition={{ duration: 0.4 }}
              />
              <span className="relative z-10">Get Started</span>
            </Button>
          </div>

          <ModeToggle />

          {/* Enhanced Mobile Menu */}
          <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild className="md:hidden">
              <Button variant="ghost" size="icon" aria-label="Menu">
                <Menu className="h-5 w-5" />
                <span className="sr-only">Toggle menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-[80vw] sm:w-[350px]">
              <div className="flex flex-col space-y-4 mt-8">
                {routes.map((route) => (
                  <Link
                    key={route.href}
                    href={route.href}
                    className={cn(
                      "text-sm font-medium transition-colors hover:text-primary flex items-center gap-2 p-2 rounded-md",
                      route.active ? "text-primary bg-primary/10" : "text-muted-foreground",
                    )}
                    onClick={() => setIsOpen(false)}
                  >
                    {route.icon}
                    <span>{route.label}</span>
                    {route.isNew && (
                      <Badge className="ml-1 bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700">
                        {route.badge}
                      </Badge>
                    )}
                    <span className="ml-auto opacity-60 text-xs">{route.shortcut.toUpperCase()}</span>
                  </Link>
                ))}

                <div className="pt-4 border-t">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">Notifications</span>
                    {notifications > 0 && (
                      <Badge variant="outline" className="text-xs">
                        {notifications} new
                      </Badge>
                    )}
                  </div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">Theme</span>
                    <ModeToggle />
                  </div>
                </div>

                <div className="flex flex-col gap-2 mt-4">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowSignIn(true)
                      setIsOpen(false)
                    }}
                  >
                    Sign In
                  </Button>
                  <Button
                    className="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 border-none"
                    onClick={() => {
                      setShowSignUp(true)
                      setIsOpen(false)
                    }}
                  >
                    Sign Up
                  </Button>
                </div>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </motion.div>

      {/* Command Palette Dialog */}
      <CommandDialog open={commandOpen} onOpenChange={setCommandOpen}>
        <CommandInput placeholder="Type a command or search..." />
        <CommandList>
          <CommandEmpty>No results found.</CommandEmpty>
          <CommandGroup heading="Navigation">
            {commandItems.map((item) => (
              <CommandItem
                key={item.href}
                onSelect={() => {
                  router.push(item.href)
                  setCommandOpen(false)
                }}
              >
                <div className="mr-2 flex h-4 w-4 items-center justify-center">
                  {item.icon}
                </div>
                <span>{item.label}</span>
                {item.shortcut && (
                  <kbd className="ml-auto pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                    <span className="text-xs">⌘</span>{item.shortcut}
                  </kbd>
                )}
              </CommandItem>
            ))}
          </CommandGroup>
          <CommandSeparator />
          <CommandGroup heading="Theme">
            <CommandItem onSelect={() => {
              document.documentElement.classList.toggle('dark')
              setCommandOpen(false)
            }}>
              <div className="mr-2 flex h-4 w-4 items-center justify-center">
                {document.documentElement.classList.contains('dark') ?
                  <Sun className="h-4 w-4" /> :
                  <Moon className="h-4 w-4" />
                }
              </div>
              <span>Toggle Theme</span>
              <kbd className="ml-auto pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                <span className="text-xs">⌘</span>T
              </kbd>
            </CommandItem>
          </CommandGroup>
        </CommandList>
      </CommandDialog>

      {/* Authentication Dialogs */}
      <SignInDialog open={showSignIn} onOpenChange={setShowSignIn} />
      <SignUpDialog open={showSignUp} onOpenChange={setShowSignUp} />
    </>
  )
})

================
File: components/layout/mode-toggle.tsx
================
"use client"

import { motion } from "framer-motion"
import { Moon, Sun, Laptop } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ModeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          size="icon-sm"
          className="relative overflow-hidden rounded-full bg-background/80 backdrop-blur-sm hover:bg-accent/50"
        >
          <motion.div
            initial={{ opacity: 1, rotate: 0 }}
            animate={{
              opacity: theme === "dark" ? 0 : 1,
              rotate: theme === "dark" ? 45 : 0,
              scale: theme === "dark" ? 0.5 : 1
            }}
            transition={{ duration: 0.2 }}
            className="absolute inset-0 flex items-center justify-center"
          >
            <Sun className="h-[0.9rem] w-[0.9rem] text-yellow-500" />
          </motion.div>
          <motion.div
            initial={{ opacity: 0, rotate: -45, scale: 0.5 }}
            animate={{
              opacity: theme === "dark" ? 1 : 0,
              rotate: theme === "dark" ? 0 : -45,
              scale: theme === "dark" ? 1 : 0.5
            }}
            transition={{ duration: 0.2 }}
            className="absolute inset-0 flex items-center justify-center"
          >
            <Moon className="h-[0.9rem] w-[0.9rem] text-blue-300" />
          </motion.div>
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="rounded-xl border border-border/40 bg-background/80 backdrop-blur-sm">
        <DropdownMenuItem onClick={() => setTheme("light")} className="cursor-pointer flex items-center gap-2">
          <div className="rounded-full bg-yellow-100 dark:bg-yellow-500/20 p-1">
            <Sun className="h-3.5 w-3.5 text-yellow-600 dark:text-yellow-400" />
          </div>
          <span className="text-sm">Light</span>
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")} className="cursor-pointer flex items-center gap-2">
          <div className="rounded-full bg-blue-100 dark:bg-blue-500/20 p-1">
            <Moon className="h-3.5 w-3.5 text-blue-600 dark:text-blue-400" />
          </div>
          <span className="text-sm">Dark</span>
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")} className="cursor-pointer flex items-center gap-2">
          <div className="rounded-full bg-gray-100 dark:bg-gray-800 p-1">
            <Laptop className="h-3.5 w-3.5 text-gray-600 dark:text-gray-400" />
          </div>
          <span className="text-sm">System</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

================
File: components/observability/cost-estimation.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion } from "framer-motion"
import * as d3 from "d3"
import {
  Activity,
  AlertCircle,
  BarChart,
  CheckCircle,
  Clock,
  DollarSign,
  Download,
  Filter,
  Info,
  Layers,
  RefreshCw,
  Search,
  Zap
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from "@/components/ui/use-toast"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  AreaChart,
  Area,
  BarChart as RechartsBarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  Scatter,
  ScatterChart,
  ZAxis,
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  RadialBarChart,
  RadialBar
} from "recharts"
import { cn } from "@/lib/utils"

interface ModelCostData {
  modelId: string
  provider: string
  displayName: string
  costPerInputToken: number
  costPerOutputToken: number
  timeSeriesData: any[]
  metrics: {
    totalInputTokens: number
    totalOutputTokens: number
    totalCost: number
    avgCostPerRequest: number
    dailyAverage: number
    projectedMonthlyCost: number
  }
}

interface CostEstimationProps {
  costData: ModelCostData[]
  isLoading: boolean
  timeRange?: string
}

export function CostEstimation({
  costData,
  isLoading,
  timeRange = '30d'
}: CostEstimationProps) {
  const [activeTab, setActiveTab] = useState<string>("overview")
  const [selectedModel, setSelectedModel] = useState<string | null>(null)
  const [chartType, setChartType] = useState<string>("bar")

  // Set the first model as selected when data loads
  useEffect(() => {
    if (costData && costData.length > 0 && !selectedModel) {
      setSelectedModel(costData[0].modelId)
    }
  }, [costData, selectedModel])

  // Get the selected model data
  const selectedModelData = costData?.find(m => m.modelId === selectedModel)

  // Calculate total cost across all models
  const totalCost = costData?.reduce((sum, model) => sum + model.metrics.totalCost, 0) || 0
  const projectedMonthlyCost = costData?.reduce((sum, model) => sum + model.metrics.projectedMonthlyCost, 0) || 0

  // Prepare data for cost breakdown chart
  const costBreakdownData = costData?.map(model => ({
    name: model.displayName,
    value: model.metrics.totalCost,
    provider: model.provider,
    color: getProviderColor(model.provider)
  }))

  // Prepare time series data for the selected model
  const timeSeriesData = selectedModelData?.timeSeriesData.map(point => ({
    date: new Date(point.date).toLocaleDateString(),
    cost: point.cost,
    inputTokens: point.inputTokens,
    outputTokens: point.outputTokens,
    requests: point.requests
  }))

  // Get provider color
  function getProviderColor(provider: string) {
    switch (provider?.toLowerCase()) {
      case "google": return "#4285F4"
      case "openai": return "#10a37f"
      case "anthropic": return "#b668ff"
      default: return "#64748b"
    }
  }

  // Format currency
  function formatCurrency(value: number) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value)
  }

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-background/95 backdrop-blur-sm p-3 border border-border rounded-lg shadow-lg">
          <p className="font-medium">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color || entry.stroke }}>
              {entry.name}: {entry.name === 'Cost' ? formatCurrency(entry.value) : entry.value.toLocaleString()}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  // Generate mock data if needed for demo
  const generateMockCostData = () => {
    if (costData && costData.length > 0) return costData

    const mockModels = [
      { modelId: "gemini-1.5-pro", provider: "google", displayName: "Gemini 1.5 Pro", costPerInputToken: 0.00001, costPerOutputToken: 0.00002 },
      { modelId: "gpt-4o", provider: "openai", displayName: "GPT-4o", costPerInputToken: 0.00001, costPerOutputToken: 0.00003 },
      { modelId: "claude-3-opus", provider: "anthropic", displayName: "Claude 3 Opus", costPerInputToken: 0.000015, costPerOutputToken: 0.000075 },
      { modelId: "gemini-1.5-flash", provider: "google", displayName: "Gemini 1.5 Flash", costPerInputToken: 0.000003, costPerOutputToken: 0.000006 },
      { modelId: "gpt-3.5-turbo", provider: "openai", displayName: "GPT-3.5 Turbo", costPerInputToken: 0.0000015, costPerOutputToken: 0.000002 }
    ]

    return mockModels.map(model => {
      // Generate random usage data
      const totalInputTokens = Math.floor(Math.random() * 10000000) + 1000000
      const totalOutputTokens = Math.floor(totalInputTokens * 0.3)
      const totalCost = (totalInputTokens * model.costPerInputToken) + (totalOutputTokens * model.costPerOutputToken)
      const avgCostPerRequest = totalCost / (Math.floor(Math.random() * 10000) + 1000)

      // Generate time series data
      const timeSeriesData = []
      const days = timeRange === '7d' ? 7 : 30
      const now = new Date()

      for (let i = 0; i < days; i++) {
        const date = new Date(now)
        date.setDate(date.getDate() - (days - i))

        const dailyInputTokens = Math.floor(Math.random() * (totalInputTokens / days * 1.5)) + (totalInputTokens / days * 0.5)
        const dailyOutputTokens = Math.floor(dailyInputTokens * 0.3)
        const dailyCost = (dailyInputTokens * model.costPerInputToken) + (dailyOutputTokens * model.costPerOutputToken)

        timeSeriesData.push({
          date: date.toISOString(),
          cost: dailyCost,
          inputTokens: dailyInputTokens,
          outputTokens: dailyOutputTokens,
          requests: Math.floor(Math.random() * 1000) + 100
        })
      }

      // Calculate daily average and projected monthly cost
      const dailyAverage = timeSeriesData.reduce((sum, day) => sum + day.cost, 0) / timeSeriesData.length
      const projectedMonthlyCost = dailyAverage * 30

      return {
        ...model,
        timeSeriesData,
        metrics: {
          totalInputTokens,
          totalOutputTokens,
          totalCost,
          avgCostPerRequest,
          dailyAverage,
          projectedMonthlyCost
        }
      }
    })
  }

  // Use mock data if no real data is provided
  const displayData = costData?.length > 0 ? costData : generateMockCostData()

  return (
    <motion.div
      className="space-y-6"
      variants={containerVariants}
      initial="hidden"
      animate="show"
    >
      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4">
        <Select value={selectedModel || ""} onValueChange={setSelectedModel}>
          <SelectTrigger className="w-[200px]">
            <SelectValue placeholder="Select Model" />
          </SelectTrigger>
          <SelectContent>
            {displayData?.map(model => (
              <SelectItem key={model.modelId} value={model.modelId}>
                <div className="flex items-center gap-2">
                  <div
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: getProviderColor(model.provider) }}
                  />
                  {model.displayName}
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select value={chartType} onValueChange={setChartType}>
          <SelectTrigger className="w-[150px]">
            <SelectValue placeholder="Chart Type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="bar">Bar Chart</SelectItem>
            <SelectItem value="line">Line Chart</SelectItem>
            <SelectItem value="area">Area Chart</SelectItem>
            <SelectItem value="pie">Pie Chart</SelectItem>
          </SelectContent>
        </Select>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1">
          <TabsList className="grid grid-cols-3 w-[300px] ml-auto">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="breakdown">Breakdown</TabsTrigger>
            <TabsTrigger value="trends">Trends</TabsTrigger>
          </TabsList>
        </Tabs>
      </div>

      {/* Content */}
      <TabsContent value="overview" className="m-0">
        {isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* Total Cost */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <DollarSign className="h-5 w-5 text-green-500" />
                    Total Cost
                  </CardTitle>
                  <CardDescription>
                    {timeRange === '7d' ? 'Last 7 days' : 'Last 30 days'}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{formatCurrency(totalCost)}</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Projected Monthly Cost */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <BarChart className="h-5 w-5 text-blue-500" />
                    Projected Monthly
                  </CardTitle>
                  <CardDescription>
                    Based on current usage
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{formatCurrency(projectedMonthlyCost)}</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Total Tokens */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Layers className="h-5 w-5 text-purple-500" />
                    Total Tokens
                  </CardTitle>
                  <CardDescription>
                    Input and output combined
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    {displayData.reduce((sum, model) =>
                      sum + model.metrics.totalInputTokens + model.metrics.totalOutputTokens, 0
                    ).toLocaleString()}
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Cost Per Request */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Activity className="h-5 w-5 text-yellow-500" />
                    Avg Cost/Request
                  </CardTitle>
                  <CardDescription>
                    Across all models
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    {formatCurrency(
                      displayData.reduce((sum, model) => sum + model.metrics.avgCostPerRequest, 0) / displayData.length
                    )}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        )}
      </TabsContent>

      <TabsContent value="breakdown" className="m-0">
        {isLoading ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Cost Breakdown by Model</CardTitle>
              <CardDescription>
                Distribution of costs across different models
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  {chartType === 'pie' ? (
                    <PieChart>
                      <Pie
                        data={costBreakdownData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        outerRadius={150}
                        fill="#8884d8"
                        dataKey="value"
                        nameKey="name"
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                      >
                        {costBreakdownData?.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <RechartsTooltip
                        formatter={(value: number) => formatCurrency(value)}
                        content={<CustomTooltip />}
                      />
                    </PieChart>
                  ) : (
                    <RechartsBarChart data={costBreakdownData} layout="vertical">
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis type="number" />
                      <YAxis
                        dataKey="name"
                        type="category"
                        width={120}
                        tick={{ fill: 'var(--muted-foreground)' }}
                      />
                      <RechartsTooltip
                        formatter={(value: number) => formatCurrency(value)}
                        content={<CustomTooltip />}
                      />
                      <Bar
                        dataKey="value"
                        name="Cost"
                        radius={[0, 4, 4, 0]}
                      >
                        {costBreakdownData?.map((entry, index) => (
                          <Cell
                            key={`cell-${index}`}
                            fill={entry.color}
                            stroke="rgba(255,255,255,0.2)"
                            strokeWidth={1}
                          />
                        ))}
                      </Bar>
                    </RechartsBarChart>
                  )}
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="trends" className="m-0">
        {isLoading || !selectedModelData ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">
                {selectedModelData.displayName} - Cost Trends
              </CardTitle>
              <CardDescription>
                Daily cost trends over time
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  {chartType === 'line' ? (
                    <LineChart data={timeSeriesData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="date"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Line
                        type="monotone"
                        dataKey="cost"
                        name="Cost"
                        stroke={getProviderColor(selectedModelData.provider)}
                        strokeWidth={2}
                        dot={{ r: 1 }}
                        activeDot={{ r: 5 }}
                      />
                    </LineChart>
                  ) : chartType === 'bar' ? (
                    <RechartsBarChart data={timeSeriesData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="date"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Bar
                        dataKey="cost"
                        name="Cost"
                        fill={getProviderColor(selectedModelData.provider)}
                        radius={[4, 4, 0, 0]}
                      />
                    </RechartsBarChart>
                  ) : (
                    <AreaChart data={timeSeriesData}>
                      <defs>
                        <linearGradient id="costGradient" x1="0" y1="0" x2="0" y2="1">
                          <stop
                            offset="5%"
                            stopColor={getProviderColor(selectedModelData.provider)}
                            stopOpacity={0.8}
                          />
                          <stop
                            offset="95%"
                            stopColor={getProviderColor(selectedModelData.provider)}
                            stopOpacity={0.1}
                          />
                        </linearGradient>
                      </defs>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="date"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Area
                        type="monotone"
                        dataKey="cost"
                        name="Cost"
                        stroke={getProviderColor(selectedModelData.provider)}
                        fillOpacity={1}
                        fill="url(#costGradient)"
                      />
                    </AreaChart>
                  )}
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>
    </motion.div>
  )
}

================
File: components/observability/model-evaluation.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion } from "framer-motion"
import * as d3 from "d3"
import {
  Activity,
  AlertCircle,
  BarChart,
  CheckCircle,
  Clock,
  Download,
  Filter,
  Info,
  Layers,
  RefreshCw,
  Search,
  Star,
  Zap
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  AreaChart,
  Area,
  BarChart as RechartsBarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  Scatter,
  ScatterChart,
  ZAxis,
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  RadialBarChart,
  RadialBar
} from "recharts"
import { useToast } from "@/components/ui/use-toast"
import { cn } from "@/lib/utils"

interface EvaluationMetric {
  name: string
  description: string
  value: number
  threshold: number
  weight: number
}

interface ModelEvaluation {
  modelId: string
  provider: string
  displayName: string
  version: string
  evaluationDate: string
  datasetName: string
  datasetSize: number
  metrics: EvaluationMetric[]
  overallScore: number
  previousScore?: number
  examples: Array<{
    id: string
    input: string
    expectedOutput: string
    actualOutput: string
    scores: Record<string, number>
  }>
}

interface ModelEvaluationProps {
  evaluations: ModelEvaluation[]
  isLoading: boolean
}

export function ModelEvaluation({
  evaluations,
  isLoading
}: ModelEvaluationProps) {
  const [activeTab, setActiveTab] = useState<string>("overview")
  const [selectedModel, setSelectedModel] = useState<string | null>(null)
  const [selectedMetric, setSelectedMetric] = useState<string | null>(null)
  const [selectedExample, setSelectedExample] = useState<string | null>(null)

  // Set the first model as selected when data loads
  useEffect(() => {
    if (evaluations && evaluations.length > 0 && !selectedModel) {
      setSelectedModel(evaluations[0].modelId)

      // Set the first metric as selected
      if (evaluations[0].metrics.length > 0 && !selectedMetric) {
        setSelectedMetric(evaluations[0].metrics[0].name)
      }

      // Set the first example as selected
      if (evaluations[0].examples.length > 0 && !selectedExample) {
        setSelectedExample(evaluations[0].examples[0].id)
      }
    }
  }, [evaluations, selectedModel, selectedMetric, selectedExample])

  // Get the selected model data
  const selectedModelData = evaluations?.find(m => m.modelId === selectedModel)

  // Get the selected example
  const selectedExampleData = selectedModelData?.examples.find(e => e.id === selectedExample)

  // Prepare data for radar chart
  const radarData = selectedModelData?.metrics.map(metric => ({
    metric: metric.name,
    value: metric.value,
    threshold: metric.threshold
  }))

  // Prepare data for comparison chart
  const comparisonData = evaluations?.map(model => {
    const metricValues: Record<string, number> = {}
    model.metrics.forEach(metric => {
      metricValues[metric.name] = metric.value
    })

    return {
      name: model.displayName,
      ...metricValues,
      overallScore: model.overallScore,
      provider: model.provider
    }
  })

  // Get provider color
  const getProviderColor = (provider: string) => {
    switch (provider?.toLowerCase()) {
      case "google": return "#4285F4"
      case "openai": return "#10a37f"
      case "anthropic": return "#b668ff"
      default: return "#64748b"
    }
  }

  // Get score color
  const getScoreColor = (score: number) => {
    if (score >= 0.8) return "#10b981" // Green
    if (score >= 0.6) return "#f59e0b" // Yellow
    return "#ef4444" // Red
  }

  // Format score as percentage
  const formatScore = (score: number) => {
    return `${Math.round(score * 100)}%`
  }

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-background/95 backdrop-blur-sm p-3 border border-border rounded-lg shadow-lg">
          <p className="font-medium">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color || entry.stroke }}>
              {entry.name}: {typeof entry.value === 'number' ? formatScore(entry.value) : entry.value}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  // Generate mock data if needed for demo
  const generateMockEvaluations = () => {
    if (evaluations && evaluations.length > 0) return evaluations

    const mockModels = [
      { modelId: "gemini-1.5-pro", provider: "google", displayName: "Gemini 1.5 Pro", version: "2024-06-01" },
      { modelId: "gpt-4o", provider: "openai", displayName: "GPT-4o", version: "2024-05-15" },
      { modelId: "claude-3-opus", provider: "anthropic", displayName: "Claude 3 Opus", version: "2024-04-20" },
      { modelId: "gemini-1.5-flash", provider: "google", displayName: "Gemini 1.5 Flash", version: "2024-06-01" },
      { modelId: "gpt-4-turbo", provider: "openai", displayName: "GPT-4 Turbo", version: "2024-03-10" }
    ]

    const metricNames = [
      { name: "accuracy", description: "Correctness of responses" },
      { name: "relevance", description: "Relevance to the query" },
      { name: "coherence", description: "Logical flow and consistency" },
      { name: "conciseness", description: "Brevity and clarity" },
      { name: "harmlessness", description: "Avoidance of harmful content" }
    ]

    return mockModels.map(model => {
      // Generate random metrics
      const metrics = metricNames.map(metric => ({
        name: metric.name,
        description: metric.description,
        value: Math.random() * 0.4 + 0.6, // Between 0.6 and 1.0
        threshold: 0.7,
        weight: 1.0 / metricNames.length
      }))

      // Calculate overall score
      const overallScore = metrics.reduce((sum, metric) => sum + (metric.value * metric.weight), 0)

      // Generate example evaluations
      const examples = Array.from({ length: 5 }, (_, i) => {
        const exampleScores: Record<string, number> = {}
        metricNames.forEach(metric => {
          exampleScores[metric.name] = Math.random() * 0.4 + 0.6 // Between 0.6 and 1.0
        })

        return {
          id: `example-${i + 1}`,
          input: `Example query ${i + 1} for testing the model's capabilities.`,
          expectedOutput: `Expected response for example ${i + 1} that demonstrates ideal behavior.`,
          actualOutput: `Actual model response for example ${i + 1} that may or may not match expectations.`,
          scores: exampleScores
        }
      })

      return {
        ...model,
        evaluationDate: new Date().toISOString(),
        datasetName: "Evaluation Dataset v1.0",
        datasetSize: 100,
        metrics,
        overallScore,
        previousScore: overallScore - (Math.random() * 0.1 - 0.05), // Slight variation from current
        examples
      }
    })
  }

  // Use mock data if no real data is provided
  const displayData = evaluations?.length > 0 ? evaluations : generateMockEvaluations()

  return (
    <motion.div
      className="space-y-6"
      variants={containerVariants}
      initial="hidden"
      animate="show"
    >
      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4">
        <Select value={selectedModel || ""} onValueChange={setSelectedModel}>
          <SelectTrigger className="w-[200px]">
            <SelectValue placeholder="Select Model" />
          </SelectTrigger>
          <SelectContent>
            {displayData?.map(model => (
              <SelectItem key={model.modelId} value={model.modelId}>
                <div className="flex items-center gap-2">
                  <div
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: getProviderColor(model.provider) }}
                  />
                  {model.displayName}
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {selectedModelData && (
          <Select value={selectedMetric || ""} onValueChange={setSelectedMetric}>
            <SelectTrigger className="w-[200px]">
              <SelectValue placeholder="Select Metric" />
            </SelectTrigger>
            <SelectContent>
              {selectedModelData.metrics.map(metric => (
                <SelectItem key={metric.name} value={metric.name}>
                  {metric.name.charAt(0).toUpperCase() + metric.name.slice(1)}
                </SelectItem>
              ))}
              <SelectItem value="overallScore">Overall Score</SelectItem>
            </SelectContent>
          </Select>
        )}

        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1">
          <TabsList className="grid grid-cols-3 w-[300px] ml-auto">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="comparison">Comparison</TabsTrigger>
            <TabsTrigger value="examples">Examples</TabsTrigger>
          </TabsList>
        </Tabs>
      </div>

      {/* Content */}
      <TabsContent value="overview" className="m-0">
        {isLoading || !selectedModelData ? (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Skeleton className="h-[300px] w-full" />
            <Skeleton className="h-[300px] w-full col-span-2" />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Model Info Card */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm h-full">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <Badge
                      variant="outline"
                      className="px-2 py-1"
                      style={{
                        backgroundColor: `${getProviderColor(selectedModelData.provider)}20`,
                        color: getProviderColor(selectedModelData.provider),
                        borderColor: `${getProviderColor(selectedModelData.provider)}40`
                      }}
                    >
                      {selectedModelData.provider}
                    </Badge>
                    <Badge
                      variant="outline"
                      className="px-2 py-1"
                      style={{
                        backgroundColor: `${getScoreColor(selectedModelData.overallScore)}20`,
                        color: getScoreColor(selectedModelData.overallScore),
                        borderColor: `${getScoreColor(selectedModelData.overallScore)}40`
                      }}
                    >
                      {formatScore(selectedModelData.overallScore)}
                    </Badge>
                  </div>
                  <CardTitle className="text-lg mt-2">{selectedModelData.displayName}</CardTitle>
                  <CardDescription>Version: {selectedModelData.version}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <div className="text-sm text-muted-foreground">Evaluation Date</div>
                    <div className="font-medium">
                      {new Date(selectedModelData.evaluationDate).toLocaleDateString()}
                    </div>
                  </div>

                  <div>
                    <div className="text-sm text-muted-foreground">Dataset</div>
                    <div className="font-medium">
                      {selectedModelData.datasetName} ({selectedModelData.datasetSize} examples)
                    </div>
                  </div>

                  <div>
                    <div className="text-sm text-muted-foreground">Overall Score</div>
                    <div className="flex items-center gap-2">
                      <div
                        className="text-2xl font-bold"
                        style={{ color: getScoreColor(selectedModelData.overallScore) }}
                      >
                        {formatScore(selectedModelData.overallScore)}
                      </div>

                      {selectedModelData.previousScore && (
                        <div className={cn(
                          "text-xs",
                          selectedModelData.overallScore > selectedModelData.previousScore
                            ? "text-green-500"
                            : "text-red-500"
                        )}>
                          {selectedModelData.overallScore > selectedModelData.previousScore ? "↑" : "↓"}
                          {formatScore(Math.abs(selectedModelData.overallScore - selectedModelData.previousScore))}
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <div className="text-sm text-muted-foreground">Metrics</div>
                    {selectedModelData.metrics.map(metric => (
                      <div key={metric.name} className="flex items-center justify-between">
                        <div className="text-sm capitalize">{metric.name}</div>
                        <div
                          className="font-medium"
                          style={{ color: getScoreColor(metric.value) }}
                        >
                          {formatScore(metric.value)}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Radar Chart */}
            <motion.div variants={itemVariants} className="md:col-span-2">
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm h-full">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Evaluation Metrics</CardTitle>
                  <CardDescription>
                    Radar chart showing performance across all metrics
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <RadarChart cx="50%" cy="50%" outerRadius="80%" data={radarData}>
                        <PolarGrid stroke="rgba(255,255,255,0.1)" />
                        <PolarAngleAxis
                          dataKey="metric"
                          tick={{ fill: 'var(--muted-foreground)' }}
                          tickFormatter={(value) => value.charAt(0).toUpperCase() + value.slice(1)}
                        />
                        <PolarRadiusAxis
                          angle={30}
                          domain={[0, 1]}
                          tick={{ fill: 'var(--muted-foreground)' }}
                          tickFormatter={(value) => `${value * 100}%`}
                        />
                        <Radar
                          name="Threshold"
                          dataKey="threshold"
                          stroke="rgba(255,255,255,0.5)"
                          fill="rgba(255,255,255,0.1)"
                          fillOpacity={0.3}
                        />
                        <Radar
                          name="Score"
                          dataKey="value"
                          stroke={getProviderColor(selectedModelData.provider)}
                          fill={getProviderColor(selectedModelData.provider)}
                          fillOpacity={0.5}
                        />
                        <Legend />
                        <RechartsTooltip content={<CustomTooltip />} />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        )}
      </TabsContent>

      <TabsContent value="comparison" className="m-0">
        {isLoading ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Model Comparison</CardTitle>
              <CardDescription>
                {selectedMetric
                  ? `Comparing ${selectedMetric === 'overallScore' ? 'Overall Score' : selectedMetric} across all models`
                  : 'Comparing overall scores across all models'
                }
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <RechartsBarChart data={comparisonData} layout="vertical">
                    <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                    <XAxis
                      type="number"
                      domain={[0, 1]}
                      tickFormatter={(value) => `${value * 100}%`}
                    />
                    <YAxis
                      dataKey="name"
                      type="category"
                      width={120}
                      tick={{ fill: 'var(--muted-foreground)' }}
                    />
                    <RechartsTooltip content={<CustomTooltip />} />
                    <Legend />
                    <Bar
                      dataKey={selectedMetric || "overallScore"}
                      name={selectedMetric === 'overallScore' ? 'Overall Score' : selectedMetric || 'Overall Score'}
                      radius={[0, 4, 4, 0]}
                    >
                      {comparisonData?.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={getProviderColor(entry.provider)}
                          stroke="rgba(255,255,255,0.2)"
                          strokeWidth={1}
                        />
                      ))}
                    </Bar>
                  </RechartsBarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="examples" className="m-0">
        {isLoading || !selectedModelData ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Example List */}
            <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Evaluation Examples</CardTitle>
                <CardDescription>
                  Individual examples from the evaluation dataset
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <ScrollArea className="h-[400px]">
                  <div className="divide-y divide-border/30">
                    {selectedModelData.examples.map(example => (
                      <div
                        key={example.id}
                        className={cn(
                          "p-3 hover:bg-muted/50 cursor-pointer transition-colors",
                          selectedExample === example.id && "bg-muted/70 border-l-4 border-primary"
                        )}
                        onClick={() => setSelectedExample(example.id)}
                      >
                        <div className="font-medium truncate">Example {example.id.split('-')[1]}</div>
                        <div className="text-xs text-muted-foreground mt-1 truncate">
                          {example.input.substring(0, 50)}...
                        </div>
                        <div className="flex items-center gap-1 mt-2">
                          <Star className="h-3 w-3 text-yellow-500" />
                          <span className="text-xs">
                            Avg Score: {formatScore(
                              Object.values(example.scores).reduce((sum, score) => sum + score, 0) /
                              Object.values(example.scores).length
                            )}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </CardContent>
            </Card>

            {/* Example Details */}
            <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm md:col-span-2">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Example Details</CardTitle>
                <CardDescription>
                  Detailed view of the selected example
                </CardDescription>
              </CardHeader>
              <CardContent>
                {selectedExampleData ? (
                  <div className="space-y-4">
                    <div>
                      <div className="text-sm text-muted-foreground">Input</div>
                      <div className="p-3 bg-muted/30 rounded-md mt-1">
                        {selectedExampleData.input}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <div className="text-sm text-muted-foreground">Expected Output</div>
                        <div className="p-3 bg-muted/30 rounded-md mt-1">
                          {selectedExampleData.expectedOutput}
                        </div>
                      </div>

                      <div>
                        <div className="text-sm text-muted-foreground">Actual Output</div>
                        <div className="p-3 bg-muted/30 rounded-md mt-1">
                          {selectedExampleData.actualOutput}
                        </div>
                      </div>
                    </div>

                    <div>
                      <div className="text-sm text-muted-foreground mb-2">Scores</div>
                      <div className="grid grid-cols-2 gap-2">
                        {Object.entries(selectedExampleData.scores).map(([metric, score]) => (
                          <div key={metric} className="flex items-center justify-between p-2 bg-muted/20 rounded-md">
                            <div className="text-sm capitalize">{metric}</div>
                            <div
                              className="font-medium"
                              style={{ color: getScoreColor(score) }}
                            >
                              {formatScore(score)}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="h-[300px] flex items-center justify-center">
                    <p className="text-muted-foreground">Select an example to view details</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </TabsContent>
    </motion.div>
  )
}

================
File: components/observability/system-health.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion } from "framer-motion"
import * as d3 from "d3"
import {
  Activity,
  AlertCircle,
  BarChart,
  CheckCircle,
  Clock,
  Database,
  Download,
  Filter,
  Info,
  Layers,
  RefreshCw,
  Search,
  Server,
  Zap
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from "@/components/ui/use-toast"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  AreaChart,
  Area,
  BarChart as RechartsBarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  Scatter,
  ScatterChart,
  ZAxis,
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  RadialBarChart,
  RadialBar
} from "recharts"
import { cn } from "@/lib/utils"

interface SystemMetric {
  timeRange: string
  dataPoints: Array<{
    id: string
    timestamp: string
    cpu_usage: number
    memory_usage: number
    database_connections: number
    api_requests_per_minute: number
    average_response_time_ms: number
    active_users: number
  }>
  summary: {
    avgCpuUsage: number
    avgMemoryUsage: number
    avgResponseTime: number
    peakApiRequests: number
    totalRequests: number
    avgActiveUsers: number
  }
}

interface SystemHealthProps {
  metrics: SystemMetric | null
  isLoading: boolean
}

export function SystemHealth({
  metrics,
  isLoading
}: SystemHealthProps) {
  const [activeTab, setActiveTab] = useState<string>("overview")
  const [selectedMetric, setSelectedMetric] = useState<string>("cpu")
  const [chartType, setChartType] = useState<string>("line")
  const [timeRange, setTimeRange] = useState<string>("24h")

  const gaugeRef = useRef<SVGSVGElement>(null)

  // D3 Gauge Chart
  useEffect(() => {
    if (!gaugeRef.current || !metrics?.summary) return

    const svg = d3.select(gaugeRef.current)
    svg.selectAll("*").remove()

    const width = gaugeRef.current.clientWidth
    const height = gaugeRef.current.clientHeight
    const radius = Math.min(width, height) / 2

    const g = svg.append("g")
      .attr("transform", `translate(${width / 2}, ${height / 2})`)

    // Create gauge background
    const backgroundArc = d3.arc()
      .innerRadius(radius * 0.7)
      .outerRadius(radius * 0.9)
      .startAngle(-Math.PI / 2)
      .endAngle(Math.PI / 2)

    g.append("path")
      .attr("d", backgroundArc as any)
      .style("fill", "#1e293b")

    // Create value arc
    const valueScale = d3.scaleLinear()
      .domain([0, 100])
      .range([-Math.PI / 2, Math.PI / 2])

    const valueArc = d3.arc()
      .innerRadius(radius * 0.7)
      .outerRadius(radius * 0.9)
      .startAngle(-Math.PI / 2)
      .endAngle((d: any) => valueScale(d.value))

    // Determine color based on value
    const getColor = (value: number) => {
      if (value < 50) return "#10b981" // Green
      if (value < 80) return "#f59e0b" // Yellow
      return "#ef4444" // Red
    }

    // Add value arc
    g.append("path")
      .datum({ value: metrics.summary.avgCpuUsage })
      .attr("d", valueArc as any)
      .style("fill", getColor(metrics.summary.avgCpuUsage))

    // Add text
    g.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "0.5em")
      .attr("class", "text-4xl font-bold")
      .text(`${metrics.summary.avgCpuUsage}%`)
      .style("fill", "white")

    g.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "3em")
      .attr("class", "text-sm")
      .text("CPU Usage")
      .style("fill", "var(--muted-foreground)")

    // Add ticks
    const ticks = [0, 25, 50, 75, 100]
    const tickArc = d3.arc()
      .innerRadius(radius * 0.9)
      .outerRadius(radius * 0.95)
      .startAngle((d: any) => valueScale(d) - 0.01)
      .endAngle((d: any) => valueScale(d) + 0.01)

    g.selectAll(".tick")
      .data(ticks)
      .enter()
      .append("path")
      .attr("d", tickArc as any)
      .style("fill", "white")

    g.selectAll(".tick-text")
      .data(ticks)
      .enter()
      .append("text")
      .attr("x", (d: any) => (radius * 1.05) * Math.cos(valueScale(d) - Math.PI / 2))
      .attr("y", (d: any) => (radius * 1.05) * Math.sin(valueScale(d) - Math.PI / 2))
      .attr("text-anchor", "middle")
      .attr("dy", "0.35em")
      .attr("class", "text-xs")
      .text((d: any) => d)
      .style("fill", "var(--muted-foreground)")

  }, [metrics?.summary])

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-background/95 backdrop-blur-sm p-3 border border-border rounded-lg shadow-lg">
          <p className="font-medium">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color || entry.stroke }}>
              {entry.name}: {entry.value} {entry.unit || ''}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  // Get metric display name
  const getMetricDisplayName = (metric: string) => {
    switch (metric) {
      case "cpu": return "CPU Usage"
      case "memory": return "Memory Usage"
      case "database": return "Database Connections"
      case "api": return "API Requests/Min"
      case "response": return "Response Time"
      case "users": return "Active Users"
      default: return metric
    }
  }

  // Get metric data key
  const getMetricDataKey = (metric: string) => {
    switch (metric) {
      case "cpu": return "cpu_usage"
      case "memory": return "memory_usage"
      case "database": return "database_connections"
      case "api": return "api_requests_per_minute"
      case "response": return "average_response_time_ms"
      case "users": return "active_users"
      default: return metric
    }
  }

  // Get metric color
  const getMetricColor = (metric: string) => {
    switch (metric) {
      case "cpu": return "#ef4444"
      case "memory": return "#3b82f6"
      case "database": return "#8b5cf6"
      case "api": return "#10b981"
      case "response": return "#f59e0b"
      case "users": return "#ec4899"
      default: return "#64748b"
    }
  }

  // Get metric unit
  const getMetricUnit = (metric: string) => {
    switch (metric) {
      case "cpu": return "%"
      case "memory": return "%"
      case "database": return ""
      case "api": return "/min"
      case "response": return "ms"
      case "users": return ""
      default: return ""
    }
  }

  // Get health status
  const getHealthStatus = (metric: string, value: number) => {
    switch (metric) {
      case "avgCpuUsage":
        return value < 50 ? "good" : value < 80 ? "warning" : "critical"
      case "avgMemoryUsage":
        return value < 60 ? "good" : value < 85 ? "warning" : "critical"
      case "avgResponseTime":
        return value < 300 ? "good" : value < 500 ? "warning" : "critical"
      default:
        return "good"
    }
  }

  // Get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "good":
        return (
          <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
            <CheckCircle className="h-3 w-3 mr-1" />
            Good
          </Badge>
        )
      case "warning":
        return (
          <Badge variant="outline" className="bg-yellow-500/10 text-yellow-500 border-yellow-500/20">
            <AlertCircle className="h-3 w-3 mr-1" />
            Warning
          </Badge>
        )
      case "critical":
        return (
          <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500/20">
            <AlertCircle className="h-3 w-3 mr-1" />
            Critical
          </Badge>
        )
      default:
        return (
          <Badge variant="outline" className="bg-blue-500/10 text-blue-500 border-blue-500/20">
            <Info className="h-3 w-3 mr-1" />
            Unknown
          </Badge>
        )
    }
  }

  return (
    <motion.div
      className="space-y-6"
      variants={containerVariants}
      initial="hidden"
      animate="show"
    >
      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4">
        <Select value={selectedMetric} onValueChange={setSelectedMetric}>
          <SelectTrigger className="w-[200px]">
            <SelectValue placeholder="Select Metric" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="cpu">CPU Usage</SelectItem>
            <SelectItem value="memory">Memory Usage</SelectItem>
            <SelectItem value="database">Database Connections</SelectItem>
            <SelectItem value="api">API Requests</SelectItem>
            <SelectItem value="response">Response Time</SelectItem>
            <SelectItem value="users">Active Users</SelectItem>
          </SelectContent>
        </Select>

        <Select value={chartType} onValueChange={setChartType}>
          <SelectTrigger className="w-[150px]">
            <SelectValue placeholder="Chart Type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="line">Line Chart</SelectItem>
            <SelectItem value="bar">Bar Chart</SelectItem>
            <SelectItem value="area">Area Chart</SelectItem>
          </SelectContent>
        </Select>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1">
          <TabsList className="grid grid-cols-3 w-[300px] ml-auto">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="metrics">Metrics</TabsTrigger>
            <TabsTrigger value="gauge">Gauge</TabsTrigger>
          </TabsList>
        </Tabs>
      </div>

      {/* Content */}
      <TabsContent value="overview" className="m-0">
        {isLoading || !metrics ? (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
            <Skeleton className="h-[150px] w-full" />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* CPU Usage */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg flex items-center gap-2">
                      <Server className="h-5 w-5 text-red-500" />
                      CPU Usage
                    </CardTitle>
                    {getStatusBadge(getHealthStatus("avgCpuUsage", metrics.summary.avgCpuUsage))}
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{metrics.summary.avgCpuUsage}%</div>
                  <div className="text-sm text-muted-foreground mt-1">Average utilization</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Memory Usage */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg flex items-center gap-2">
                      <Database className="h-5 w-5 text-blue-500" />
                      Memory Usage
                    </CardTitle>
                    {getStatusBadge(getHealthStatus("avgMemoryUsage", metrics.summary.avgMemoryUsage))}
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{metrics.summary.avgMemoryUsage}%</div>
                  <div className="text-sm text-muted-foreground mt-1">Average utilization</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Response Time */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg flex items-center gap-2">
                      <Clock className="h-5 w-5 text-yellow-500" />
                      Response Time
                    </CardTitle>
                    {getStatusBadge(getHealthStatus("avgResponseTime", metrics.summary.avgResponseTime))}
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{metrics.summary.avgResponseTime} ms</div>
                  <div className="text-sm text-muted-foreground mt-1">Average response time</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* API Requests */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Activity className="h-5 w-5 text-green-500" />
                    API Requests
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{metrics.summary.totalRequests.toLocaleString()}</div>
                  <div className="text-sm text-muted-foreground mt-1">Total requests</div>
                  <div className="text-sm text-muted-foreground">Peak: {metrics.summary.peakApiRequests}/min</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Active Users */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Layers className="h-5 w-5 text-pink-500" />
                    Active Users
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">{metrics.summary.avgActiveUsers}</div>
                  <div className="text-sm text-muted-foreground mt-1">Average active users</div>
                </CardContent>
              </Card>
            </motion.div>

            {/* System Status */}
            <motion.div variants={itemVariants}>
              <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <CheckCircle className="h-5 w-5 text-primary" />
                    System Status
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-col gap-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">API Service</span>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
                        Operational
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Database</span>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
                        Operational
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm">AI Models</span>
                      <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
                        Operational
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        )}
      </TabsContent>

      <TabsContent value="metrics" className="m-0">
        {isLoading || !metrics ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">
                {getMetricDisplayName(selectedMetric)} Over Time
              </CardTitle>
              <CardDescription>
                Time series data showing system metrics
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  {chartType === 'line' ? (
                    <LineChart data={metrics.dataPoints}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="timestamp"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Line
                        type="monotone"
                        dataKey={getMetricDataKey(selectedMetric)}
                        name={getMetricDisplayName(selectedMetric)}
                        stroke={getMetricColor(selectedMetric)}
                        strokeWidth={2}
                        dot={{ r: 1 }}
                        activeDot={{ r: 5 }}
                      />
                    </LineChart>
                  ) : chartType === 'bar' ? (
                    <RechartsBarChart data={metrics.dataPoints}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="timestamp"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Bar
                        dataKey={getMetricDataKey(selectedMetric)}
                        name={getMetricDisplayName(selectedMetric)}
                        fill={getMetricColor(selectedMetric)}
                        radius={[4, 4, 0, 0]}
                      />
                    </RechartsBarChart>
                  ) : (
                    <AreaChart data={metrics.dataPoints}>
                      <defs>
                        <linearGradient id={`${selectedMetric}Gradient`} x1="0" y1="0" x2="0" y2="1">
                          <stop
                            offset="5%"
                            stopColor={getMetricColor(selectedMetric)}
                            stopOpacity={0.8}
                          />
                          <stop
                            offset="95%"
                            stopColor={getMetricColor(selectedMetric)}
                            stopOpacity={0.1}
                          />
                        </linearGradient>
                      </defs>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="timestamp"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Area
                        type="monotone"
                        dataKey={getMetricDataKey(selectedMetric)}
                        name={getMetricDisplayName(selectedMetric)}
                        stroke={getMetricColor(selectedMetric)}
                        fillOpacity={1}
                        fill={`url(#${selectedMetric}Gradient)`}
                      />
                    </AreaChart>
                  )}
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="gauge" className="m-0">
        {isLoading || !metrics ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">System Health Gauge</CardTitle>
              <CardDescription>
                Visual representation of system health metrics
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px] flex items-center justify-center">
                <svg ref={gaugeRef} width="400" height="300" />
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>
    </motion.div>
  )
}

================
File: components/observability/tracing-overview.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import {
  Activity,
  AlertCircle,
  ArrowRight,
  CheckCircle,
  Clock,
  Database,
  Layers,
  Maximize2,
  Minimize2,
  RefreshCw,
  Zap
} from "lucide-react"
import {
  AreaChart,
  Area,
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Scatter,
  ScatterChart,
  ZAxis,
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  RadialBarChart,
  RadialBar
} from "recharts"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from "@/components/ui/use-toast"
import { cn } from "@/lib/utils"

interface Trace {
  id: string
  name: string
  startTime: string
  endTime?: string
  duration?: number
  status: string
  userId?: string
  metadata?: any
}

interface SystemMetric {
  timeRange: string
  dataPoints: any[]
  summary: {
    avgCpuUsage: number
    avgMemoryUsage: number
    avgResponseTime: number
    peakApiRequests: number
    totalRequests: number
    avgActiveUsers: number
  }
}

interface ModelPerformance {
  modelId: string
  provider: string
  displayName: string
  timeSeriesData: any[]
  metrics: {
    avgLatency: number
    avgTokensPerSecond: number
    totalRequests: number
    totalTokens: number
    successRate: number
  }
}

interface TracingOverviewProps {
  traces: Trace[]
  isLoading: boolean
  onSelectTrace: (traceId: string) => void
  systemMetrics?: SystemMetric
  modelPerformance?: ModelPerformance[]
}

export function TracingOverview({
  traces,
  isLoading,
  onSelectTrace,
  systemMetrics,
  modelPerformance
}: TracingOverviewProps) {
  const [expanded, setExpanded] = useState<string | null>(null)
  const [activeMetricsTab, setActiveMetricsTab] = useState("system")
  const [hoveredTrace, setHoveredTrace] = useState<string | null>(null)

  // Calculate statistics
  const totalTraces = traces.length
  const successfulTraces = traces.filter(t => t.status === "success").length
  const failedTraces = traces.filter(t => t.status === "error").length
  const avgDuration = traces.length > 0
    ? Math.round(traces.reduce((sum, t) => sum + (t.duration || 0), 0) / traces.length)
    : 0

  // Group traces by type
  const tracesByType = traces.reduce((acc, trace) => {
    const type = trace.name || "unknown"
    if (!acc[type]) acc[type] = []
    acc[type].push(trace)
    return acc
  }, {} as Record<string, Trace[]>)

  // Prepare data for charts
  const statusData = [
    { name: "Success", value: successfulTraces, color: "#10b981" },
    { name: "Failed", value: failedTraces, color: "#ef4444" }
  ]

  const typeData = Object.entries(tracesByType).map(([type, traces]) => ({
    name: type,
    count: traces.length,
    avgDuration: Math.round(traces.reduce((sum, t) => sum + (t.duration || 0), 0) / traces.length)
  }))

  // Prepare model performance data
  const modelData = modelPerformance?.map(model => ({
    name: model.displayName,
    latency: model.metrics.avgLatency,
    tps: model.metrics.avgTokensPerSecond,
    success: model.metrics.successRate,
    requests: model.metrics.totalRequests,
    provider: model.provider
  })) || []

  // Custom tooltip styles
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-background/95 backdrop-blur-sm p-3 border border-border rounded-lg shadow-lg">
          <p className="font-medium">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color || entry.stroke }}>
              {entry.name}: {entry.value} {entry.unit || ''}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  // Color functions
  const getStatusColor = (status: string) => {
    switch (status) {
      case "success": return "bg-green-500/10 text-green-500 border-green-500/20"
      case "error": return "bg-red-500/10 text-red-500 border-red-500/20"
      case "warning": return "bg-yellow-500/10 text-yellow-500 border-yellow-500/20"
      default: return "bg-blue-500/10 text-blue-500 border-blue-500/20"
    }
  }

  const getProviderColor = (provider: string) => {
    switch (provider?.toLowerCase()) {
      case "google": return "#4285F4"
      case "openai": return "#10a37f"
      case "anthropic": return "#b668ff"
      default: return "#64748b"
    }
  }

  return (
    <motion.div
      className="space-y-6"
      variants={containerVariants}
      initial="hidden"
      animate="show"
    >
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <motion.div variants={itemVariants}>
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center gap-2">
                <Layers className="h-5 w-5 text-primary" />
                Total Traces
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <Skeleton className="h-10 w-20" />
              ) : (
                <div className="flex items-end gap-2">
                  <span className="text-3xl font-bold">{totalTraces}</span>
                  <span className="text-muted-foreground text-sm mb-1">traces</span>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={itemVariants}>
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-green-500" />
                Success Rate
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <Skeleton className="h-10 w-20" />
              ) : (
                <div className="flex items-end gap-2">
                  <span className="text-3xl font-bold">
                    {totalTraces > 0 ? Math.round((successfulTraces / totalTraces) * 100) : 0}%
                  </span>
                  <span className="text-muted-foreground text-sm mb-1">
                    ({successfulTraces}/{totalTraces})
                  </span>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={itemVariants}>
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center gap-2">
                <Clock className="h-5 w-5 text-blue-500" />
                Avg Duration
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <Skeleton className="h-10 w-20" />
              ) : (
                <div className="flex items-end gap-2">
                  <span className="text-3xl font-bold">{avgDuration}</span>
                  <span className="text-muted-foreground text-sm mb-1">ms</span>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        <motion.div variants={itemVariants}>
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center gap-2">
                <AlertCircle className="h-5 w-5 text-red-500" />
                Error Rate
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <Skeleton className="h-10 w-20" />
              ) : (
                <div className="flex items-end gap-2">
                  <span className="text-3xl font-bold">
                    {totalTraces > 0 ? Math.round((failedTraces / totalTraces) * 100) : 0}%
                  </span>
                  <span className="text-muted-foreground text-sm mb-1">
                    ({failedTraces}/{totalTraces})
                  </span>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Status Distribution */}
        <motion.div variants={itemVariants}>
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm h-[350px]">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Trace Status Distribution</CardTitle>
              <CardDescription>Success vs. error rate visualization</CardDescription>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="h-[250px] flex items-center justify-center">
                  <Skeleton className="h-[200px] w-[200px] rounded-full" />
                </div>
              ) : (
                <ResponsiveContainer width="100%" height={250}>
                  <PieChart>
                    <defs>
                      <linearGradient id="successGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="0%" stopColor="#10b981" stopOpacity={1} />
                        <stop offset="100%" stopColor="#059669" stopOpacity={1} />
                      </linearGradient>
                      <linearGradient id="errorGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="0%" stopColor="#ef4444" stopOpacity={1} />
                        <stop offset="100%" stopColor="#dc2626" stopOpacity={1} />
                      </linearGradient>
                    </defs>
                    <Pie
                      data={statusData}
                      cx="50%"
                      cy="50%"
                      innerRadius={60}
                      outerRadius={80}
                      paddingAngle={5}
                      dataKey="value"
                      labelLine={false}
                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    >
                      {statusData.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={index === 0 ? "url(#successGradient)" : "url(#errorGradient)"}
                          stroke="rgba(255,255,255,0.2)"
                          strokeWidth={2}
                        />
                      ))}
                    </Pie>
                    <Tooltip content={<CustomTooltip />} />
                  </PieChart>
                </ResponsiveContainer>
              )}
            </CardContent>
          </Card>
        </motion.div>

        {/* Trace Types */}
        <motion.div variants={itemVariants}>
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm h-[350px]">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Trace Types</CardTitle>
              <CardDescription>Distribution of trace types and average duration</CardDescription>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="h-[250px] flex items-center justify-center">
                  <Skeleton className="h-[200px] w-full" />
                </div>
              ) : (
                <ResponsiveContainer width="100%" height={250}>
                  <BarChart data={typeData} barSize={20}>
                    <defs>
                      <linearGradient id="countGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="0%" stopColor="#3b82f6" stopOpacity={0.8} />
                        <stop offset="100%" stopColor="#2563eb" stopOpacity={0.8} />
                      </linearGradient>
                      <linearGradient id="durationGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="0%" stopColor="#8b5cf6" stopOpacity={0.8} />
                        <stop offset="100%" stopColor="#7c3aed" stopOpacity={0.8} />
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                    <XAxis
                      dataKey="name"
                      tick={{ fill: 'var(--muted-foreground)' }}
                      axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                    />
                    <YAxis
                      yAxisId="left"
                      orientation="left"
                      stroke="#3b82f6"
                      tick={{ fill: 'var(--muted-foreground)' }}
                      axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                    />
                    <YAxis
                      yAxisId="right"
                      orientation="right"
                      stroke="#8b5cf6"
                      tick={{ fill: 'var(--muted-foreground)' }}
                      axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                    />
                    <Tooltip content={<CustomTooltip />} />
                    <Legend />
                    <Bar
                      yAxisId="left"
                      dataKey="count"
                      name="Count"
                      fill="url(#countGradient)"
                      radius={[4, 4, 0, 0]}
                    />
                    <Bar
                      yAxisId="right"
                      dataKey="avgDuration"
                      name="Avg Duration (ms)"
                      fill="url(#durationGradient)"
                      radius={[4, 4, 0, 0]}
                    />
                  </BarChart>
                </ResponsiveContainer>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </motion.div>
  )
}

================
File: components/tools/tool-card.tsx
================
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Badge } from "@/components/ui/badge"
import type { Tool } from "@/types/tools"
import { MoreHorizontal, Play, Edit, Trash2, Code, Database, Globe, FileText, Settings } from "lucide-react"
import { EditToolDialog } from "@/components/tools/edit-tool-dialog"
import { ExecuteToolDialog } from "@/components/tools/execute-tool-dialog"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"

interface ToolCardProps {
  tool: Tool
  onDelete: (id: string) => Promise<void>
  onUpdate: (tool: Tool) => Promise<void>
  onExecute: (id: string, params: Record<string, any>) => Promise<any>
}

export function ToolCard({ tool, onDelete, onUpdate, onExecute }: ToolCardProps) {
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isExecuteDialogOpen, setIsExecuteDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "api":
        return <Code className="h-5 w-5 text-blue-400" />
      case "data":
        return <Database className="h-5 w-5 text-purple-400" />
      case "web":
        return <Globe className="h-5 w-5 text-green-400" />
      case "file":
        return <FileText className="h-5 w-5 text-yellow-400" />
      default:
        return <Settings className="h-5 w-5 text-gray-400" />
    }
  }

  const handleDelete = async () => {
    try {
      setIsDeleting(true)
      await onDelete(tool.id)
      setIsDeleteDialogOpen(false)
    } catch (error) {
      console.error("Error deleting tool:", error)
    } finally {
      setIsDeleting(false)
    }
  }

  return (
    <>
      <Card className="bg-gray-900 border-gray-800 hover:border-gray-700 transition-all duration-200">
        <CardHeader className="pb-2">
          <div className="flex justify-between items-start">
            <div className="flex items-center gap-2">
              {getCategoryIcon(tool.category)}
              <Badge variant={tool.status === "active" ? "default" : "secondary"} className="text-xs">
                {tool.status === "active" ? "Active" : "Inactive"}
              </Badge>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="h-8 w-8">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="bg-gray-950 border-gray-800">
                <DropdownMenuLabel>Actions</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setIsExecuteDialogOpen(true)}>
                  <Play className="h-4 w-4 mr-2" />
                  Execute
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setIsEditDialogOpen(true)}>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => setIsDeleteDialogOpen(true)}
                  className="text-red-500 focus:text-red-500"
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          <CardTitle className="text-lg font-bold text-white mt-2">{tool.name}</CardTitle>
          <CardDescription className="text-gray-400 line-clamp-2">{tool.description}</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-xs text-gray-500">Created: {new Date(tool.createdAt).toLocaleDateString()}</div>
        </CardContent>
        <CardFooter className="flex justify-between pt-2">
          <Button variant="outline" size="sm" onClick={() => setIsEditDialogOpen(true)}>
            <Edit className="h-3.5 w-3.5 mr-1.5" />
            Edit
          </Button>
          <Button variant="default" size="sm" onClick={() => setIsExecuteDialogOpen(true)}>
            <Play className="h-3.5 w-3.5 mr-1.5" />
            Execute
          </Button>
        </CardFooter>
      </Card>

      <EditToolDialog
        isOpen={isEditDialogOpen}
        onClose={() => setIsEditDialogOpen(false)}
        tool={tool}
        onUpdateTool={onUpdate}
      />

      <ExecuteToolDialog
        isOpen={isExecuteDialogOpen}
        onClose={() => setIsExecuteDialogOpen(false)}
        tool={tool}
        onExecuteTool={onExecute}
      />

      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent className="bg-gray-950 border-gray-800">
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the tool "{tool.name}" and remove it from our
              servers.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={(e) => {
                e.preventDefault()
                handleDelete()
              }}
              disabled={isDeleting}
              className="bg-red-600 hover:bg-red-700 focus:ring-red-600"
            >
              {isDeleting ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}

================
File: components/tools/tool-executor.tsx
================
"use client"

import { useState } from "react"
import { Play, Loader2, FileJson } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { useToolExecutor } from "@/hooks/use-executor"

interface ToolExecutorProps {
  tool: {
    id: string
    name: string
    description: string
    parameters_schema: string
  }
  onExecutionComplete?: (result: any) => void
}

export function ToolExecutor({ tool, onExecutionComplete }: ToolExecutorProps) {
  const [parameters, setParameters] = useState<Record<string, string>>({})
  const [result, setResult] = useState<any>(null)

  // Use our custom hook for tool execution
  const { executeTool, isExecuting } = useToolExecutor({
    toolId: tool.id,
    onSuccess: (data) => {
      setResult(data.result)
      if (onExecutionComplete) {
        onExecutionComplete(data.result)
      }
    }
  })

  // Parse the schema
  let schema: any = {}
  try {
    schema = JSON.parse(tool.parameters_schema)
  } catch (error) {
    console.error("Invalid schema:", error)
  }

  const handleParameterChange = (key: string, value: string) => {
    setParameters((prev) => ({
      ...prev,
      [key]: value,
    }))
  }

  const executeToolAction = async () => {
    setResult(null)
    try {
      // Use our custom hook to execute the tool
      await executeTool(parameters)
    } catch (error) {
      console.error("Error executing tool:", error)
      // Error handling is done in the hook
    }
  }

  // Check if all required parameters are filled
  const requiredParams = schema.required || []
  const isFormValid = requiredParams.every((param: string) => parameters[param] && parameters[param].trim() !== "")

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Execute: {tool.name}</span>
          <Badge variant="outline">{schema.type || "object"}</Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="text-sm text-muted-foreground mb-4">{tool.description}</div>

        {schema.properties &&
          Object.entries(schema.properties).map(([key, prop]: [string, any]) => (
            <div key={key} className="space-y-2">
              <div className="flex items-center">
                <label htmlFor={`param-${key}`} className="text-sm font-medium">
                  {key}
                  {requiredParams.includes(key) && <span className="text-red-500 ml-1">*</span>}
                </label>
                {prop.type && (
                  <Badge variant="outline" className="ml-2">
                    {prop.type}
                  </Badge>
                )}
              </div>
              {prop.description && <div className="text-xs text-muted-foreground">{prop.description}</div>}
              <Input
                id={`param-${key}`}
                value={parameters[key] || ""}
                onChange={(e) => handleParameterChange(key, e.target.value)}
                placeholder={`Enter ${key}...`}
              />
            </div>
          ))}

        {result && (
          <div className="mt-4 space-y-2">
            <div className="font-medium flex items-center">
              <FileJson className="mr-2 h-4 w-4" />
              Result
            </div>
            <pre className="bg-muted p-3 rounded-md overflow-auto text-sm">{JSON.stringify(result, null, 2)}</pre>
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button onClick={executeToolAction} disabled={isExecuting || !isFormValid} className="w-full">
          {isExecuting ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Executing...
            </>
          ) : (
            <>
              <Play className="mr-2 h-4 w-4" />
              Execute Tool
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  )
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        gradient: "text-white border-none bg-gradient-to-r from-blue-500 to-violet-500 hover:from-blue-600 hover:to-violet-600 shadow-sm hover:shadow transition-shadow duration-200",
        "gradient-subtle": "text-foreground border-none bg-gradient-to-r from-blue-100/50 to-violet-100/50 dark:from-blue-900/30 dark:to-violet-900/30 hover:from-blue-200/50 hover:to-violet-200/50 dark:hover:from-blue-900/40 dark:hover:to-violet-900/40",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        md: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-9 w-9",
        "icon-sm": "h-7 w-7 rounded-md",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/data-table.tsx
================
"use client"

import { useState } from "react"
import {
  type ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  type SortingState,
  useReactTable,
  type ColumnFiltersState,
  getFilteredRowModel,
} from "@tanstack/react-table"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight, Search } from "lucide-react"
import { cn } from "@/lib/utils"

export interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  searchKey?: string
  searchPlaceholder?: string
  isLoading?: boolean
  pagination?: boolean
  className?: string
  pageSize?: number
}

export function DataTable<TData, TValue>({
  columns,
  data,
  searchKey,
  searchPlaceholder = "Search...",
  isLoading = false,
  pagination = true,
  className,
  pageSize = 10,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
    initialState: {
      pagination: {
        pageSize,
      },
    },
  })

  return (
    <div className={cn("space-y-4", className)}>
      {searchKey && (
        <div className="flex items-center">
          <div className="relative flex-1 max-w-sm">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder={searchPlaceholder}
              value={(table.getColumn(searchKey)?.getFilterValue() as string) ?? ""}
              onChange={(event) => table.getColumn(searchKey)?.setFilterValue(event.target.value)}
              className="pl-8"
            />
          </div>
        </div>
      )}
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {isLoading ? (
              Array.from({ length: 5 }).map((_, index) => (
                <TableRow key={`loading-${index}`}>
                  {columns.map((_, colIndex) => (
                    <TableCell key={`loading-cell-${colIndex}`}>
                      <div className="h-6 w-full animate-pulse bg-muted rounded"></div>
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && "selected"}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {pagination && table.getRowModel().rows?.length > 0 && (
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            Showing {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1} to{" "}
            {Math.min(
              (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,
              table.getFilteredRowModel().rows.length,
            )}{" "}
            of {table.getFilteredRowModel().rows.length} entries
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.setPageIndex(0)}
              disabled={!table.getCanPreviousPage()}
            >
              <ChevronsLeft className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.previousPage()}
              disabled={!table.getCanPreviousPage()}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>
              <ChevronRight className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => table.setPageIndex(table.getPageCount() - 1)}
              disabled={!table.getCanNextPage()}
            >
              <ChevronsRight className="h-4 w-4" />
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

================
File: components/ui/database-status.tsx
================
"use client"

import { useState, useEffect } from "react"
import { Database, CheckCircle, XCircle, Loader2 } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Badge } from "@/components/ui/badge"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"

interface DatabaseStatusProps {
  showLabels?: boolean
  className?: string
}

interface SystemStatus {
  status: string
  timestamp: string
  supabase: boolean
  libsql: boolean
  environment: string
}

export function DatabaseStatus({ showLabels = false, className = "" }: DatabaseStatusProps) {
  const [supabaseStatus, setSupabaseStatus] = useState<"loading" | "connected" | "error">("loading")
  const [libsqlStatus, setLibsqlStatus] = useState<"loading" | "connected" | "error">("loading")
  const [lastChecked, setLastChecked] = useState<Date | null>(null)

  // Use the standardized hook for fetching system status
  const {
    data: statusData,
    isLoading,
    refresh: checkStatus
  } = useSupabaseFetch<SystemStatus>({
    endpoint: "/api/system/status",
    resourceName: "System Status",
    dataKey: "status",
  })

  // Update status when data changes
  useEffect(() => {
    if (statusData && statusData.length > 0) {
      const data = statusData[0]
      setSupabaseStatus(data.supabase ? "connected" : "error")
      setLibsqlStatus(data.libsql ? "connected" : "error")
      setLastChecked(new Date())
    }
  }, [statusData])

  // Check status every 5 minutes
  useEffect(() => {
    const interval = setInterval(() => {
      checkStatus()
    }, 5 * 60 * 1000)

    return () => clearInterval(interval)
  }, [])

  const getStatusIcon = (status: "loading" | "connected" | "error") => {
    switch (status) {
      case "loading":
        return <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
      case "connected":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case "error":
        return <XCircle className="h-4 w-4 text-red-500" />
    }
  }

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger className={`flex items-center gap-2 ${className}`}>
          <div className="flex items-center gap-1">
            <Database className="h-4 w-4 text-muted-foreground" />
            {showLabels && <span className="text-sm">Databases</span>}
          </div>
          <div className="flex gap-1">
            {getStatusIcon(supabaseStatus)}
            {getStatusIcon(libsqlStatus)}
          </div>
        </TooltipTrigger>
        <TooltipContent>
          <div className="space-y-2 p-1">
            <div className="flex items-center justify-between gap-2">
              <span className="text-sm">Supabase:</span>
              <Badge variant={supabaseStatus === "connected" ? "default" : "destructive"}>
                {supabaseStatus === "loading" ? "Checking..." : supabaseStatus === "connected" ? "Connected" : "Error"}
              </Badge>
            </div>
            <div className="flex items-center justify-between gap-2">
              <span className="text-sm">LibSQL:</span>
              <Badge variant={libsqlStatus === "connected" ? "default" : "destructive"}>
                {libsqlStatus === "loading" ? "Checking..." : libsqlStatus === "connected" ? "Connected" : "Error"}
              </Badge>
            </div>
            {lastChecked && (
              <div className="text-xs text-muted-foreground pt-1">Last checked: {lastChecked.toLocaleTimeString()}</div>
            )}
          </div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
}

================
File: components/agents/agent-executor.tsx
================
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Send, Loader2, Bot } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useAgentExecutor } from "@/hooks/use-executor"

export interface Message {
  role: "user" | "assistant" | "system"
  content: string
  toolCall?: {
    name: string
    parameters: Record<string, any>
  }
  toolResult?: any
}

export interface AgentExecutorProps {
  agent: {
    id: string
    name: string
    description: string
    model_id: string
    tool_ids: string[]
    system_prompt?: string
    model?: string
    tools?: string[]
  }
  onExecutionComplete?: (messages: Message[]) => void
}

export function AgentExecutor({ agent, onExecutionComplete }: AgentExecutorProps) {
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content: `Hello! I'm ${agent.name}. How can I help you today?`,
    },
  ])
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Use our custom hook for agent execution
  const { executeAgent, isExecuting } = useAgentExecutor({
    agentId: agent.id,
    onError: () => {
      // Add an error message
      setMessages((prev) => [
        ...prev,
        {
          role: "system",
          content: "Sorry, I encountered an error while processing your request.",
        },
      ])
    }
  })

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!input.trim() || isExecuting) return

    const userMessage: Message = {
      role: "user",
      content: input,
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")

    try {
      // Use our custom hook to execute the agent
      const data = await executeAgent(input, messages)

      // Add the agent's response to messages
      setMessages((prev) => [...prev, ...data.messages])

      if (onExecutionComplete) {
        onExecutionComplete([...messages, userMessage, ...data.messages])
      }
    } catch (error) {
      console.error("Error executing agent:", error)
      // Error handling is done in the hook
    }
  }

  return (
    <Card className="flex flex-col h-full">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center">
            <Bot className="mr-2 h-5 w-5" />
            {agent.name}
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="outline">{agent.model || "Unknown Model"}</Badge>
            {agent.tools && agent.tools.length > 0 && <Badge variant="secondary">{agent.tools.length} Tools</Badge>}
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent className="flex-1 overflow-hidden p-0">
        <ScrollArea className="h-full max-h-[500px] p-4">
          <div className="space-y-4">
            {messages.map((message, index) => (
              <div key={index} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`flex max-w-[80%] ${message.role === "user" ? "flex-row-reverse" : ""}`}>
                  <Avatar className="h-8 w-8">
                    <AvatarFallback>
                      {message.role === "user" ? "U" : message.role === "system" ? "S" : "A"}
                    </AvatarFallback>
                    <AvatarImage
                      src={
                        message.role === "user"
                          ? "/placeholder.svg?height=32&width=32"
                          : "/placeholder.svg?height=32&width=32&text=AI"
                      }
                    />
                  </Avatar>
                  <div
                    className={`mx-2 rounded-lg p-3 ${
                      message.role === "user"
                        ? "bg-primary text-primary-foreground"
                        : message.role === "system"
                          ? "bg-muted/50 border"
                          : "bg-muted"
                    }`}
                  >
                    <div className="whitespace-pre-wrap">{message.content}</div>

                    {message.toolCall && (
                      <div className="mt-2 p-2 border rounded-md bg-background/80">
                        <div className="text-xs font-medium mb-1">Using tool: {message.toolCall.name}</div>
                        <div className="text-xs overflow-x-auto">
                          <pre className="text-xs">{JSON.stringify(message.toolCall.parameters, null, 2)}</pre>
                        </div>
                      </div>
                    )}

                    {message.toolResult && (
                      <div className="mt-2 p-2 border rounded-md bg-background/80">
                        <div className="text-xs font-medium mb-1">Tool result:</div>
                        <div className="text-xs overflow-x-auto">
                          <pre className="text-xs">{JSON.stringify(message.toolResult, null, 2)}</pre>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />

            {isExecuting && (
              <div className="flex justify-start">
                <div className="flex max-w-[80%]">
                  <Avatar className="h-8 w-8">
                    <AvatarFallback>A</AvatarFallback>
                    <AvatarImage src="/placeholder.svg?height=32&width=32&text=AI" />
                  </Avatar>
                  <div className="mx-2 rounded-lg p-3 bg-muted">
                    <div className="flex items-center">
                      <Loader2 className="h-4 w-4 animate-spin mr-2" />
                      <span>Thinking...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
      </CardContent>
      <CardFooter className="border-t p-3">
        <form onSubmit={handleSubmit} className="flex w-full gap-2">
          <Input
            placeholder="Type your message..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isExecuting}
            className="flex-1"
          />
          <Button type="submit" disabled={isExecuting || !input.trim()}>
            {isExecuting ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
            <span className="sr-only">Send</span>
          </Button>
        </form>
      </CardFooter>
    </Card>
  )
}

================
File: components/appBuilder/canvasDisplay.tsx
================
import React from 'react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import { json } from '@codemirror/lang-json';
import { vscodeDark } from '@uiw/codemirror-theme-vscode';

export interface CanvasDisplayProps {
  mode?: 'terminal' | 'canvas' | 'code';
  content?: string;
  className?: string;
}

// Define components or rendering logic for each mode
const TerminalDisplay: React.FC<{ content: string }> = ({ content }) => (
  <pre className="whitespace-pre-wrap break-words">{content}</pre>
);

const CodeDisplay: React.FC<{ content: string }> = ({ content }) => (
  <CodeMirror
    value={content}
    extensions={[javascript(), json()]} // Add relevant language extensions
    theme={vscodeDark} // Use a theme
    editable={false} // Make it read-only for display
    basicSetup={{
      lineNumbers: true,
      foldGutter: true,
      drawSelection: false,
      dropCursor: false,
      allowMultipleSelections: false,
      indentOnInput: false,
      syntaxHighlighting: true,
      bracketMatching: true,
      closeBrackets: true,
      autocompletion: false,
      rectangularSelection: false,
      crosshairCursor: false,
      highlightActiveLine: false,
      highlightActiveLineGutter: false,
    }}
    style={{
      fontSize: '0.875rem', // text-sm
      fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace', // font-mono
    }}
  />
);

const CanvasPlaceholder: React.FC = () => (
  <div className="flex items-center justify-center h-full text-gray-500">Canvas content goes here</div>
);

// Map modes to their respective display components/logic
const displayModeMap: Record<string, React.FC<any>> = {
  terminal: TerminalDisplay,
  code: CodeDisplay,
  canvas: CanvasPlaceholder, // Use a placeholder for now
};

export function CanvasDisplay({ mode = 'terminal', content = '', className }: CanvasDisplayProps) {
  const DisplayComponent = displayModeMap[mode] || TerminalDisplay; // Default to TerminalDisplay

  return (
    <div className={`border rounded-md bg-black text-white p-2 font-mono min-h-[200px] ${className || ''}`}>
      <div className="text-xs mb-1 opacity-60">{mode.toUpperCase()} DISPLAY</div>
      {/* CodeMirror handles its own padding/styling, so we might adjust the container padding */}
      <div className={mode === 'code' ? '' : 'flex-1 overflow-y-auto'}>
         <DisplayComponent content={content} />
      </div>
    </div>
  );
}

export default CanvasDisplay;

================
File: components/appBuilder/chatBar.tsx
================
import React, { useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Send } from 'lucide-react';
import { useChat, Message as AIChatMessage } from '@ai-sdk/react'; // Import useChat and Message type

// Re-export Message type for external use if needed, or align with AI SDK's type
export type Message = AIChatMessage
export interface ChatBarProps {
  apiEndpoint?: string;
  initialMessages?: Message[];
  modelId?: string; // Note: model, provider, systemPrompt, tools might be configured server-side with AI SDK
  provider?: string;
  systemPrompt?: string;
  tools?: string[];
  className?: string;
  onMessageSend?: (assistantMessage: string, fullResponse?: Message) => void;
}

// Remove generateId as AI SDK handles IDs

export function ChatBar({
  apiEndpoint = '/api/ai-sdk/chat', // Default API endpoint for AI SDK
  initialMessages = [],
  // modelId, provider, systemPrompt, tools are typically configured on the API route
  // but we can pass them as parameters if the API route supports it.
  // For simplicity with useChat, we'll rely on the API route configuration
  // or pass them as query parameters/body if the backend is set up for it.
  // The useChat hook primarily takes the API endpoint and initial messages.
  className,
  onMessageSend,
}: ChatBarProps) {
  const { messages, input, handleInputChange, handleSubmit, isLoading, append } = useChat({
    api: apiEndpoint,
    initialMessages: initialMessages as AIChatMessage[], // Cast to AI SDK's Message type
    // Additional parameters like model, provider, etc. might need to be passed
    // via the body or query parameters depending on your API route implementation.
    // useChat's `append` function allows passing options, including body.
    // For now, we'll keep it simple and assume the API route handles model/provider config.
    onFinish: (message) => {
      // onFinish is called when the assistant message is complete
      if (onMessageSend && message.role === 'assistant') {
        onMessageSend(message.content, message as Message);
      }
    },
    onError: (error) => {
      console.error('AI SDK Chat Error:', error);
      // useChat automatically adds error messages to the messages array
    }
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]); // messages state is now managed by useChat

  // Modify handleSubmit to use append from useChat
  const handleSend = async (e: React.FormEvent | React.KeyboardEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    // useChat's append function sends the user message and handles the assistant response
    await append({
      role: 'user',
      content: input,
    });

    // useChat manages the input state internally, so no need to clear manually here
    // setInput(''); // This line is removed
  };


  return (
    <div className={className}>
      <div className="flex-1 overflow-y-auto p-2 space-y-2 max-h-72">
        {messages.map((m: AIChatMessage, idx: number) => ( // Use AIChatMessage type from useChat
          <div key={m.id || idx} className={`text-sm ${m.role === 'user' ? 'text-right' : 'text-left'}`}>{m.content}</div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <form onSubmit={handleSend} className="flex gap-2 items-end p-2 border-t bg-background">
        <Textarea
          value={input} // input state is managed by useChat
          onChange={handleInputChange} // handleInputChange is provided by useChat
          placeholder="Type a message..."
          className="min-h-[40px] max-h-[120px] flex-1 resize-none"
          disabled={isLoading} // isLoading state is managed by useChat
          onKeyPress={(e) => { // Added support for sending on Enter key press
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              handleSend(e);
            }
          }}
        />
        <Button type="submit" size="icon" disabled={isLoading || input.trim() === ''}>
          <Send className="h-4 w-4" />
        </Button>
      </form>
    </div>
  );
}

export default ChatBar;

================
File: components/chat/audio-player.tsx
================
"use client"

import { useState, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Download, Play, Pause, SkipBack, SkipForward, Volume2, VolumeX, Music } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { cn } from "@/lib/utils"

export interface AudioPlayerProps {
  title?: string
  src: string
  waveform?: boolean
  className?: string
}

export function AudioPlayer({ 
  title, 
  src,
  waveform = true,
  className
}: AudioPlayerProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [playing, setPlaying] = useState(false)
  const [currentTime, setCurrentTime] = useState(0)
  const [duration, setDuration] = useState(0)
  const [volume, setVolume] = useState(0.8)
  const [muted, setMuted] = useState(false)
  const [audioContext, setAudioContext] = useState<AudioContext | null>(null)
  const [analyser, setAnalyser] = useState<AnalyserNode | null>(null)
  const [audioData, setAudioData] = useState<Uint8Array | null>(null)
  
  const audioRef = useRef<HTMLAudioElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const animationRef = useRef<number | null>(null)
  
  // Initialize audio context and analyser
  useEffect(() => {
    if (typeof window !== 'undefined' && waveform) {
      const AudioContext = window.AudioContext || (window as any).webkitAudioContext
      const context = new AudioContext()
      const analyserNode = context.createAnalyser()
      analyserNode.fftSize = 256
      const bufferLength = analyserNode.frequencyBinCount
      const dataArray = new Uint8Array(bufferLength)
      
      setAudioContext(context)
      setAnalyser(analyserNode)
      setAudioData(dataArray)
      
      return () => {
        if (context.state !== 'closed') {
          context.close()
        }
      }
    }
  }, [waveform])
  
  // Connect audio element to analyser when both are available
  useEffect(() => {
    if (audioRef.current && audioContext && analyser && waveform) {
      const source = audioContext.createMediaElementSource(audioRef.current)
      source.connect(analyser)
      analyser.connect(audioContext.destination)
    }
  }, [audioRef.current, audioContext, analyser, waveform])
  
  // Draw waveform visualization
  const drawWaveform = () => {
    if (!analyser || !audioData || !canvasRef.current) return
    
    animationRef.current = requestAnimationFrame(drawWaveform)
    
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    
    analyser.getByteFrequencyData(audioData)
    
    const width = canvas.width
    const height = canvas.height
    const barWidth = width / audioData.length
    
    ctx.clearRect(0, 0, width, height)
    
    // Get theme colors
    const isDarkMode = document.documentElement.classList.contains('dark')
    const primaryColor = isDarkMode ? '#8b5cf6' : '#6d28d9' // purple-500/600
    const secondaryColor = isDarkMode ? '#4c1d95' : '#ddd6fe' // purple-900/purple-100
    
    // Create gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, height)
    gradient.addColorStop(0, primaryColor)
    gradient.addColorStop(1, secondaryColor)
    
    for (let i = 0; i < audioData.length; i++) {
      const barHeight = (audioData[i] / 255) * height
      
      ctx.fillStyle = gradient
      ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight)
    }
  }
  
  // Start/stop visualization based on playing state
  useEffect(() => {
    if (playing && waveform) {
      drawWaveform()
    } else if (animationRef.current) {
      cancelAnimationFrame(animationRef.current)
    }
    
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
    }
  }, [playing, waveform])
  
  // Handle audio events
  useEffect(() => {
    const audio = audioRef.current
    if (!audio) return
    
    const handleTimeUpdate = () => {
      setCurrentTime(audio.currentTime)
    }
    
    const handleLoadedMetadata = () => {
      setDuration(audio.duration)
    }
    
    const handleEnded = () => {
      setPlaying(false)
      setCurrentTime(0)
      audio.currentTime = 0
    }
    
    audio.addEventListener('timeupdate', handleTimeUpdate)
    audio.addEventListener('loadedmetadata', handleLoadedMetadata)
    audio.addEventListener('ended', handleEnded)
    
    return () => {
      audio.removeEventListener('timeupdate', handleTimeUpdate)
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata)
      audio.removeEventListener('ended', handleEnded)
    }
  }, [])
  
  // Handle play/pause
  const togglePlay = () => {
    if (!audioRef.current) return
    
    if (playing) {
      audioRef.current.pause()
    } else {
      // Resume AudioContext if it was suspended
      if (audioContext?.state === 'suspended') {
        audioContext.resume()
      }
      audioRef.current.play()
    }
    
    setPlaying(!playing)
  }
  
  // Handle seek
  const handleSeek = (value: number[]) => {
    if (!audioRef.current) return
    
    const newTime = value[0]
    audioRef.current.currentTime = newTime
    setCurrentTime(newTime)
  }
  
  // Handle volume change
  const handleVolumeChange = (value: number[]) => {
    if (!audioRef.current) return
    
    const newVolume = value[0]
    audioRef.current.volume = newVolume
    setVolume(newVolume)
    
    if (newVolume === 0) {
      setMuted(true)
    } else if (muted) {
      setMuted(false)
    }
  }
  
  // Handle mute toggle
  const toggleMute = () => {
    if (!audioRef.current) return
    
    if (muted) {
      audioRef.current.volume = volume
      setMuted(false)
    } else {
      audioRef.current.volume = 0
      setMuted(true)
    }
  }
  
  // Format time (seconds to MM:SS)
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60)
    const seconds = Math.floor(time % 60)
    return `${minutes}:${seconds.toString().padStart(2, '0')}`
  }
  
  // Handle download
  const handleDownload = () => {
    const link = document.createElement('a')
    link.href = src
    link.download = title ? `${title.replace(/\s+/g, '-').toLowerCase()}.mp3` : 'audio.mp3'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  return (
    <div 
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-purple-800 to-indigo-800 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <Music className="h-4 w-4" />
          <span className="font-medium">{title || "Audio Player"}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download audio</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>
      
      <div className={cn(
        "p-4",
        expanded ? "flex-1" : ""
      )}>
        {/* Waveform visualization */}
        {waveform && (
          <div className={cn(
            "mb-4 bg-muted/30 rounded-md overflow-hidden",
            expanded ? "h-[200px]" : "h-[100px]"
          )}>
            <canvas 
              ref={canvasRef} 
              width={expanded ? 800 : 400} 
              height={expanded ? 200 : 100}
              className="w-full h-full"
            />
          </div>
        )}
        
        {/* Audio element (hidden) */}
        <audio ref={audioRef} src={src} preload="metadata" />
        
        {/* Controls */}
        <div className="space-y-2">
          {/* Time slider */}
          <div className="flex items-center gap-2">
            <span className="text-xs text-muted-foreground w-10 text-right">
              {formatTime(currentTime)}
            </span>
            <Slider
              value={[currentTime]}
              max={duration || 100}
              step={0.1}
              onValueChange={handleSeek}
              className="flex-1"
            />
            <span className="text-xs text-muted-foreground w-10">
              {formatTime(duration)}
            </span>
          </div>
          
          {/* Playback controls */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="icon-sm"
                className="h-8 w-8 rounded-full"
                onClick={() => {
                  if (audioRef.current) {
                    audioRef.current.currentTime = 0
                    setCurrentTime(0)
                  }
                }}
              >
                <SkipBack className="h-4 w-4" />
              </Button>
              <Button
                variant="secondary"
                size="icon"
                className="h-10 w-10 rounded-full"
                onClick={togglePlay}
              >
                {playing ? <Pause className="h-5 w-5" /> : <Play className="h-5 w-5 ml-0.5" />}
              </Button>
              <Button
                variant="ghost"
                size="icon-sm"
                className="h-8 w-8 rounded-full"
                onClick={() => {
                  if (audioRef.current && duration) {
                    audioRef.current.currentTime = Math.min(duration, currentTime + 10)
                  }
                }}
              >
                <SkipForward className="h-4 w-4" />
              </Button>
            </div>
            
            {/* Volume control */}
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="icon-sm"
                className="h-8 w-8 rounded-full"
                onClick={toggleMute}
              >
                {muted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
              </Button>
              <Slider
                value={[muted ? 0 : volume]}
                max={1}
                step={0.01}
                onValueChange={handleVolumeChange}
                className="w-24"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: components/chat/chat-message.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Bot, Copy, Check, User, FileText } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { GradientCard } from "@/components/ui/gradient-card"
import { CodeBlock } from "./code-block"
import { MermaidDiagram } from "./mermaid-diagram"
import { ImageDisplay } from "./image-display"
import { renderContent } from "./ai-sdk-chatHelper"

export interface ChatMessageProps {
  message: {
    id: string
    role: "user" | "assistant" | "system" | "tool"
    content: string
    attachments?: Array<{
      type: string
      name: string
      url?: string
    }>
    timestamp?: string
    isLoading?: boolean
  }
}

export function ChatMessage({ message }: ChatMessageProps) {
  const [copied, setCopied] = useState(false)

  const handleCopy = async () => {
    await navigator.clipboard.writeText(message.content)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  // Render message content with support for code blocks, mermaid diagrams, etc.
  const renderMessageContent = (content: string) => {
    // Split content by code blocks
    const parts = content.split(/(```[\s\S]*?```)/g)

    return parts.map((part, index) => {
      // Check if this part is a code block
      if (part.startsWith("```") && part.endsWith("```")) {
        // Extract language and code
        const match = part.match(/```(\w+)?\s*([\s\S]*?)```/)

        if (match) {
          const language = match[1] || "text"
          const code = match[2]

          // Check if it's a mermaid diagram
          if (language === "mermaid") {
            return <MermaidDiagram key={index} code={code} />
          }

          // Regular code block
          return <CodeBlock key={index} language={language} code={code} />
        }
      }

      // Regular text
      return (
        <p key={index} className="whitespace-pre-wrap">
          {part}
        </p>
      )
    })
  }

  // Determine gradient colors based on role
  const getGradientColors = () => {
    switch (message.role) {
      case "assistant":
        return {
          from: "from-blue-500",
          to: "to-violet-500",
        }
      case "user":
        return {
          from: "from-emerald-500",
          to: "to-teal-500",
        }
      case "system":
        return {
          from: "from-amber-500",
          to: "to-orange-500",
        }
      default:
        return {
          from: "from-gray-500",
          to: "to-gray-600",
        }
    }
  }

  const { from, to } = getGradientColors()

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.3 }}
    >
      <GradientCard 
        variant="subtle" 
        gradientFrom={from} 
        gradientTo={to}
        className={cn(
          "p-0 overflow-hidden",
          message.role === "user" ? "ml-12" : "mr-12"
        )}
      >
        <div className="p-4">
          <div className="flex items-start gap-4">
            {/* Avatar */}
            <div 
              className={cn(
                "flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center",
                message.role === "assistant" 
                  ? "bg-gradient-to-br from-blue-500 to-violet-500" 
                  : message.role === "user"
                    ? "bg-gradient-to-br from-emerald-500 to-teal-500"
                    : "bg-gradient-to-br from-amber-500 to-orange-500"
              )}
            >
              {message.role === "assistant" ? (
                <Bot className="h-4 w-4 text-white" />
              ) : message.role === "user" ? (
                <User className="h-4 w-4 text-white" />
              ) : (
                <div className="h-4 w-4 rounded-full bg-white" />
              )}
            </div>

            {/* Message content */}
            <div className="flex-1 space-y-2">
              {message.isLoading ? (
                <div className="flex items-center gap-2">
                  <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse"></div>
                  <div className="h-2 w-2 rounded-full bg-violet-500 animate-pulse" style={{ animationDelay: "0.2s" }}></div>
                  <div className="h-2 w-2 rounded-full bg-blue-500 animate-pulse" style={{ animationDelay: "0.4s" }}></div>
                  <span className="text-sm text-muted-foreground ml-1">Thinking...</span>
                </div>
              ) : (
                <>
                  <div className="prose dark:prose-invert max-w-none">
                    {renderContent(message.content)}
                  </div>

                  {/* Render attachments if any */}
                  {message.attachments && message.attachments.length > 0 && (
                    <div className="grid grid-cols-2 gap-2 mt-2">
                      {message.attachments.map((attachment, i) => (
                        <div key={i} className="border rounded-md p-2 bg-background/50">
                          {attachment.type === "image" ? (
                            <ImageDisplay
                              src={attachment.url || "/placeholder.svg"}
                              alt={attachment.name}
                            />
                          ) : (
                            <div className="flex items-center gap-2">
                              <FileText className="h-4 w-4" />
                              <span className="text-sm truncate">{attachment.name}</span>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </>
              )}
            </div>

            {/* Copy button */}
            {!message.isLoading && (
              <Button
                variant="ghost"
                size="icon-sm"
                className="h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={handleCopy}
              >
                {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
                <span className="sr-only">Copy message</span>
              </Button>
            )}
          </div>

          {/* Timestamp */}
          {message.timestamp && (
            <div className="text-xs text-muted-foreground mt-2 text-right">
              {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          )}
        </div>
      </GradientCard>
    </motion.div>
  )
}

================
File: components/chat/code-block.tsx
================
"use client"

import { useState } from "react"
import { Check, Copy, Terminal } from "lucide-react"
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter"
import { vscDarkPlus } from "react-syntax-highlighter/dist/esm/styles/prism"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface CodeBlockProps {
  language: string
  code: string
}

export function CodeBlock({ language, code }: CodeBlockProps) {
  const [copied, setCopied] = useState(false)
  const [hovered, setHovered] = useState(false)

  const handleCopy = async () => {
    await navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <div
      className="relative my-4 rounded-lg overflow-hidden border border-border/50 shadow-md"
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-zinc-900 to-zinc-800 px-4 py-2 text-xs text-zinc-100">
        <div className="flex items-center gap-2">
          <Terminal className="h-3.5 w-3.5 text-blue-400" />
          <span className="font-mono">{language}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || copied ? 1 : 0 }}
          transition={{ duration: 0.2 }}
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className={cn(
              "h-7 w-7 rounded-full bg-zinc-800/80 text-zinc-100 hover:text-white hover:bg-zinc-700",
              copied && "bg-green-600/20 text-green-400 hover:bg-green-600/30 hover:text-green-400"
            )}
            onClick={handleCopy}
          >
            {copied ? (
              <motion.div
                initial={{ scale: 0.8 }}
                animate={{ scale: 1 }}
                transition={{ type: "spring", stiffness: 500, damping: 15 }}
              >
                <Check className="h-3.5 w-3.5" />
              </motion.div>
            ) : (
              <Copy className="h-3.5 w-3.5" />
            )}
            <span className="sr-only">Copy code</span>
          </Button>
        </motion.div>
      </div>
      <div className="max-h-[500px] overflow-auto">
        <SyntaxHighlighter
          language={language}
          style={vscDarkPlus}
          customStyle={{
            margin: 0,
            borderRadius: 0,
            fontSize: '0.9rem',
            backgroundColor: 'rgb(30, 30, 30)'
          }}
          showLineNumbers={true}
        >
          {code}
        </SyntaxHighlighter>
      </div>
    </div>
  )
}

================
File: components/chat/image-display.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Download, Maximize, Minimize, ZoomIn, ZoomOut } from "lucide-react"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface ImageDisplayProps {
  src: string
  alt: string
  className?: string
}

export function ImageDisplay({ src, alt, className }: ImageDisplayProps) {
  const [expanded, setExpanded] = useState(false)
  const [zoomed, setZoomed] = useState(false)
  const [hovered, setHovered] = useState(false)

  const handleDownload = () => {
    const link = document.createElement("a")
    link.href = src
    link.download = alt || "image"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background/50",
        expanded && "fixed inset-4 z-50 bg-background/95 backdrop-blur-sm flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-gray-900/90 to-gray-800/90 px-3 py-1.5 text-xs text-white">
        <span className="font-medium truncate max-w-[200px]">{alt}</span>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-6 w-6 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setZoomed(!zoomed)}
          >
            {zoomed ? <ZoomOut className="h-3 w-3" /> : <ZoomIn className="h-3 w-3" />}
            <span className="sr-only">{zoomed ? "Zoom out" : "Zoom in"}</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-6 w-6 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3 w-3" />
            <span className="sr-only">Download</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-6 w-6 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3 w-3" /> : <Maximize className="h-3 w-3" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn(
        "relative overflow-hidden bg-background/50 backdrop-blur-sm",
        expanded && "flex-1 flex items-center justify-center"
      )}>
        {src.startsWith("data:") || src.startsWith("http") ? (
          <div className={cn(
            "relative transition-all duration-300 ease-in-out",
            zoomed && "scale-150",
            expanded && "max-h-full max-w-full"
          )}>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={src}
              alt={alt}
              className={cn(
                "max-w-full object-contain",
                expanded ? "max-h-[calc(100vh-8rem)]" : "max-h-[300px]"
              )}
            />
          </div>
        ) : (
          <div className="p-4 text-sm text-red-500 bg-red-50 dark:bg-red-900/20 rounded-md">
            <p>Unable to display image. Invalid source.</p>
          </div>
        )}
      </div>
    </div>
  )
}

================
File: components/chat/mermaid-diagram.tsx
================
"use client"

import { useEffect, useRef, useState } from "react"
import { Loader2, Copy, Check, Maximize, Minimize, Download } from "lucide-react"
import mermaid from "mermaid"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"

export interface MermaidDiagramProps {
  code: string
  className?: string
}

export function MermaidDiagram({ code, className }: MermaidDiagramProps) {
  const [svg, setSvg] = useState<string>("")
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [copied, setCopied] = useState(false)
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const containerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const renderDiagram = async () => {
      try {
        setLoading(true)
        setError(null)

        // Initialize mermaid
        mermaid.initialize({
          startOnLoad: false,
          theme: document.documentElement.classList.contains("dark") ? "dark" : "default",
          securityLevel: "loose",
          fontFamily: "inherit",
        })

        // Render the diagram
        const { svg } = await mermaid.render(`mermaid-${Date.now()}`, code)
        setSvg(svg)
        setLoading(false)
      } catch (err) {
        console.error("Failed to render mermaid diagram:", err)
        setError("Failed to render diagram. Please check your syntax.")
        setLoading(false)
      }
    }

    renderDiagram()
  }, [code])

  const handleCopy = async () => {
    await navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const handleDownload = () => {
    if (!svg) return

    const blob = new Blob([svg], { type: "image/svg+xml" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "diagram.svg"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div
      className={cn(
        "relative my-4 rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
      ref={containerRef}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-blue-900 to-indigo-900 px-4 py-2 text-xs text-white">
        <span className="font-mono">Mermaid Diagram</span>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleCopy}
          >
            {copied ? <Check className="h-3.5 w-3.5" /> : <Copy className="h-3.5 w-3.5" />}
            <span className="sr-only">Copy code</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download SVG</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn("p-4 bg-white dark:bg-zinc-900", expanded && "flex-1 overflow-auto")}>
        {loading ? (
          <div className="flex items-center justify-center p-8">
            <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
          </div>
        ) : error ? (
          <div className="p-4 text-sm text-red-500 bg-red-50 dark:bg-red-900/20 rounded-md">
            <p className="font-medium">Error</p>
            <p>{error}</p>
            <pre className="mt-2 p-2 bg-background rounded overflow-x-auto text-xs">{code}</pre>
          </div>
        ) : (
          <div
            className="flex justify-center"
            dangerouslySetInnerHTML={{ __html: svg }}
          />
        )}
      </div>
    </div>
  )
}

================
File: components/chat/model-viewer.tsx
================
"use client"

import { useState, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import { Maximize, Minimize, Download, Box, RotateCcw, Pause, Play } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { cn } from "@/lib/utils"

// Import Three.js dynamically to avoid SSR issues
import dynamic from "next/dynamic"
const ThreeViewer = dynamic(() => import('./three-viewer').then(mod => mod.ThreeViewer), { ssr: false })

export interface ModelViewerProps {
  title?: string
  modelUrl: string
  format?: "gltf" | "glb" | "obj" | "stl"
  className?: string
  backgroundColor?: string
  autoRotate?: boolean
}

export function ModelViewer({
  title = "3D Model",
  modelUrl,
  format = "glb",
  className,
  backgroundColor = "#f5f5f5",
  autoRotate = true
}: ModelViewerProps) {
  const [expanded, setExpanded] = useState(false)
  const [hovered, setHovered] = useState(false)
  const [isRotating, setIsRotating] = useState(autoRotate)
  const [zoom, setZoom] = useState(1)
  const containerRef = useRef<HTMLDivElement>(null)

  // Handle download model
  const handleDownload = () => {
    const link = document.createElement("a")
    link.href = modelUrl
    link.download = title.replace(/\s+/g, '-').toLowerCase() + '.' + format
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  // Handle toggle rotation
  const handleToggleRotation = () => {
    setIsRotating(!isRotating)
  }

  // Handle reset view
  const handleResetView = () => {
    // This would be implemented in the ThreeViewer component
    if (containerRef.current) {
      const resetEvent = new CustomEvent('reset-view')
      containerRef.current.dispatchEvent(resetEvent)
    }
  }

  // Handle zoom change
  const handleZoomChange = (value: number[]) => {
    setZoom(value[0])
    // This would be implemented in the ThreeViewer component
    if (containerRef.current) {
      const zoomEvent = new CustomEvent('set-zoom', { detail: { zoom: value[0] } })
      containerRef.current.dispatchEvent(zoomEvent)
    }
  }

  return (
    <div
      className={cn(
        "relative rounded-lg overflow-hidden border border-border/50 shadow-md transition-all duration-300 bg-background",
        expanded && "fixed inset-4 z-50 bg-background flex flex-col",
        className
      )}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
      ref={containerRef}
    >
      <div className="flex items-center justify-between bg-gradient-to-r from-slate-800 to-gray-800 px-4 py-2 text-white">
        <div className="flex items-center gap-2">
          <Box className="h-4 w-4" />
          <span className="font-medium">{title}</span>
        </div>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: hovered || expanded ? 1 : 0 }}
          transition={{ duration: 0.2 }}
          className="flex items-center gap-1"
        >
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleToggleRotation}
          >
            {isRotating ? <Pause className="h-3.5 w-3.5" /> : <Play className="h-3.5 w-3.5" />}
            <span className="sr-only">{isRotating ? "Pause rotation" : "Start rotation"}</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleResetView}
          >
            <RotateCcw className="h-3.5 w-3.5" />
            <span className="sr-only">Reset view</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={handleDownload}
          >
            <Download className="h-3.5 w-3.5" />
            <span className="sr-only">Download model</span>
          </Button>
          <Button
            variant="ghost"
            size="icon-sm"
            className="h-7 w-7 rounded-full bg-white/10 text-white hover:bg-white/20"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? <Minimize className="h-3.5 w-3.5" /> : <Maximize className="h-3.5 w-3.5" />}
            <span className="sr-only">{expanded ? "Minimize" : "Maximize"}</span>
          </Button>
        </motion.div>
      </div>

      <div className={cn(
        "relative",
        expanded ? "flex-1" : "h-[300px]"
      )}>
        {/* This is a placeholder for the actual Three.js component */}
        <div className="absolute inset-0 bg-gray-100 dark:bg-gray-800 flex items-center justify-center">
          <p className="text-muted-foreground">
            3D Model Viewer would render here using Three.js
          </p>
        </div>

        {/* Controls overlay */}
        <div className="absolute bottom-4 left-4 right-4 bg-black/20 backdrop-blur-sm rounded-md p-2">
          <div className="flex items-center gap-2">
            <span className="text-xs text-white">Zoom:</span>
            <Slider
              value={[zoom]}
              min={0.5}
              max={3}
              step={0.1}
              onValueChange={handleZoomChange}
              className="flex-1"
            />
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: components/layout/dashboard-layout.tsx
================
"use client"

import type React from "react"

import { useState, useEffect, createContext, useContext, useRef, useCallback, memo } from "react"
import { usePathname } from "next/navigation"
import {
  motion,
  AnimatePresence,
  useMotionValue,
  useSpring,
  useTransform,
  useScroll,
  useInView,
  useReducedMotion
} from "framer-motion"
import {
  Loader2,
  HelpCircle,
  ChevronLeft,
  ChevronRight,
  Menu,
  X,
  Home,
  Settings,
  ArrowUp
} from "lucide-react"

import { cn } from "@/lib/utils"
import { TopNavbar } from "@/components/layout/top-navbar"
import { MainSidebar } from "@/components/layout/main-sidebar"
import { useToast } from "@/components/ui/use-toast"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { useMediaQuery } from "@/hooks/use-media-query"

// Create a context for sidebar state
interface SidebarContextType {
  sidebarOpen: boolean
  toggleSidebar: () => void
}

const SidebarContext = createContext<SidebarContextType>({
  sidebarOpen: true,
  toggleSidebar: () => {}
})

// Custom hook to use sidebar context
export const useSidebar = () => useContext(SidebarContext)

interface DashboardLayoutProps {
  children: React.ReactNode
}

/**
 * Dashboard Layout Component
 *
 * Provides the main layout structure for the dashboard with advanced animations,
 * responsive design, and accessibility features.
 */
export const DashboardLayout = memo(function DashboardLayout({ children }: DashboardLayoutProps) {
  const pathname = usePathname()
  const { toast } = useToast()
  const [sidebarOpen, setSidebarOpen] = useState(true)
  const [isLoading, setIsLoading] = useState(true)
  const [mounted, setMounted] = useState(false)
  const [isHovering, setIsHovering] = useState(false)
  const [showScrollTop, setShowScrollTop] = useState(false)

  // Check if user prefers reduced motion
  const prefersReducedMotion = useReducedMotion()

  // Check if device is mobile
  const isMobile = useMediaQuery("(max-width: 768px)")

  // Refs for sidebar hover detection and scroll
  const sidebarRef = useRef<HTMLDivElement>(null)
  const hoverZoneRef = useRef<HTMLDivElement>(null)
  const mainContentRef = useRef<HTMLDivElement>(null)

  // Get scroll position for animations
  const { scrollY } = useScroll({
    container: mainContentRef
  })

  // Create ref for content view detection
  const contentRef = useRef<HTMLDivElement>(null)

  // Check if elements are in view
  const contentInView = useInView(contentRef)

  // Motion values for animations
  const mouseX = useMotionValue(0)
  const mouseY = useMotionValue(0)
  const springConfig = { stiffness: 300, damping: 30 }
  const mouseXSpring = useSpring(mouseX, springConfig)
  const mouseYSpring = useSpring(mouseY, springConfig)

  // Transform mouse position for hover effects
  const hoverRotateX = useTransform(mouseYSpring, [0, 300], [5, -5])
  const hoverRotateY = useTransform(mouseXSpring, [0, 300], [-5, 5])

  // Parallax effect for content based on scroll
  const contentY = useTransform(
    scrollY,
    [0, 300],
    [0, prefersReducedMotion ? 0 : -30]
  )

  // Toggle sidebar function with memoization
  const toggleSidebar = useCallback(() => {
    setSidebarOpen(prev => {
      const newState = !prev
      // Show toast notification
      toast({
        title: newState ? "Sidebar expanded" : "Sidebar collapsed",
        description: newState ? "Navigation sidebar is now visible" : "Navigation sidebar is now hidden",
        duration: 2000,
      })
      return newState
    })
  }, [toast])

  // Handle mouse movement for hover zone
  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
    const { left, top } = e.currentTarget.getBoundingClientRect()
    mouseX.set(e.clientX - left)
    mouseY.set(e.clientY - top)
  }, [mouseX, mouseY])

  // Handle hover state for sidebar
  useEffect(() => {
    if (!sidebarOpen) {
      const handleMouseEnter = () => setIsHovering(true)
      const handleMouseLeave = () => setIsHovering(false)

      const hoverZone = hoverZoneRef.current
      if (hoverZone) {
        hoverZone.addEventListener('mouseenter', handleMouseEnter)
        hoverZone.addEventListener('mouseleave', handleMouseLeave)

        return () => {
          hoverZone.removeEventListener('mouseenter', handleMouseEnter)
          hoverZone.removeEventListener('mouseleave', handleMouseLeave)
        }
      }
    }
  }, [sidebarOpen])

  // Handle scroll position for scroll-to-top button
  useEffect(() => {
    const handleScroll = () => {
      if (mainContentRef.current) {
        setShowScrollTop(mainContentRef.current.scrollTop > 300)
      }
    }

    const mainContent = mainContentRef.current
    if (mainContent) {
      mainContent.addEventListener('scroll', handleScroll)
      return () => mainContent.removeEventListener('scroll', handleScroll)
    }
  }, [])

  // Simulate loading state
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false)

      // Show welcome toast on first load
      if (!mounted) {
        toast({
          title: "Welcome to DeanmachinesAI",
          description: "Your advanced AI platform is ready to use.",
          duration: 5000,
        })
        setMounted(true)
      }
    }, 800)

    return () => clearTimeout(timer)
  }, [toast, mounted])

  // Scroll to top function
  const scrollToTop = useCallback(() => {
    if (mainContentRef.current) {
      mainContentRef.current.scrollTo({
        top: 0,
        behavior: 'smooth'
      })
    }
  }, [])

  return (
    <SidebarContext.Provider value={{ sidebarOpen, toggleSidebar }}>
      <div
        className={cn(
          "flex min-h-screen flex-col bg-background relative",
          isLoading && "overflow-hidden"
        )}
        // Add ARIA attributes for accessibility
        role="application"
        aria-label="DeanmachinesAI Dashboard"
      >
        {/* Loading overlay with enhanced animations */}
        <AnimatePresence>
          {isLoading && (
            <motion.div
              className="absolute inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              aria-live="polite"
              aria-busy="true"
            >
              <motion.div
                initial={{ scale: 0.9, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.9, opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="flex flex-col items-center"
              >
                <div className="relative flex items-center justify-center mb-4">
                  <motion.div
                    initial={{ rotate: 0, scale: 1 }}
                    animate={{
                      rotate: prefersReducedMotion ? 0 : 360,
                      scale: prefersReducedMotion ? 1 : [1, 1.05, 1]
                    }}
                    transition={{
                      rotate: { duration: 10, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                      scale: { duration: 3, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" }
                    }}
                    className="absolute inset-0 rounded-full bg-gradient-to-r from-green-500 via-teal-500 to-blue-600 opacity-70 blur-sm"
                  />
                  <motion.div
                    initial={{ rotate: 0 }}
                    animate={{ rotate: prefersReducedMotion ? 0 : -360 }}
                    transition={{ duration: 15, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                    className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 via-cyan-600 to-teal-500 opacity-70 blur-[2px]"
                  />
                  <div className="relative h-12 w-12 rounded-full bg-background flex items-center justify-center">
                    <Loader2 className="h-6 w-6 text-primary animate-spin" />
                  </div>
                </div>
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2, duration: 0.3 }}
                  className="text-center"
                >
                  <h3 className="font-medium text-lg bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600">
                    DeanmachinesAI
                  </h3>
                  <p className="text-sm text-muted-foreground">Loading your AI workspace...</p>
                </motion.div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Top navigation bar with enhanced accessibility */}
        <div className="flex items-center px-4 h-16 border-b">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <motion.button
                  className="mr-4 h-8 w-8 rounded-md flex items-center justify-center text-muted-foreground hover:text-foreground hover:bg-accent/50 transition-colors"
                  whileHover={{ scale: prefersReducedMotion ? 1 : 1.05 }}
                  whileTap={{ scale: prefersReducedMotion ? 1 : 0.95 }}
                  onClick={toggleSidebar}
                  aria-label={sidebarOpen ? "Hide sidebar" : "Show sidebar"}
                  aria-expanded={sidebarOpen}
                  aria-controls="main-sidebar"
                >
                  {sidebarOpen ? (
                    <X className="h-5 w-5" />
                  ) : (
                    <Menu className="h-5 w-5" />
                  )}
                </motion.button>
              </TooltipTrigger>
              <TooltipContent side="right">
                <p>{sidebarOpen ? "Hide sidebar" : "Show sidebar"}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TopNavbar />
        </div>

        {/* Main content area with sidebar */}
        <div className="flex flex-1 overflow-hidden relative">
          {/* Hover zone for sidebar with enhanced detection */}
          {!sidebarOpen && (
            <div
              ref={hoverZoneRef}
              className="absolute left-0 top-0 w-8 h-full z-30"
              aria-hidden="true"
            />
          )}

          {/* Sidebar with hover effect and accessibility improvements */}
          <AnimatePresence>
            {(sidebarOpen || isHovering) && (
              <motion.div
                id="main-sidebar"
                ref={sidebarRef}
                initial={!sidebarOpen ? { width: 0, opacity: 0 } : { width: 240, opacity: 1 }}
                animate={!sidebarOpen && isHovering ? { width: 240, opacity: 1 } :
                        sidebarOpen ? { width: 240, opacity: 1 } : { width: 0, opacity: 0 }}
                exit={{ width: 0, opacity: 0 }}
                transition={{ duration: 0.3, ease: [0.3, 0.1, 0.3, 1] }}
                style={{
                  rotateX: prefersReducedMotion ? 0 : hoverRotateX,
                  rotateY: prefersReducedMotion ? 0 : hoverRotateY,
                  transformPerspective: 1000
                }}
                onMouseMove={handleMouseMove}
                className="h-full overflow-hidden"
                role="navigation"
                aria-label="Main navigation"
              >
                <MainSidebar />

                {/* Sidebar toggle button with accessibility */}
                <motion.button
                  className="absolute right-3 top-6 z-30 h-6 w-6 rounded-full border bg-background shadow-md hover:bg-accent flex items-center justify-center"
                  whileHover={{ scale: prefersReducedMotion ? 1 : 1.1 }}
                  whileTap={{ scale: prefersReducedMotion ? 1 : 0.9 }}
                  onClick={toggleSidebar}
                  aria-label={sidebarOpen ? "Collapse sidebar" : "Expand sidebar"}
                >
                  {sidebarOpen ? (
                    <ChevronLeft className="h-3 w-3 text-muted-foreground" />
                  ) : (
                    <ChevronRight className="h-3 w-3 text-muted-foreground" />
                  )}
                </motion.button>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Main content with scroll effects and parallax */}
          <motion.main
            ref={mainContentRef}
            className="flex-1 overflow-auto"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            role="main"
          >
            <TooltipProvider>
              <div className="container py-4 px-4 md:px-6 max-w-7xl mx-auto">
                <AnimatePresence mode="wait">
                  <motion.div
                    ref={contentRef}
                    key={pathname}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{
                      opacity: 1,
                      y: 0,
                      scale: contentInView ? 1 : 0.98
                    }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.3 }}
                    className={cn(
                      "relative",
                      isMobile ? "pt-2" : "pt-4"
                    )}
                    style={{ y: contentY }}
                  >
                    {/* Page content */}
                    {children}

                    {/* Quick navigation buttons with enhanced accessibility */}
                    <div className="fixed bottom-6 right-6 flex flex-col gap-3">
                      <TooltipProvider>
                        {/* Home button */}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <motion.button
                              className="h-10 w-10 rounded-full bg-gradient-to-r from-green-500 to-teal-500 flex items-center justify-center shadow-lg shadow-green-500/20 hover:shadow-green-500/30 transition-shadow"
                              whileHover={{ scale: prefersReducedMotion ? 1 : 1.05 }}
                              whileTap={{ scale: prefersReducedMotion ? 1 : 0.95 }}
                              onClick={() => {
                                window.location.href = "/dashboard"
                                toast({
                                  title: "Navigating to Dashboard",
                                  description: "Taking you to the main dashboard",
                                  duration: 2000,
                                })
                              }}
                              aria-label="Go to Dashboard"
                            >
                              <Home className="h-5 w-5 text-white" />
                            </motion.button>
                          </TooltipTrigger>
                          <TooltipContent side="left">
                            <p>Go to Dashboard</p>
                          </TooltipContent>
                        </Tooltip>

                        {/* Settings button */}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <motion.button
                              className="h-10 w-10 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center shadow-lg shadow-blue-500/20 hover:shadow-blue-500/30 transition-shadow"
                              whileHover={{ scale: prefersReducedMotion ? 1 : 1.05 }}
                              whileTap={{ scale: prefersReducedMotion ? 1 : 0.95 }}
                              onClick={() => {
                                window.location.href = "/settings"
                                toast({
                                  title: "Navigating to Settings",
                                  description: "Taking you to the settings page",
                                  duration: 2000,
                                })
                              }}
                              aria-label="Go to Settings"
                            >
                              <Settings className="h-5 w-5 text-white" />
                            </motion.button>
                          </TooltipTrigger>
                          <TooltipContent side="left">
                            <p>Go to Settings</p>
                          </TooltipContent>
                        </Tooltip>

                        {/* Help button */}
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <motion.button
                              className="h-12 w-12 rounded-full bg-gradient-to-r from-teal-500 to-blue-600 flex items-center justify-center shadow-lg shadow-blue-500/20 hover:shadow-blue-500/30 transition-shadow"
                              whileHover={{ scale: prefersReducedMotion ? 1 : 1.05 }}
                              whileTap={{ scale: prefersReducedMotion ? 1 : 0.95 }}
                              onClick={() => {
                                toast({
                                  title: "Help Center",
                                  description: "The help center is coming soon. Stay tuned!",
                                  duration: 3000,
                                })
                              }}
                              aria-label="Help Center"
                            >
                              <HelpCircle className="h-6 w-6 text-white" />
                            </motion.button>
                          </TooltipTrigger>
                          <TooltipContent side="left">
                            <p>Need help?</p>
                          </TooltipContent>
                        </Tooltip>

                        {/* Scroll to top button - only shows when scrolled down */}
                        <AnimatePresence>
                          {showScrollTop && (
                            <motion.div
                              initial={{ opacity: 0, scale: 0.8 }}
                              animate={{ opacity: 1, scale: 1 }}
                              exit={{ opacity: 0, scale: 0.8 }}
                              transition={{ duration: 0.2 }}
                            >
                              <Tooltip>
                                <TooltipTrigger asChild>
                                  <motion.button
                                    className="h-10 w-10 rounded-full bg-gradient-to-r from-gray-500 to-gray-600 flex items-center justify-center shadow-lg shadow-gray-500/20 hover:shadow-gray-500/30 transition-shadow"
                                    whileHover={{ scale: prefersReducedMotion ? 1 : 1.05 }}
                                    whileTap={{ scale: prefersReducedMotion ? 1 : 0.95 }}
                                    onClick={scrollToTop}
                                    aria-label="Scroll to top"
                                  >
                                    <ArrowUp className="h-5 w-5 text-white" />
                                  </motion.button>
                                </TooltipTrigger>
                                <TooltipContent side="left">
                                  <p>Scroll to top</p>
                                </TooltipContent>
                              </Tooltip>
                            </motion.div>
                          )}
                        </AnimatePresence>
                      </TooltipProvider>
                    </div>
                  </motion.div>
                </AnimatePresence>
              </div>
            </TooltipProvider>
          </motion.main>
        </div>
      </div>
    </SidebarContext.Provider>
  )
})

================
File: components/observability/model-performance.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion } from "framer-motion"
import * as d3 from "d3"
import {
  Activity,
  AlertCircle,
  BarChart,
  CheckCircle,
  Clock,
  Download,
  Filter,
  Info,
  Layers,
  RefreshCw,
  Search,
  Zap
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  AreaChart,
  Area,
  BarChart as RechartsBarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  Scatter,
  ScatterChart,
  ZAxis,
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  RadialBarChart,
  RadialBar
} from "recharts"
import { useToast } from "@/components/ui/use-toast"
import { cn } from "@/lib/utils"

interface ModelPerformanceData {
  modelId: string
  provider: string
  displayName: string
  timeSeriesData: any[]
  metrics: {
    avgLatency: number
    avgTokensPerSecond: number
    totalRequests: number
    totalTokens: number
    successRate: number
  }
}

interface ModelPerformanceProps {
  performance: ModelPerformanceData[]
  isLoading: boolean
}

export function ModelPerformance({
  performance,
  isLoading
}: ModelPerformanceProps) {
  const { toast } = useToast()
  const [activeTab, setActiveTab] = useState<string>("overview")
  const [selectedModel, setSelectedModel] = useState<string | null>(null)
  const [selectedMetric, setSelectedMetric] = useState<string>("latency")
  const [chartType, setChartType] = useState<string>("line")
  const [isExporting, setIsExporting] = useState<boolean>(false)

  // Set the first model as selected when data loads
  useEffect(() => {
    if (performance && performance.length > 0 && !selectedModel) {
      setSelectedModel(performance[0].modelId)
    }
  }, [performance, selectedModel])

  // Get the selected model data
  const selectedModelData = performance?.find(m => m.modelId === selectedModel)

  // Prepare data for comparison chart
  const comparisonData = performance?.map(model => ({
    name: model.displayName,
    latency: model.metrics.avgLatency,
    tokensPerSecond: model.metrics.avgTokensPerSecond,
    successRate: model.metrics.successRate,
    requests: model.metrics.totalRequests,
    tokens: model.metrics.totalTokens,
    provider: model.provider
  }))

  // Prepare time series data for the selected model
  const timeSeriesData = selectedModelData?.timeSeriesData.map(point => ({
    timestamp: new Date(point.timestamp).toLocaleTimeString(),
    latency: point.latency_ms,
    tokensPerSecond: point.tokens_per_second,
    successRate: point.success_rate,
    requests: point.request_count,
    tokens: point.total_tokens,
    errors: point.error_count
  }))

  // Get provider color
  const getProviderColor = (provider: string) => {
    switch (provider?.toLowerCase()) {
      case "google": return "#4285F4"
      case "openai": return "#10a37f"
      case "anthropic": return "#b668ff"
      default: return "#64748b"
    }
  }

  // Custom tooltip for charts
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-background/95 backdrop-blur-sm p-3 border border-border rounded-lg shadow-lg">
          <p className="font-medium">{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color || entry.stroke }}>
              {entry.name}: {entry.value} {entry.unit || ''}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  // Format metric value
  const formatMetricValue = (metric: string, value: number) => {
    switch (metric) {
      case "latency": return `${value} ms`
      case "tokensPerSecond": return `${value} t/s`
      case "successRate": return `${value}%`
      case "requests": return value.toLocaleString()
      case "tokens": return value.toLocaleString()
      default: return value
    }
  }

  // Get metric display name
  const getMetricDisplayName = (metric: string) => {
    switch (metric) {
      case "latency": return "Latency"
      case "tokensPerSecond": return "Tokens Per Second"
      case "successRate": return "Success Rate"
      case "requests": return "Total Requests"
      case "tokens": return "Total Tokens"
      default: return metric
    }
  }

  return (
    <motion.div
      className="space-y-6"
      variants={containerVariants}
      initial="hidden"
      animate="show"
    >
      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4">
        <Select value={selectedModel || ""} onValueChange={setSelectedModel}>
          <SelectTrigger className="w-[200px]">
            <SelectValue placeholder="Select Model" />
          </SelectTrigger>
          <SelectContent>
            {performance?.map(model => (
              <SelectItem key={model.modelId} value={model.modelId}>
                <div className="flex items-center gap-2">
                  <div
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: getProviderColor(model.provider) }}
                  />
                  {model.displayName}
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select value={selectedMetric} onValueChange={setSelectedMetric}>
          <SelectTrigger className="w-[200px]">
            <SelectValue placeholder="Select Metric" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="latency">Latency (ms)</SelectItem>
            <SelectItem value="tokensPerSecond">Tokens Per Second</SelectItem>
            <SelectItem value="successRate">Success Rate (%)</SelectItem>
            <SelectItem value="requests">Request Count</SelectItem>
            <SelectItem value="tokens">Token Count</SelectItem>
          </SelectContent>
        </Select>

        <Select value={chartType} onValueChange={setChartType}>
          <SelectTrigger className="w-[150px]">
            <SelectValue placeholder="Chart Type" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="line">Line Chart</SelectItem>
            <SelectItem value="bar">Bar Chart</SelectItem>
            <SelectItem value="area">Area Chart</SelectItem>
          </SelectContent>
        </Select>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1">
          <TabsList className="grid grid-cols-3 w-[300px] ml-auto">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="comparison">Comparison</TabsTrigger>
            <TabsTrigger value="timeseries">Time Series</TabsTrigger>
          </TabsList>
        </Tabs>
      </div>

      {/* Content */}
      <TabsContent value="overview" className="m-0">
        {isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Skeleton className="h-[200px] w-full" />
            <Skeleton className="h-[200px] w-full" />
            <Skeleton className="h-[200px] w-full" />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Model Cards */}
            {performance?.map(model => (
              <motion.div key={model.modelId} variants={itemVariants}>
                <Card
                  className={cn(
                    "overflow-hidden border-opacity-40 backdrop-blur-sm cursor-pointer transition-all",
                    selectedModel === model.modelId && "border-primary/50 bg-primary/5"
                  )}
                  onClick={() => setSelectedModel(model.modelId)}
                >
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <Badge
                        variant="outline"
                        className="px-2 py-1"
                        style={{
                          backgroundColor: `${getProviderColor(model.provider)}20`,
                          color: getProviderColor(model.provider),
                          borderColor: `${getProviderColor(model.provider)}40`
                        }}
                      >
                        {model.provider}
                      </Badge>
                      <Badge variant="outline" className="bg-primary/10 text-primary border-primary/20">
                        {model.metrics.successRate}% Success
                      </Badge>
                    </div>
                    <CardTitle className="text-lg mt-2">{model.displayName}</CardTitle>
                    <CardDescription>{model.modelId}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-y-2 text-sm">
                      <div className="flex items-center gap-1">
                        <Clock className="h-3 w-3 text-muted-foreground" />
                        <span className="text-muted-foreground">Latency:</span>
                      </div>
                      <div className="font-medium text-right">{model.metrics.avgLatency} ms</div>

                      <div className="flex items-center gap-1">
                        <Zap className="h-3 w-3 text-muted-foreground" />
                        <span className="text-muted-foreground">Tokens/sec:</span>
                      </div>
                      <div className="font-medium text-right">{model.metrics.avgTokensPerSecond}</div>

                      <div className="flex items-center gap-1">
                        <BarChart className="h-3 w-3 text-muted-foreground" />
                        <span className="text-muted-foreground">Requests:</span>
                      </div>
                      <div className="font-medium text-right">{model.metrics.totalRequests.toLocaleString()}</div>

                      <div className="flex items-center gap-1">
                        <Layers className="h-3 w-3 text-muted-foreground" />
                        <span className="text-muted-foreground">Tokens:</span>
                      </div>
                      <div className="font-medium text-right">{model.metrics.totalTokens.toLocaleString()}</div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        )}
      </TabsContent>

      <TabsContent value="comparison" className="m-0">
        {isLoading ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">Model Comparison</CardTitle>
              <CardDescription>
                Comparing {getMetricDisplayName(selectedMetric)} across all models
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <RechartsBarChart data={comparisonData} layout="vertical">
                    <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                    <XAxis type="number" />
                    <YAxis
                      dataKey="name"
                      type="category"
                      width={120}
                      tick={{ fill: 'var(--muted-foreground)' }}
                    />
                    <RechartsTooltip content={<CustomTooltip />} />
                    <Legend />
                    <Bar
                      dataKey={selectedMetric}
                      name={getMetricDisplayName(selectedMetric)}
                      radius={[0, 4, 4, 0]}
                    >
                      {comparisonData?.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={getProviderColor(entry.provider)}
                          stroke="rgba(255,255,255,0.2)"
                          strokeWidth={1}
                        />
                      ))}
                    </Bar>
                  </RechartsBarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>

      <TabsContent value="timeseries" className="m-0">
        {isLoading || !selectedModelData ? (
          <Skeleton className="h-[400px] w-full" />
        ) : (
          <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg">
                {selectedModelData.displayName} - {getMetricDisplayName(selectedMetric)} Over Time
              </CardTitle>
              <CardDescription>
                Time series data showing performance trends
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  {chartType === 'line' ? (
                    <LineChart data={timeSeriesData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="timestamp"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Line
                        type="monotone"
                        dataKey={selectedMetric}
                        name={getMetricDisplayName(selectedMetric)}
                        stroke={getProviderColor(selectedModelData.provider)}
                        strokeWidth={2}
                        dot={{ r: 1 }}
                        activeDot={{ r: 5 }}
                      />
                    </LineChart>
                  ) : chartType === 'bar' ? (
                    <RechartsBarChart data={timeSeriesData}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="timestamp"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Bar
                        dataKey={selectedMetric}
                        name={getMetricDisplayName(selectedMetric)}
                        fill={getProviderColor(selectedModelData.provider)}
                        radius={[4, 4, 0, 0]}
                      />
                    </RechartsBarChart>
                  ) : (
                    <AreaChart data={timeSeriesData}>
                      <defs>
                        <linearGradient id={`${selectedMetric}Gradient`} x1="0" y1="0" x2="0" y2="1">
                          <stop
                            offset="5%"
                            stopColor={getProviderColor(selectedModelData.provider)}
                            stopOpacity={0.8}
                          />
                          <stop
                            offset="95%"
                            stopColor={getProviderColor(selectedModelData.provider)}
                            stopOpacity={0.1}
                          />
                        </linearGradient>
                      </defs>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                      <XAxis
                        dataKey="timestamp"
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <YAxis
                        tick={{ fill: 'var(--muted-foreground)' }}
                        axisLine={{ stroke: 'rgba(255,255,255,0.1)' }}
                      />
                      <RechartsTooltip content={<CustomTooltip />} />
                      <Area
                        type="monotone"
                        dataKey={selectedMetric}
                        name={getMetricDisplayName(selectedMetric)}
                        stroke={getProviderColor(selectedModelData.provider)}
                        fillOpacity={1}
                        fill={`url(#${selectedMetric}Gradient)`}
                      />
                    </AreaChart>
                  )}
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </TabsContent>
    </motion.div>
  )
}

================
File: components/observability/tracing-details.tsx
================
"use client"

import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import {
  Activity,
  AlertCircle,
  ArrowRight,
  CheckCircle,
  ChevronDown,
  ChevronRight,
  Clock,
  Code,
  Copy,
  Download,
  ExternalLink,
  Eye,
  Filter,
  Info,
  Layers,
  List,
  MoreHorizontal,
  RefreshCw,
  Search,
  Zap
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"
import { useToast } from "@/components/ui/use-toast"
import { cn } from "@/lib/utils"

interface Trace {
  id: string
  name: string
  startTime: string
  endTime?: string
  duration?: number
  status: string
  userId?: string
  metadata?: any
  spans?: Array<{
    id: string
    name: string
    startTime: string
    duration: number
    status: string
  }>
  events?: Array<{
    id: string
    name: string
    timestamp: string
    metadata?: any
  }>
}

interface TracingDetailsProps {
  traces: Trace[]
  isLoading: boolean
  selectedTraceId: string | null
  onSelectTrace: (traceId: string) => void
}

export function TracingDetails({
  traces,
  isLoading,
  selectedTraceId,
  onSelectTrace
}: TracingDetailsProps) {
  const { toast } = useToast()
  const [searchQuery, setSearchQuery] = useState<string>("")
  const [expandedMetadata, setExpandedMetadata] = useState<Record<string, boolean>>({})
  const [activeTab, setActiveTab] = useState<string>("overview")
  const [copiedId, setCopiedId] = useState<string | null>(null)

  // Use effect to reset copied state after 2 seconds
  useEffect(() => {
    if (copiedId) {
      const timer = setTimeout(() => {
        setCopiedId(null)
      }, 2000)
      return () => clearTimeout(timer)
    }
  }, [copiedId])

  // Fetch detailed trace data when a trace is selected
  const { data: traceDetailsArray, isLoading: detailsLoading } = useSupabaseFetch<Trace>({
    endpoint: "/api/observability/traces",
    resourceName: "Trace Details",
    dataKey: "trace",
    queryParams: { traceId: selectedTraceId || "" },
    enabled: !!selectedTraceId
  })

  // Get the first trace from the array (should be only one)
  const traceDetails = traceDetailsArray?.[0]

  // Filter traces based on search query
  const filteredTraces = searchQuery
    ? traces.filter(trace =>
        trace.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        trace.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (trace.metadata && JSON.stringify(trace.metadata).toLowerCase().includes(searchQuery.toLowerCase()))
      )
    : traces

  // Toggle metadata expansion
  const toggleMetadata = (traceId: string) => {
    setExpandedMetadata(prev => ({
      ...prev,
      [traceId]: !prev[traceId]
    }))

    // Show toast notification when metadata is expanded/collapsed
    toast({
      title: expandedMetadata[traceId] ? "Metadata collapsed" : "Metadata expanded",
      description: `Metadata for ${traceId.substring(0, 8)}... has been ${expandedMetadata[traceId] ? "collapsed" : "expanded"}`,
      duration: 2000
    })
  }

  // Copy trace ID to clipboard
  const copyToClipboard = (text: string, type: string = "ID") => {
    navigator.clipboard.writeText(text)
    setCopiedId(text)

    toast({
      title: `${type} copied to clipboard`,
      description: `${text.substring(0, 15)}${text.length > 15 ? '...' : ''} has been copied to your clipboard.`,
      duration: 2000
    })
  }

  // Format timestamp
  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString()
  }

  // Format duration
  const formatDuration = (duration?: number) => {
    if (!duration) return "N/A"
    if (duration < 1000) return `${duration}ms`
    return `${(duration / 1000).toFixed(2)}s`
  }

  // Get status badge
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "success":
        return (
          <Badge variant="outline" className="bg-green-500/10 text-green-500 border-green-500/20">
            <CheckCircle className="h-3 w-3 mr-1" />
            Success
          </Badge>
        )
      case "error":
        return (
          <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500/20">
            <AlertCircle className="h-3 w-3 mr-1" />
            Error
          </Badge>
        )
      default:
        return (
          <Badge variant="outline" className="bg-blue-500/10 text-blue-500 border-blue-500/20">
            <Activity className="h-3 w-3 mr-1" />
            {status}
          </Badge>
        )
    }
  }

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05
      }
    }
  }

  const itemVariants = {
    hidden: { y: 10, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        {/* Traces List */}
        <Card className="lg:col-span-1 overflow-hidden border-opacity-40 backdrop-blur-sm">
          <CardHeader className="pb-2">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg flex items-center justify-between">
                <span className="flex items-center gap-2">
                  <Layers className="h-5 w-5 text-primary" />
                  Traces
                </span>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="h-6 w-6">
                        <Info className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Select a trace to view detailed information. You can search traces by name or ID.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </CardTitle>
              <Badge variant="outline" className="bg-primary/10 text-primary border-primary/20">
                {filteredTraces.length}
              </Badge>
            </div>
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search traces..."
                className="pl-8"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </CardHeader>
          <CardContent className="p-0">
            <ScrollArea className="h-[600px]">
              {isLoading ? (
                <div className="p-4 space-y-4">
                  {[...Array(5)].map((_, i) => (
                    <div key={i} className="space-y-2">
                      <Skeleton className="h-5 w-3/4" />
                      <Skeleton className="h-4 w-1/2" />
                      <Skeleton className="h-4 w-1/4" />
                    </div>
                  ))}
                </div>
              ) : filteredTraces.length === 0 ? (
                <div className="p-8 text-center">
                  <p className="text-muted-foreground">No traces found</p>
                </div>
              ) : (
                <motion.div
                  className="divide-y divide-border/30"
                  variants={containerVariants}
                  initial="hidden"
                  animate="show"
                >
                  {filteredTraces.map((trace) => (
                    <motion.div
                      key={trace.id}
                      variants={itemVariants}
                      className={cn(
                        "p-3 hover:bg-muted/50 cursor-pointer transition-colors",
                        selectedTraceId === trace.id && "bg-muted/70 border-l-4 border-primary"
                      )}
                      onClick={() => onSelectTrace(trace.id)}
                    >
                      <div className="flex items-center justify-between">
                        <h3 className="font-medium truncate">{trace.name}</h3>
                        {getStatusBadge(trace.status)}
                      </div>
                      <div className="text-xs text-muted-foreground mt-1 flex items-center gap-2">
                        <Clock className="h-3 w-3" />
                        {formatTime(trace.startTime)}
                        <span>•</span>
                        <span>{formatDuration(trace.duration)}</span>
                      </div>
                      <div className="text-xs text-muted-foreground mt-1 flex items-center gap-1">
                        <span>ID: {trace.id}</span>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-4 w-4 p-0 hover:bg-transparent"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  copyToClipboard(trace.id)
                                }}
                              >
                                {copiedId === trace.id ? (
                                  <CheckCircle className="h-3 w-3 text-green-500" />
                                ) : (
                                  <Copy className="h-3 w-3 text-muted-foreground hover:text-primary" />
                                )}
                              </Button>
                            </TooltipTrigger>
                            <TooltipContent side="right" className="text-xs">
                              {copiedId === trace.id ? "Copied!" : "Copy ID"}
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </div>
                      {trace.metadata && (
                        <div className="mt-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 px-2 text-xs"
                            onClick={(e) => {
                              e.stopPropagation()
                              toggleMetadata(trace.id)
                            }}
                          >
                            {expandedMetadata[trace.id] ? (
                              <ChevronDown className="h-3 w-3 mr-1" />
                            ) : (
                              <ChevronRight className="h-3 w-3 mr-1" />
                            )}
                            Metadata
                          </Button>
                          <AnimatePresence>
                            {expandedMetadata[trace.id] && (
                              <motion.div
                                initial={{ opacity: 0, height: 0 }}
                                animate={{ opacity: 1, height: "auto" }}
                                exit={{ opacity: 0, height: 0 }}
                                transition={{ duration: 0.2 }}
                                className="overflow-hidden"
                              >
                                <div className="mt-2 text-xs bg-muted/50 p-2 rounded-md">
                                  <pre className="whitespace-pre-wrap break-all">
                                    {JSON.stringify(trace.metadata, null, 2)}
                                  </pre>
                                </div>
                              </motion.div>
                            )}
                          </AnimatePresence>
                        </div>
                      )}
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </ScrollArea>
          </CardContent>
        </Card>

        {/* Trace Details */}
        <Card className="lg:col-span-2 overflow-hidden border-opacity-40 backdrop-blur-sm">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center justify-between">
              <span className="flex items-center gap-2">
                <Activity className="h-5 w-5 text-primary" />
                Trace Details
              </span>
              {traceDetails && (
                <div className="flex items-center gap-1">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            const dataStr = JSON.stringify(traceDetails, null, 2)
                            const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`
                            const downloadAnchorNode = document.createElement('a')
                            downloadAnchorNode.setAttribute('href', dataUri)
                            downloadAnchorNode.setAttribute('download', `trace-${traceDetails.id}.json`)
                            document.body.appendChild(downloadAnchorNode)
                            downloadAnchorNode.click()
                            downloadAnchorNode.remove()

                            toast({
                              title: "Trace downloaded",
                              description: `Trace ${traceDetails.id.substring(0, 8)}... has been downloaded as JSON.`,
                              duration: 3000
                            })
                          }}
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Download trace as JSON</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            // Open trace in new window/tab
                            window.open(`/observability/traces/${traceDetails.id}`, '_blank')

                            toast({
                              title: "Trace opened in new tab",
                              description: `Trace ${traceDetails.id.substring(0, 8)}... has been opened in a new tab.`,
                              duration: 2000
                            })
                          }}
                        >
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Open trace in new tab</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            // Toggle code view
                            setActiveTab("metadata")

                            toast({
                              title: "Viewing trace code",
                              description: "Switched to metadata view to see the raw trace data.",
                              duration: 2000
                            })
                          }}
                        >
                          <Code className="h-4 w-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>View trace code</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              )}
            </CardTitle>
            <CardDescription>
              {selectedTraceId ? 'Detailed information about the selected trace' : 'Select a trace to view details'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {!selectedTraceId ? (
              <div className="h-[500px] flex items-center justify-center">
                <div className="text-center">
                  <Layers className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">Select a trace from the list to view details</p>
                </div>
              </div>
            ) : detailsLoading ? (
              <div className="space-y-4">
                <Skeleton className="h-8 w-3/4" />
                <Skeleton className="h-4 w-1/2" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-[400px] w-full" />
              </div>
            ) : !traceDetails ? (
              <div className="h-[500px] flex items-center justify-center">
                <div className="text-center">
                  <AlertCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">Failed to load trace details</p>
                </div>
              </div>
            ) : (
              <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
                <TabsList>
                  <TabsTrigger value="overview">Overview</TabsTrigger>
                  <TabsTrigger value="spans">Spans</TabsTrigger>
                  <TabsTrigger value="events">Events</TabsTrigger>
                  <TabsTrigger value="metadata">Metadata</TabsTrigger>
                </TabsList>

                <TabsContent value="overview" className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="text-sm text-muted-foreground">Name</div>
                      <div className="font-medium">{traceDetails.name}</div>
                    </div>
                    <div className="space-y-2">
                      <div className="text-sm text-muted-foreground">Status</div>
                      <div>{getStatusBadge(traceDetails.status)}</div>
                    </div>
                    <div className="space-y-2">
                      <div className="text-sm text-muted-foreground">Start Time</div>
                      <div className="font-medium">{new Date(traceDetails.startTime).toLocaleString()}</div>
                    </div>
                    <div className="space-y-2">
                      <div className="text-sm text-muted-foreground">End Time</div>
                      <div className="font-medium">{traceDetails.endTime ? new Date(traceDetails.endTime).toLocaleString() : 'N/A'}</div>
                    </div>
                    <div className="space-y-2">
                      <div className="text-sm text-muted-foreground">Duration</div>
                      <div className="font-medium">{formatDuration(traceDetails.duration)}</div>
                    </div>
                    <div className="space-y-2">
                      <div className="text-sm text-muted-foreground">User ID</div>
                      <div className="font-medium">{traceDetails.userId || 'N/A'}</div>
                    </div>
                  </div>

                  <div className="space-y-2 mt-4">
                    <div className="text-sm text-muted-foreground">Summary</div>
                    <Card className="bg-muted/30">
                      <CardContent className="p-4">
                        <div className="grid grid-cols-3 gap-4">
                          <div className="text-center">
                            <div className="text-2xl font-bold">{traceDetails.spans?.length || 0}</div>
                            <div className="text-xs text-muted-foreground">Spans</div>
                          </div>
                          <div className="text-center">
                            <div className="text-2xl font-bold">{traceDetails.events?.length || 0}</div>
                            <div className="text-xs text-muted-foreground">Events</div>
                          </div>
                          <div className="text-center">
                            <div className="text-2xl font-bold">{formatDuration(traceDetails.duration)}</div>
                            <div className="text-xs text-muted-foreground">Total Duration</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </TabsContent>

                <TabsContent value="spans">
                  {(traceDetails.spans?.length ?? 0) > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Name</TableHead>
                          <TableHead>Duration</TableHead>
                          <TableHead>Start Time</TableHead>
                          <TableHead>Status</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {traceDetails.spans?.map((span: any) => (
                          <TableRow key={span.id}>
                            <TableCell className="font-medium">{span.name}</TableCell>
                            <TableCell>{formatDuration(span.duration)}</TableCell>
                            <TableCell>{formatTime(span.startTime)}</TableCell>
                            <TableCell>{getStatusBadge(span.status)}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  ) : (
                    <div className="p-8 text-center">
                      <p className="text-muted-foreground">No spans found</p>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="events">
                  {(traceDetails.events?.length ?? 0) > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Name</TableHead>
                          <TableHead>Timestamp</TableHead>
                          <TableHead>Metadata</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {traceDetails.events?.map((event: any) => (
                          <TableRow key={event.id}>
                            <TableCell className="font-medium">{event.name}</TableCell>
                            <TableCell>{formatTime(event.timestamp)}</TableCell>
                            <TableCell>
                              {event.metadata && (
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-6 px-2 text-xs"
                                  onClick={() => toggleMetadata(event.id)}
                                >
                                  {expandedMetadata[event.id] ? (
                                    <ChevronDown className="h-3 w-3 mr-1" />
                                  ) : (
                                    <ChevronRight className="h-3 w-3 mr-1" />
                                  )}
                                  View
                                </Button>
                              )}
                              <AnimatePresence>
                                {expandedMetadata[event.id] && event.metadata && (
                                  <motion.div
                                    initial={{ opacity: 0, height: 0 }}
                                    animate={{ opacity: 1, height: "auto" }}
                                    exit={{ opacity: 0, height: 0 }}
                                    transition={{ duration: 0.2 }}
                                    className="overflow-hidden"
                                  >
                                    <div className="mt-2 text-xs bg-muted/50 p-2 rounded-md">
                                      <pre className="whitespace-pre-wrap break-all">
                                        {JSON.stringify(event.metadata, null, 2)}
                                      </pre>
                                    </div>
                                  </motion.div>
                                )}
                              </AnimatePresence>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  ) : (
                    <div className="p-8 text-center">
                      <p className="text-muted-foreground">No events found</p>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="metadata">
                  {traceDetails.metadata ? (
                    <Card className="bg-muted/30">
                      <CardContent className="p-4">
                        <pre className="whitespace-pre-wrap break-all text-sm">
                          {JSON.stringify(traceDetails.metadata, null, 2)}
                        </pre>
                      </CardContent>
                    </Card>
                  ) : (
                    <div className="p-8 text-center">
                      <p className="text-muted-foreground">No metadata available</p>
                    </div>
                  )}
                </TabsContent>
              </Tabs>
            )}
          </CardContent>
          <CardFooter className="flex justify-end pt-0">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="gap-1"
                    onClick={() => {
                      if (selectedTraceId) {
                        // Refetch trace details
                        toast({
                          title: "Refreshing trace details",
                          description: "Fetching the latest trace information...",
                          duration: 2000
                        })
                      }
                    }}
                  >
                    <RefreshCw className="h-3.5 w-3.5" />
                    <span>Refresh</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Refresh trace details</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </CardFooter>
        </Card>
      </div>
    </div>
  )
}

================
File: components/observability/tracing-timeline.tsx
================
"use client"

import { useState, useEffect, useRef } from "react"
import { motion } from "framer-motion"
import * as d3 from "d3"
import {
  Activity,
  Info,
  Maximize2,
  Minimize2,
  Search
} from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { useToast } from "@/components/ui/use-toast"

interface Trace {
  id: string
  name: string
  startTime: string
  endTime?: string
  duration?: number
  status: string
  userId?: string
  metadata?: any
}

interface TracingTimelineProps {
  traces: Trace[]
  isLoading: boolean
  selectedTraceId: string | null
  onSelectTrace: (traceId: string) => void
}

export function TracingTimeline({
  traces,
  isLoading,
  selectedTraceId,
  onSelectTrace
}: TracingTimelineProps) {
  const { toast } = useToast()
  const [timelineData, setTimelineData] = useState<any[]>([])
  const [timeScale, setTimeScale] = useState<string>("relative")
  const [filterStatus, setFilterStatus] = useState<string>("all")
  const [searchQuery, setSearchQuery] = useState<string>("")
  const [zoomLevel, setZoomLevel] = useState<number>(1)
  const [hoveredTrace, setHoveredTrace] = useState<string | null>(null)

  const svgRef = useRef<SVGSVGElement>(null)
  const tooltipRef = useRef<HTMLDivElement>(null)

  // Process traces for timeline visualization
  useEffect(() => {
    if (!traces || traces.length === 0) return

    // Filter traces based on status and search query
    const filteredTraces = traces.filter(trace => {
      const matchesStatus = filterStatus === "all" || trace.status === filterStatus
      const matchesSearch = !searchQuery ||
        trace.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        trace.id.toLowerCase().includes(searchQuery.toLowerCase())

      return matchesStatus && matchesSearch
    })

    // Sort traces by start time
    const sortedTraces = [...filteredTraces].sort((a, b) => {
      return new Date(a.startTime).getTime() - new Date(b.startTime).getTime()
    })

    // Process for timeline visualization
    const timelineItems = sortedTraces.map((trace, index) => {
      const startTime = new Date(trace.startTime).getTime()
      const endTime = trace.endTime ? new Date(trace.endTime).getTime() : startTime + (trace.duration || 1000)

      return {
        id: trace.id,
        name: trace.name,
        startTime,
        endTime,
        duration: trace.duration || (endTime - startTime),
        status: trace.status,
        index,
        metadata: trace.metadata
      }
    })

    setTimelineData(timelineItems)
  }, [traces, filterStatus, searchQuery])

  // D3 Timeline Visualization
  useEffect(() => {
    if (!svgRef.current || timelineData.length === 0) return

    const svg = d3.select(svgRef.current)
    const tooltip = d3.select(tooltipRef.current)

    // Clear previous visualization
    svg.selectAll("*").remove()

    // Set dimensions
    const margin = { top: 20, right: 30, bottom: 40, left: 100 }
    const width = svgRef.current.clientWidth - margin.left - margin.right
    const height = Math.max(500, timelineData.length * 30) - margin.top - margin.bottom

    // Create scales
    const y = d3.scaleBand()
      .domain(timelineData.map(d => d.id))
      .range([0, height])
      .padding(0.2)

    // Determine time range for x-axis
    let minTime, maxTime

    if (timeScale === "relative") {
      // Relative time scale - normalize to the earliest trace
      minTime = d3.min(timelineData, d => d.startTime) || 0
      maxTime = d3.max(timelineData, d => d.endTime) || 0

      // Add padding
      const timeRange = maxTime - minTime
      minTime = minTime - timeRange * 0.05
      maxTime = maxTime + timeRange * 0.05
    } else {
      // Absolute time scale - use actual timestamps
      minTime = d3.min(timelineData, d => d.startTime) || 0
      maxTime = d3.max(timelineData, d => d.endTime) || 0
    }

    const x = d3.scaleTime()
      .domain([new Date(minTime), new Date(maxTime)])
      .range([0, width * zoomLevel])

    // Create axes
    const xAxis = d3.axisBottom(x)
      .ticks(10)
      .tickFormat(d => {
        if (timeScale === "relative") {
          // Show time relative to first trace
          const relativeMs = (d as Date).getTime() - minTime
          return `${Math.floor(relativeMs / 1000)}s`
        } else {
          // Show actual time
          return d3.timeFormat("%H:%M:%S")(d as Date)
        }
      })

    const yAxis = d3.axisLeft(y)
      .tickFormat(d => {
        const trace = timelineData.find(t => t.id === d)
        return trace ? `${trace.name.substring(0, 15)}${trace.name.length > 15 ? '...' : ''}` : ''
      })

    // Create container group with margin
    const g = svg.append("g")
      .attr("transform", `translate(${margin.left},${margin.top})`)

    // Add axes
    g.append("g")
      .attr("class", "x-axis")
      .attr("transform", `translate(0,${height})`)
      .call(xAxis)
      .selectAll("text")
      .attr("fill", "var(--muted-foreground)")
      .attr("font-size", "10px")
      .attr("transform", "rotate(-45)")
      .attr("text-anchor", "end")

    g.append("g")
      .attr("class", "y-axis")
      .call(yAxis)
      .selectAll("text")
      .attr("fill", "var(--muted-foreground)")
      .attr("font-size", "10px")

    // Add grid lines
    g.append("g")
      .attr("class", "grid")
      .attr("transform", `translate(0,${height})`)
      .call(
        d3.axisBottom(x)
          .ticks(10)
          .tickSize(-height)
          .tickFormat(() => '')
      )
      .selectAll("line")
      .attr("stroke", "rgba(255,255,255,0.1)")

    // Add timeline bars
    const bars = g.selectAll(".bar")
      .data(timelineData)
      .enter()
      .append("g")
      .attr("class", "bar")
      .attr("transform", d => `translate(0,${y(d.id)})`)

    // Add background for bars
    bars.append("rect")
      .attr("class", "bar-bg")
      .attr("x", d => x(new Date(d.startTime)))
      .attr("width", d => Math.max(2, x(new Date(d.endTime)) - x(new Date(d.startTime))))
      .attr("height", y.bandwidth())
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("fill", d => {
        if (d.status === "success") return "url(#successGradient)"
        if (d.status === "error") return "url(#errorGradient)"
        return "url(#pendingGradient)"
      })
      .attr("stroke", d => d.id === selectedTraceId ? "var(--primary)" : "rgba(255,255,255,0.2)")
      .attr("stroke-width", d => d.id === selectedTraceId ? 2 : 1)
      .attr("opacity", d => d.id === hoveredTrace || d.id === selectedTraceId ? 1 : 0.7)
      .on("mouseover", (event, d) => {
        setHoveredTrace(d.id)

        // Show tooltip
        tooltip
          .style("opacity", 1)
          .style("left", `${event.pageX + 10}px`)
          .style("top", `${event.pageY + 10}px`)
          .html(`
            <div class="font-medium">${d.name}</div>
            <div class="text-xs text-muted-foreground">ID: ${d.id}</div>
            <div class="text-xs">Duration: ${d.duration}ms</div>
            <div class="text-xs">Status: ${d.status}</div>
          `)
      })
      .on("mouseout", () => {
        setHoveredTrace(null)
        tooltip.style("opacity", 0)
      })
      .on("click", (_, d) => {
        onSelectTrace(d.id)
        toast({
          title: "Trace selected",
          description: `Trace ${d.name.substring(0, 20)}${d.name.length > 20 ? '...' : ''} has been selected.`,
          duration: 2000
        })
      })

    // Add gradients
    const defs = svg.append("defs")

    // Success gradient
    const successGradient = defs.append("linearGradient")
      .attr("id", "successGradient")
      .attr("x1", "0%")
      .attr("y1", "0%")
      .attr("x2", "100%")
      .attr("y2", "0%")

    successGradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", "#10b981")
      .attr("stop-opacity", 0.8)

    successGradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", "#059669")
      .attr("stop-opacity", 0.8)

    // Error gradient
    const errorGradient = defs.append("linearGradient")
      .attr("id", "errorGradient")
      .attr("x1", "0%")
      .attr("y1", "0%")
      .attr("x2", "100%")
      .attr("y2", "0%")

    errorGradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", "#ef4444")
      .attr("stop-opacity", 0.8)

    errorGradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", "#dc2626")
      .attr("stop-opacity", 0.8)

    // Pending gradient
    const pendingGradient = defs.append("linearGradient")
      .attr("id", "pendingGradient")
      .attr("x1", "0%")
      .attr("y1", "0%")
      .attr("x2", "100%")
      .attr("y2", "0%")

    pendingGradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", "#3b82f6")
      .attr("stop-opacity", 0.8)

    pendingGradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", "#2563eb")
      .attr("stop-opacity", 0.8)

  }, [timelineData, selectedTraceId, hoveredTrace, timeScale, zoomLevel, onSelectTrace])

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 260,
        damping: 20
      }
    }
  }

  return (
    <motion.div
      className="space-y-4"
      variants={containerVariants}
      initial="hidden"
      animate="show"
    >
      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search traces..."
            className="pl-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>

        <Select value={filterStatus} onValueChange={setFilterStatus}>
          <SelectTrigger className="w-[150px]">
            <SelectValue placeholder="Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Statuses</SelectItem>
            <SelectItem value="success">Success</SelectItem>
            <SelectItem value="error">Error</SelectItem>
          </SelectContent>
        </Select>

        <Select value={timeScale} onValueChange={setTimeScale}>
          <SelectTrigger className="w-[150px]">
            <SelectValue placeholder="Time Scale" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="relative">Relative Time</SelectItem>
            <SelectItem value="absolute">Absolute Time</SelectItem>
          </SelectContent>
        </Select>

        <div className="flex gap-2">
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              const newZoom = Math.max(0.5, zoomLevel - 0.5);
              setZoomLevel(newZoom);
              toast({
                title: "Zoom level changed",
                description: `Timeline zoom decreased to ${newZoom}x`,
                duration: 2000
              });
            }}
            disabled={zoomLevel <= 0.5}
          >
            <Minimize2 className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              const newZoom = Math.min(5, zoomLevel + 0.5);
              setZoomLevel(newZoom);
              toast({
                title: "Zoom level changed",
                description: `Timeline zoom increased to ${newZoom}x`,
                duration: 2000
              });
            }}
            disabled={zoomLevel >= 5}
          >
            <Maximize2 className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Timeline Visualization */}
      <motion.div variants={itemVariants}>
        <Card className="overflow-hidden border-opacity-40 backdrop-blur-sm">
        <CardHeader className="pb-2">
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center gap-2">
              <Activity className="h-5 w-5 text-primary" />
              Trace Timeline
            </span>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <Info className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p className="max-w-xs">
                    This timeline shows traces over time. Click on a trace to select it.
                    Use the controls above to filter, search, and adjust the view.
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </CardTitle>
          <CardDescription>
            Visualize traces over time with their duration and status
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          {isLoading ? (
            <div className="h-[500px] flex items-center justify-center">
              <Skeleton className="h-[400px] w-full m-6" />
            </div>
          ) : timelineData.length === 0 ? (
            <div className="h-[200px] flex items-center justify-center">
              <p className="text-muted-foreground">No traces found matching the criteria</p>
            </div>
          ) : (
            <div className="relative">
              <svg
                ref={svgRef}
                className="w-full"
                style={{
                  height: `${Math.max(500, timelineData.length * 30)}px`,
                  overflow: "visible"
                }}
              />
              <div
                ref={tooltipRef}
                className="absolute pointer-events-none opacity-0 bg-background/95 backdrop-blur-sm p-3 border border-border rounded-lg shadow-lg z-50 transition-opacity"
              />
            </div>
          )}
        </CardContent>
      </Card>
      </motion.div>
    </motion.div>
  )
}

================
File: components/chat/ai-sdk-chatHelper.tsx
================
// Helper for chat content rendering and parsing
import React from 'react';
import { z } from 'zod';

import { CodeBlock } from './code-block';
import { MermaidDiagram } from './mermaid-diagram';
import { ImageDisplay, type ImageDisplayProps } from './image-display';
import { AIImageGenerator, type AIImageGeneratorProps } from './ai-image-generator';
import { ComputerUse, type ComputerUseProps } from './computer-use';
import { DataVisualization, type DataPoint, type DataSeries, type DataVisualizationProps } from './data-visualization';
import { VisualizationWithTracing, type VisualizationWithTracingProps } from './visualization-with-tracing';
import { DataTable, type Column as DataTableColumn, type DataTableProps } from './data-table';
import { BrowserDisplay, type BrowserDisplayProps } from './browser-display';
import { ScreenShare, type ScreenShareProps } from './screen-share';
import { InteractiveMap, type Location as InteractiveMapLocation, type InteractiveMapProps } from './interactive-map';
import { InteractiveForm, type FormField as InteractiveFormField, type InteractiveFormProps } from './interactive-form';
import { AudioPlayer, type AudioPlayerProps } from './audio-player';
import { ModelViewer, type ModelViewerProps } from './model-viewer';
import { CanvasDisplay } from './canvasDisplay';
import styles from './ai-sdk-chatHelper.module.css';

// --- Zod Schemas for Component Props ---

const ImageDisplayPropsSchema: z.ZodType<ImageDisplayProps> = z.object({
  src: z.string().min(1, "Image source (src) is required."),
  alt: z.string(),
  className: z.string().optional(),
});

const AIImageGeneratorPropsSchema: z.ZodType<AIImageGeneratorProps> = z.object({
  initialPrompt: z.string().min(1, "Initial prompt is required."),
});

const ComputerUsePropsSchema: z.ZodType<Omit<ComputerUseProps, 'onRun'>> = z.object({
  title: z.string().min(1, "Task title is required."),
  content: z.string().min(1, "Task content is required."),
  isTerminal: z.boolean().optional(),
  isRunnable: z.boolean().optional(),
  className: z.string().optional(),
});

const DataPointSchema: z.ZodType<DataPoint> = z.object({
  label: z.string(),
  value: z.number(),
  color: z.string().optional(),
  x: z.union([z.string(), z.number()]).optional(),
  y: z.number().optional(),
  z: z.number().optional(),
  size: z.number().optional(),
});

const DataSeriesSchema: z.ZodType<DataSeries> = z.object({
  name: z.string(),
  data: z.union([
    z.array(DataPointSchema),
    z.array(z.number())
  ]),
  color: z.string().optional(),
  type: z.string().optional(),
});

const DataVisualizationPropsSchema: z.ZodType<DataVisualizationProps> = z.object({
  title: z.string().optional(),
  data: z.union([z.array(DataPointSchema), z.array(DataSeriesSchema)]),
  type: z.enum(["bar", "line", "pie", "doughnut", "radar", "polarArea", "scatter", "area", "heatmap", "bubble", "radialBar", "treemap"]).optional(),
  labels: z.array(z.string()).optional(),
  className: z.string().optional(),
  xAxisLabel: z.string().optional(),
  yAxisLabel: z.string().optional(),
  stacked: z.boolean().optional(),
  is3D: z.boolean().optional(),
  isMultiSeries: z.boolean().optional(),
  theme: z.enum(["light", "dark", "colorful", "monochrome"]).optional(),
  showLegend: z.boolean().optional(),
  showGrid: z.boolean().optional(),
  showTooltip: z.boolean().optional(),
  showAnimation: z.boolean().optional(),
  library: z.enum(["chartjs", "plotly", "recharts"]).optional(),
});

const VisualizationWithTracingPropsSchema: z.ZodType<VisualizationWithTracingProps> = z.object({
  title: z.string().optional(),
  data: z.union([
    z.array(DataPointSchema),
    z.array(DataSeriesSchema),
    z.record(z.unknown()),
    z.number(),
    z.string()
  ]),
  type: z.string().optional(),
  className: z.string().optional(),
});

const DataTableColumnSchema: z.ZodType<Omit<DataTableColumn, 'render'> & { render?: undefined }> = z.object({
  key: z.string(),
  title: z.string(),
  sortable: z.boolean().optional(),
  filterable: z.boolean().optional(),
});

const DataTablePropsSchema: z.ZodType<Omit<DataTableProps, 'columns'> & { columns: Array<Omit<DataTableColumn, 'render'>> }> = z.object({
  title: z.string().optional(),
  data: z.array(z.record(z.unknown())),
  columns: z.array(DataTableColumnSchema),
  className: z.string().optional(),
  pagination: z.boolean().optional(),
  pageSize: z.number().optional(),
});

const BrowserDisplayPropsSchema: z.ZodType<BrowserDisplayProps> = z.object({
  url: z.string().url("Invalid URL for BrowserDisplay."),
  title: z.string().optional(),
  className: z.string().optional(),
});

const ScreenSharePropsSchema: z.ZodType<ScreenShareProps> = z.object({
  src: z.string().min(1, "ScreenShare source (src) is required."),
  title: z.string().optional(),
  isVideo: z.boolean().optional(),
  className: z.string().optional(),
});

const InteractiveMapLocationSchema: z.ZodType<InteractiveMapLocation> = z.object({
  lat: z.number(),
  lng: z.number(),
  title: z.string().optional(),
  description: z.string().optional(),
});

const InteractiveMapPropsSchema: z.ZodType<InteractiveMapProps> = z.object({
  title: z.string().optional(),
  center: z.tuple([z.number(), z.number()]).optional(),
  zoom: z.number().optional(),
  locations: z.array(InteractiveMapLocationSchema).optional(),
  className: z.string().optional(),
});

const InteractiveFormFieldSchema: z.ZodType<Omit<InteractiveFormField, 'validation'> & { validation?: { pattern?: string; min?: number; max?: number; minLength?: number; maxLength?: number; errorMessage?: string } }> = z.object({
  id: z.string(),
  type: z.enum(['text', 'textarea', 'number', 'email', 'checkbox', 'radio', 'select', 'date']),
  label: z.string(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  options: z.array(z.object({ value: z.string(), label: z.string() })).optional(),
  validation: z.object({
    pattern: z.string().optional(),
    min: z.number().optional(),
    max: z.number().optional(),
    minLength: z.number().optional(),
    maxLength: z.number().optional(),
    errorMessage: z.string().optional(),
  }).optional(),
});

const InteractiveFormPropsSchema: z.ZodType<Omit<InteractiveFormProps, 'onSubmit' | 'onCancel'> & { onSubmit?: undefined; onCancel?: undefined }> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  fields: z.array(InteractiveFormFieldSchema),
  submitLabel: z.string().optional(),
  cancelLabel: z.string().optional(),
  className: z.string().optional(),
});

const AudioPlayerPropsSchema: z.ZodType<AudioPlayerProps> = z.object({
  src: z.string().min(1, "Audio source (src) is required."),
  title: z.string().optional(),
  waveform: z.boolean().optional(),
  className: z.string().optional(),
});

const ModelViewerPropsSchema: z.ZodType<ModelViewerProps> = z.object({
  modelUrl: z.string().min(1, "Model URL (modelUrl) is required."),
  title: z.string().optional(),
  format: z.enum(["gltf", "glb", "obj", "stl"]).optional(),
  autoRotate: z.boolean().optional(),
  backgroundColor: z.string().optional(),
  className: z.string().optional(),
});

const CanvasDisplayPropsSchema = z.object({
  width: z.number().optional(),
  height: z.number().optional(),
  className: z.string().optional(),
  style: z.any().optional(),
  children: z.any().optional(),
});

// --- Error Display Component ---
export interface ParseErrorDisplayProps {
  componentName: string;
  errorMessage: string;
  originalText: string;
  validationErrors?: z.ZodFormattedError<unknown>;
}

const ParseErrorDisplay: React.FC<ParseErrorDisplayProps> = ({ componentName, errorMessage, originalText, validationErrors }) => (
  <div className={styles.parseErrorRoot}>
    <p className={styles.parseErrorTitle}>
      Error rendering &lt;{componentName}&gt;:
    </p>
    <p className={styles.parseErrorMessage}>{errorMessage}</p>
    {validationErrors && (
      <pre className={styles.parseErrorPre}>
        {JSON.stringify(validationErrors, null, 2)}
      </pre>
    )}
    <p className={styles.parseErrorOriginalLabel}>
      Original text:
      <code className={styles.parseErrorCode}>{originalText}</code>
    </p>
  </div>
);


/**
 * Render message content by parsing code blocks and special component tags
 */
export function renderContent(content: string): React.ReactNode {
  const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;

  const customRegexes = [
    {
      regex: /<ImageDisplay\s+src="([^"]+)"(?:\s+alt="([^"]*)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = { src: m[1], alt: m[2] || '' };
        const result = ImageDisplayPropsSchema.safeParse(props);
        if (result.success) {
          return <ImageDisplay key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="ImageDisplay" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<AIImageGenerator\s+prompt="([^"]+)"(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = { initialPrompt: m[1] };
        const result = AIImageGeneratorPropsSchema.safeParse(props);
        if (result.success) {
          return <AIImageGenerator key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="AIImageGenerator" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<ComputerUse\s+task="([^"]+)"(?:\s+showSteps="(true|false)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = { title: m[1], content: m[1], isRunnable: m[2] === 'true' };
        const result = ComputerUsePropsSchema.safeParse(props);
        if (result.success) {
          return <ComputerUse key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="ComputerUse" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<DataVisualization\s+data='([^']+)'(?:\s+type="([^"]+)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        try {
          const jsonData = JSON.parse(m[1]);
          const props = { data: jsonData, type: m[2] };
          const result = DataVisualizationPropsSchema.safeParse(props);
          if (result.success) {
            return <DataVisualization key={key} {...result.data} />;
          }
          return <ParseErrorDisplay key={key} componentName="DataVisualization" errorMessage="Invalid props after JSON parse." validationErrors={result.error.format()} originalText={m[0]} />;
        } catch (e: unknown) {
          const message = e && typeof e === 'object' && 'message' in e ? String((e as { message?: string }).message) : 'Unknown error';
          return <ParseErrorDisplay key={key} componentName="DataVisualization" errorMessage={`JSON parsing error: ${message}`} originalText={m[0]} />;
        }
      }
    },
    {
      regex: /<VisualizationWithTracing\s+data='([^']+)'(?:\s+type="([^"]+)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        try {
          const jsonData = JSON.parse(m[1]);
          const props = { data: jsonData, type: m[2] }; 
          const result = VisualizationWithTracingPropsSchema.safeParse(props); 
          if (result.success) {
            return <VisualizationWithTracing key={key} data={result.data.data} type={result.data.type} />;
          }
          return <ParseErrorDisplay key={key} componentName="VisualizationWithTracing" errorMessage="Invalid props after JSON parse." validationErrors={result.error.format()} originalText={m[0]} />;
        } catch (e: unknown) {
          const message = e && typeof e === 'object' && 'message' in e ? String((e as { message?: string }).message) : 'Unknown error';
          return <ParseErrorDisplay key={key} componentName="VisualizationWithTracing" errorMessage={`JSON parsing error: ${message}`} originalText={m[0]} />;
        }
      }
    },
    {
      regex: /<DataTable\s+data='([^']+)'(?:\s+columns='([^']+)')?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        try {
          const jsonData = JSON.parse(m[1]);
          const jsonColumns = m[2] ? JSON.parse(m[2]) : undefined;
          const props = { data: jsonData, columns: jsonColumns };
          const result = DataTablePropsSchema.safeParse(props);
          if (result.success) {
            return <DataTable key={key} data={result.data.data} columns={result.data.columns || []} />;
          }
          return <ParseErrorDisplay key={key} componentName="DataTable" errorMessage="Invalid props after JSON parse." validationErrors={result.error.format()} originalText={m[0]} />;
        } catch (e: unknown) {
          const message = e && typeof e === 'object' && 'message' in e ? String((e as { message?: string }).message) : 'Unknown error';
          return <ParseErrorDisplay key={key} componentName="DataTable" errorMessage={`JSON parsing error: ${message}`} originalText={m[0]} />;
        }
      }
    },
    {
      regex: /<BrowserDisplay\s+url="([^"]+)"(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = { url: m[1] };
        const result = BrowserDisplayPropsSchema.safeParse(props);
        if (result.success) {
          return <BrowserDisplay key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="BrowserDisplay" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<ScreenShare\s+src="([^"]+)"(?:\s+title="([^"]*)")?(?:\s+isVideo="(true|false)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = {
          src: m[1],
          title: m[2] || 'Screen Recording',
          isVideo: m[3] !== 'false'
        };
        const result = ScreenSharePropsSchema.safeParse(props);
        if (result.success) {
          return <ScreenShare key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="ScreenShare" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<InteractiveMap\s+center="\[\s*([0-9.-]+)\s*,\s*([0-9.-]+)\s*\]"(?:\s+zoom="(\d+)")?(?:\s+locations='([^']*)')?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        try {
          const centerTuple: [number, number] = [parseFloat(m[1]), parseFloat(m[2])];
          const zoomNum = m[3] ? parseInt(m[3], 10) : undefined;
          const locationsArray = m[4] ? JSON.parse(m[4]) : undefined;

          const props = {
            center: centerTuple,
            zoom: zoomNum,
            locations: locationsArray
          };
          const result = InteractiveMapPropsSchema.safeParse(props);
          if (result.success) {
            return <InteractiveMap key={key} {...result.data} />;
          }
          return <ParseErrorDisplay key={key} componentName="InteractiveMap" errorMessage="Invalid props after parsing." validationErrors={result.error.format()} originalText={m[0]} />;
        } catch (e: unknown) {
          const message = e && typeof e === 'object' && 'message' in e ? String((e as { message?: string }).message) : 'Unknown error';
          return <ParseErrorDisplay key={key} componentName="InteractiveMap" errorMessage={`Attribute parsing error: ${message}`} originalText={m[0]} />;
        }
      }
    },
    {
      regex: /<InteractiveForm\s+title="([^"]+)"(?:\s+fields='([^']*)')?(?:\s+submitLabel="([^"]*)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        try {
          const fieldsArray = m[2] ? JSON.parse(m[2]) : undefined;
          const props = {
            title: m[1],
            fields: fieldsArray,
            submitLabel: m[3] || undefined
          };
          const result = InteractiveFormPropsSchema.safeParse(props);
          if (result.success) {
            return <InteractiveForm key={key} {...{ ...result.data, fields: result.data.fields || [] }} />;
          }
          return <ParseErrorDisplay key={key} componentName="InteractiveForm" errorMessage="Invalid props after parsing." validationErrors={result.error.format()} originalText={m[0]} />;
        } catch (e: unknown) {
          const message = e && typeof e === 'object' && 'message' in e ? String((e as { message?: string }).message) : 'Unknown error';
          return <ParseErrorDisplay key={key} componentName="InteractiveForm" errorMessage={`Attribute parsing error: ${message}`} originalText={m[0]} />;
        }
      }
    },
    {
      regex: /<AudioPlayer\s+src="([^"]+)"(?:\s+title="([^"]*)")?(?:\s+waveform="(true|false)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = {
          src: m[1],
          title: m[2],
          waveform: m[3] === 'true'
        };
        const result = AudioPlayerPropsSchema.safeParse(props);
        if (result.success) {
          return <AudioPlayer key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="AudioPlayer" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<ModelViewer\s+modelUrl="([^"]+)"(?:\s+title="([^"]*)")?(?:\s+format="(gltf|glb|obj|stl)")?(?:\s+autoRotate="(true|false)")?(?:\s+backgroundColor="([^"]*)")?(?:[^>]*)\/?>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const props = {
          modelUrl: m[1],
          title: m[2],
          format: m[3] as ModelViewerProps['format'],
          autoRotate: m[4] === 'true',
          backgroundColor: m[5]
        };
        const result = ModelViewerPropsSchema.safeParse(props);
        if (result.success) {
          return <ModelViewer key={key} {...result.data} />;
        }
        return <ParseErrorDisplay key={key} componentName="ModelViewer" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
    {
      regex: /<CanvasDisplay(?:\s+width="(\d+)")?(?:\s+height="(\d+)")?(?:\s+className="([^"]*)")?\s*>([\s\S]*?)<\/CanvasDisplay>/g,
      render: (m: RegExpExecArray, key: string | number) => {
        const width = m[1] ? parseInt(m[1], 10) : undefined;
        const height = m[2] ? parseInt(m[2], 10) : undefined;
        const className = m[3] || undefined;
        const children = m[4] ? m[4] : undefined;
        const props = { width, height, className, children };
        const result = CanvasDisplayPropsSchema.safeParse(props);
        if (result.success) {
          return <CanvasDisplay key={key} {...result.data}>{children}</CanvasDisplay>;
        }
        return <ParseErrorDisplay key={key} componentName="CanvasDisplay" errorMessage="Invalid props." validationErrors={result.error.format()} originalText={m[0]} />;
      }
    },
  ];

  const parts: React.ReactNode[] = [];
  let lastIndexProcessed = 0;
  let componentKeyIndex = 0;

  const regexConfigs = [...customRegexes];

  while (lastIndexProcessed < content.length) {
    let earliestMatch: { match: RegExpExecArray; renderFunc: (m: RegExpExecArray, key: string | number) => React.ReactNode; regex: RegExp } | null = null;

    for (const config of regexConfigs) {
      config.regex.lastIndex = lastIndexProcessed;
      const currentMatch = config.regex.exec(content);

      if (currentMatch) {
        if (!earliestMatch || currentMatch.index < earliestMatch.match.index) {
          earliestMatch = { match: currentMatch, renderFunc: config.render, regex: config.regex };
        }
      }
    }

    if (earliestMatch) {
      if (earliestMatch.match.index > lastIndexProcessed) {
        parts.push(
          <p key={`text-${componentKeyIndex++}`} className="whitespace-pre-wrap">
            {content.slice(lastIndexProcessed, earliestMatch.match.index)}
          </p>
        );
      }
      parts.push(earliestMatch.renderFunc(earliestMatch.match, `component-${componentKeyIndex++}`));
      lastIndexProcessed = earliestMatch.match.index + earliestMatch.match[0].length;

    } else {
      break;
    }
  }

  const remainingTextAfterCustom = content.slice(lastIndexProcessed);
  if (remainingTextAfterCustom) {
    let lastCodeBlockIndex = 0;
    let codeMatch: RegExpExecArray | null;
    codeBlockRegex.lastIndex = 0;

    while ((codeMatch = codeBlockRegex.exec(remainingTextAfterCustom)) !== null) {
      if (codeMatch.index > lastCodeBlockIndex) {
        parts.push(
          <p key={`text-code-${componentKeyIndex++}`} className="whitespace-pre-wrap">
            {remainingTextAfterCustom.slice(lastCodeBlockIndex, codeMatch.index)}
          </p>
        );
      }
      const lang = codeMatch[1] || 'plaintext';
      const codeContent = codeMatch[2];
      parts.push(
        lang === 'mermaid'
          ? <MermaidDiagram key={`mermaid-${componentKeyIndex++}`} code={codeContent} />
          : <CodeBlock key={`codeblock-${componentKeyIndex++}`} language={lang} code={codeContent} />
      );
      lastCodeBlockIndex = codeBlockRegex.lastIndex;
    }

    if (lastCodeBlockIndex < remainingTextAfterCustom.length) {
      parts.push(
        <p key={`text-final-${componentKeyIndex++}`} className="whitespace-pre-wrap">
          {remainingTextAfterCustom.slice(lastCodeBlockIndex)}
        </p>
      );
    }
  } else if (parts.length === 0 && lastIndexProcessed === 0 && content.length > 0) {
    parts.push(<p key={`fulltext-${componentKeyIndex++}`} className="whitespace-pre-wrap">{content}</p>);
  }

  return parts.length > 0 ? parts : <p key="empty" className="whitespace-pre-wrap"></p>;
}

================
File: components/chat/enhanced-chat.tsx
================
"use client"

import { SelectItem } from "@/components/ui/select"
import { SelectContent } from "@/components/ui/select"
import { SelectValue } from "@/components/ui/select"
import { SelectTrigger } from "@/components/ui/select"
import { Select } from "@/components/ui/select"
import type React from "react"

import { useRef, useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import {
  Bot, Send, Loader2, Code, FileText, Image, BarChart, Globe, Monitor,
  Terminal, Music, MapPin, Table, FormInput, Wand2, Box
} from "lucide-react"
import { AnimatePresence } from "framer-motion"
import { nanoid } from "nanoid"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Card } from "@/components/ui/card"
import { Avatar } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ChatSidebar } from "./chat-sidebar"
import { ChatMessage } from "./chat-message"
import { CodeBlock } from "./code-block"
import { MermaidDiagram } from "./mermaid-diagram"
import { ImageDisplay } from "./image-display"
import { BrowserDisplay } from "./browser-display"
import { ScreenShare } from "./screen-share"
import { ComputerUse } from "./computer-use"
import { DataVisualization } from "./data-visualization"
import { InteractiveMap } from "./interactive-map"
import { ModelViewer } from "./model-viewer"
import { DataTable } from "./data-table"
import { InteractiveForm } from "./interactive-form"
import { AIImageGenerator } from "./ai-image-generator"
import { AudioPlayer } from "./audio-player"
import { FileUpload } from "./file-upload"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"
import { useChat, type Message } from "@/hooks/use-chat"
import { renderContent } from "./ai-sdk-chatHelper"

interface EnhancedChatProps {
  initialThreadId?: string
  initialModelId?: string
  initialMessages?: Message[]
  agentId?: string
  className?: string
}

export function EnhancedChat({
  initialThreadId,
  initialModelId,
  initialMessages = [],
  agentId,
  className,
}: EnhancedChatProps) {
  const router = useRouter()
  const [selectedModelId, setSelectedModelId] = useState<string>(initialModelId || "")
  const [selectedTools, setSelectedTools] = useState<string[]>([])
  const [temperature, setTemperature] = useState(0.7)
  const [maxTokens, setMaxTokens] = useState(1000)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const [activeTab, setActiveTab] = useState<string>("chat")

  // Use our custom chat hook
  const {
    messages,
    input,
    setInput,
    isLoading,
    threadId,
    setThreadId,
    attachments,
    setAttachments,
    sendMessage,
    fetchMessages,
    runSequentialGenerations,
  } = useChat({
    initialMessages,
    initialThreadId,
    apiEndpoint: agentId ? `/api/agents/${agentId}/run` : "/api/chat",
    onFinish: () => {
      // Refresh threads to update the list
      refreshThreads()
    }
  })

  // Fetch models from Supabase
  const { data: modelsData, isLoading: isLoadingModels } = useSupabaseFetch({
    endpoint: "/api/models",
    resourceName: "Models",
    dataKey: "models",
  })

  // Type the models data
  const models: { id: string; name: string }[] = Array.isArray(modelsData)
    ? modelsData.map((model: any) => ({
        id: String(model?.id || ''),
        name: String(model?.name || '')
      }))
    : []

  // Fetch tools from Supabase
  const { data: toolsData, isLoading: isLoadingTools } = useSupabaseFetch({
    endpoint: "/api/tools",
    resourceName: "Tools",
    dataKey: "tools",
  })

  // Type the tools data
  const tools: { id: string; name: string; description: string }[] = Array.isArray(toolsData)
    ? toolsData.map((tool: any) => ({
        id: String(tool?.id || ''),
        name: String(tool?.name || ''),
        description: String(tool?.description || '')
      }))
    : []

  // Fetch threads from LibSQL
  const {
    data: threadsData,
    isLoading: isLoadingThreads,
    refetch: refreshThreads,
  } = useSupabaseFetch({
    endpoint: "/api/memory_threads",
    resourceName: "Threads",
    dataKey: "threads",
  })

  // Type the threads data
  const threads: { id: string; name: string; updated_at: string }[] = Array.isArray(threadsData)
    ? threadsData.map((thread: any) => ({
        id: String(thread?.id || ''),
        name: String(thread?.name || ''),
        updated_at: String(thread?.updated_at || new Date().toISOString())
      }))
    : []

  // Scroll to bottom when messages change
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }, [messages])

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "inherit"
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
    }
  }, [input])

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    await sendMessage({
      message: input,
      attachments,
      modelId: selectedModelId,
      tools: selectedTools,
      temperature,
      maxTokens,
      agentId
    })
  }

  // Handle file upload
  const handleFileUpload = (files: File[]) => {
    // Process each file
    files.forEach((file) => {
      const reader = new FileReader()

      reader.onload = (e) => {
        const fileType = file.type.split("/")[0]
        const fileUrl = e.target?.result as string

        setAttachments((prev) => [
          ...prev,
          {
            type: fileType,
            url: fileUrl,
            name: file.name,
          },
        ])
      }

      if (file.type.startsWith("image/")) {
        reader.readAsDataURL(file)
      } else {
        reader.readAsText(file)
      }
    })
  }

  // Create a new thread
  const handleCreateThread = async () => {
    const newThreadId = nanoid()
    setThreadId(newThreadId)
    router.push(`/chat?thread=${newThreadId}`)
    // Refresh the threads list
    await refreshThreads()
  }

  // Switch to a different thread
  const handleThreadChange = (id: string) => {
    setThreadId(id)
    router.push(`/chat?thread=${id}`)
  }

  // Toggle a tool
  const handleToolToggle = (toolId: string) => {
    setSelectedTools((prev) => (prev.includes(toolId) ? prev.filter((id) => id !== toolId) : [...prev, toolId]))
  }

  // Render message content with support for code blocks, mermaid diagrams, browser displays, etc.
  const renderMessageContent = (content: string) => {
    // Split content by code blocks
    const parts = content.split(/(```[\s\S]*?```)/g)

    return parts.map((part, index) => {
      // Check if this part is a code block
      if (part.startsWith("```") && part.endsWith("```")) {
        // Extract language and code
        const match = part.match(/```(\w+)?\s*([\s\S]*?)```/)

        if (match) {
          const language = match[1] || "text"
          const code = match[2]

          // Check for special block types
          if (language === "mermaid") {
            return <MermaidDiagram key={index} code={code} />
          } else if (language === "browser") {
            try {
              const browserData = JSON.parse(code)
              return <BrowserDisplay key={index} url={browserData.url} title={browserData.title} />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "screen") {
            try {
              const screenData = JSON.parse(code)
              return <ScreenShare key={index} src={screenData.src} title={screenData.title} isVideo={screenData.isVideo} />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "terminal" || language === "shell") {
            return <ComputerUse key={index} title="Terminal Output" content={code} isTerminal={true} />
          } else if (language === "chart" || language === "graph") {
            try {
              const chartData = JSON.parse(code)
              return <DataVisualization
                key={index}
                title={chartData.title}
                data={chartData.data}
                type={chartData.type || "bar"}
                labels={chartData.labels}
                xAxisLabel={chartData.xAxisLabel}
                yAxisLabel={chartData.yAxisLabel}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "map") {
            try {
              const mapData = JSON.parse(code)
              return <InteractiveMap
                key={index}
                title={mapData.title}
                center={mapData.center}
                zoom={mapData.zoom}
                locations={mapData.locations}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "3d" || language === "model") {
            try {
              const modelData = JSON.parse(code)
              return <ModelViewer
                key={index}
                title={modelData.title}
                modelUrl={modelData.url}
                format={modelData.format}
                autoRotate={modelData.autoRotate}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "table") {
            try {
              const tableData = JSON.parse(code)
              return <DataTable
                key={index}
                title={tableData.title}
                data={tableData.data}
                columns={tableData.columns}
                pagination={tableData.pagination}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "form") {
            try {
              const formData = JSON.parse(code)
              return <InteractiveForm
                key={index}
                title={formData.title}
                description={formData.description}
                fields={formData.fields}
                submitLabel={formData.submitLabel}
                onSubmit={(data) => console.log('Form submitted:', data)}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "image-generator") {
            try {
              const imageGenData = JSON.parse(code)
              return <AIImageGenerator
                key={index}
                title={imageGenData.title}
                initialPrompt={imageGenData.prompt}
                generatedImage={imageGenData.image}
                onGenerate={async (prompt, settings) => {
                  console.log('Generate image with:', prompt, settings)
                  // This would call an actual API in production
                  return imageGenData.image || ''
                }}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          } else if (language === "audio") {
            try {
              const audioData = JSON.parse(code)
              return <AudioPlayer
                key={index}
                title={audioData.title}
                src={audioData.src}
                waveform={audioData.waveform}
              />
            } catch (e) {
              return <CodeBlock key={index} language="json" code={code} />
            }
          }

          // Regular code block
          return <CodeBlock key={index} language={language} code={code} />
        }
      }

      // Regular text
      return (
        <p key={index} className="whitespace-pre-wrap">
          {part}
        </p>
      )
    })
  }

  return (
    <div className={cn("flex h-[calc(100vh-4rem)]", className)}>
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
          <div className="border-b px-4">
            <TabsList className="h-12 flex-wrap">
              <TabsTrigger value="chat" className="flex items-center gap-2">
                <Bot className="h-4 w-4" />
                Chat
              </TabsTrigger>
              <TabsTrigger value="code" className="flex items-center gap-2">
                <Code className="h-4 w-4" />
                Code
              </TabsTrigger>
              <TabsTrigger value="files" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Files
              </TabsTrigger>
              <TabsTrigger value="visualize" className="flex items-center gap-2">
                <BarChart className="h-4 w-4" />
                Visualize
              </TabsTrigger>
              <TabsTrigger value="browser" className="flex items-center gap-2">
                <Globe className="h-4 w-4" />
                Browser
              </TabsTrigger>
              <TabsTrigger value="screen" className="flex items-center gap-2">
                <Monitor className="h-4 w-4" />
                Screen
              </TabsTrigger>
              <TabsTrigger value="terminal" className="flex items-center gap-2">
                <Terminal className="h-4 w-4" />
                Terminal
              </TabsTrigger>
              <TabsTrigger value="data" className="flex items-center gap-2">
                <Table className="h-4 w-4" />
                Data
              </TabsTrigger>
              <TabsTrigger value="map" className="flex items-center gap-2">
                <MapPin className="h-4 w-4" />
                Map
              </TabsTrigger>
              <TabsTrigger value="form" className="flex items-center gap-2">
                <FormInput className="h-4 w-4" />
                Form
              </TabsTrigger>
              <TabsTrigger value="audio" className="flex items-center gap-2">
                <Music className="h-4 w-4" />
                Audio
              </TabsTrigger>
              <TabsTrigger value="3d" className="flex items-center gap-2">
                <Box className="h-4 w-4" />
                3D
              </TabsTrigger>
              <TabsTrigger value="ai-image" className="flex items-center gap-2">
                <Wand2 className="h-4 w-4" />
                AI Image
              </TabsTrigger>
            </TabsList>
          </div>

          <TabsContent value="chat" className="flex-1 flex flex-col p-0 m-0">
            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              <AnimatePresence initial={false}>
                {messages.map((message) => (
                  <ChatMessage key={message.id} message={message} />
                ))}
              </AnimatePresence>
              <div ref={messagesEndRef} />
            </div>

            {/* Input Form */}
            <div className="border-t p-4">
              <form onSubmit={handleSubmit} className="flex flex-col gap-4">
                {/* Attachments preview */}
                {attachments.length > 0 && (
                  <div className="flex gap-2 flex-wrap">
                    {attachments.map((attachment, i) => (
                      <div key={i} className="border rounded-md p-2 flex items-center gap-2">
                        {attachment.type === "image" ? <Image className="h-4 w-4" /> : <FileText className="h-4 w-4" />}
                        <span className="text-sm truncate max-w-[100px]">{attachment.name}</span>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="h-5 w-5 p-0"
                          onClick={() => setAttachments((prev) => prev.filter((_, idx) => idx !== i))}
                        >
                          &times;
                        </Button>
                      </div>
                    ))}
                  </div>
                )}

                <div className="flex gap-2">
                  <FileUpload onUpload={handleFileUpload} />

                  <Textarea
                    ref={textareaRef}
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Type your message..."
                    className="flex-1 min-h-[60px] resize-none rounded-xl border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    onKeyDown={(e) => {
                      if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault()
                        handleSubmit(e)
                      }
                    }}
                  />

                  <Button
                    type="submit"
                    variant="gradient"
                    size="icon"
                    disabled={isLoading || (!input.trim() && attachments.length === 0)}
                    className="rounded-full shadow-sm"
                  >
                    {isLoading ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <Send className="h-4 w-4" />
                    )}
                    <span className="sr-only">Send message</span>
                  </Button>
                </div>
              </form>
            </div>
          </TabsContent>

          <TabsContent value="code" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Code Execution</h2>
                  <p className="text-muted-foreground mb-4">
                    Write and execute code in various languages. Results will be displayed below.
                  </p>

                  <Textarea placeholder="// Write your code here" className="font-mono h-64 mb-4" />

                  <div className="flex justify-between">
                    <Select>
                      <SelectTrigger className="w-32">
                        <SelectValue placeholder="Language" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="javascript">JavaScript</SelectItem>
                        <SelectItem value="python">Python</SelectItem>
                        <SelectItem value="sql">SQL</SelectItem>
                      </SelectContent>
                    </Select>

                    <Button>
                      <Code className="mr-2 h-4 w-4" />
                      Execute
                    </Button>
                  </div>

                  <div className="mt-4 p-4 border rounded-md bg-muted font-mono">
                    <p className="text-sm">Output will appear here</p>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="files" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">File Management</h2>
                  <p className="text-muted-foreground mb-4">
                    Upload, view, and manage files for your AI assistant to use as context.
                  </p>

                  <FileUpload onUpload={handleFileUpload} />

                  <div className="mt-4 border rounded-md">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">Uploaded Files</h3>
                    </div>
                    <div className="p-4">
                      {attachments.length > 0 ? (
                        <div className="space-y-2">
                          {attachments.map((file, i) => (
                            <div key={i} className="flex items-center justify-between p-2 border rounded-md">
                              <div className="flex items-center gap-2">
                                {file.type === "image" ? (
                                  <Image className="h-4 w-4" />
                                ) : (
                                  <FileText className="h-4 w-4" />
                                )}
                                <span>{file.name}</span>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setAttachments((prev) => prev.filter((_, idx) => idx !== i))}
                              >
                                Remove
                              </Button>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <p className="text-center text-muted-foreground py-8">No files uploaded yet</p>
                      )}
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="visualize" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Data Visualization</h2>
                  <p className="text-muted-foreground mb-4">
                    Create charts, diagrams, and visualizations from your data.
                  </p>

                  <Textarea
                    placeholder="```mermaid
graph TD
    A[Start] --> B[Process]
    B --> C[End]
```"
                    className="font-mono h-64 mb-4"
                  />

                  <div className="flex justify-between">
                    <Select>
                      <SelectTrigger className="w-32">
                        <SelectValue placeholder="Type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="mermaid">Mermaid</SelectItem>
                        <SelectItem value="chart">Chart.js</SelectItem>
                        <SelectItem value="table">Table</SelectItem>
                      </SelectContent>
                    </Select>

                    <Button>
                      <BarChart className="mr-2 h-4 w-4" />
                      Render
                    </Button>
                  </div>

                  <div className="mt-4 p-4 border rounded-md bg-white">
                    <p className="text-center text-muted-foreground py-8">Visualization will appear here</p>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="browser" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Web Browser</h2>
                  <p className="text-muted-foreground mb-4">
                    Browse websites and interact with web content directly in the chat.
                  </p>

                  <div className="flex gap-2 mb-4">
                    <Input
                      type="url"
                      placeholder="https://example.com"
                      className="flex-1 rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    />
                    <Button variant="gradient">
                      <Globe className="mr-2 h-4 w-4" />
                      Browse
                    </Button>
                  </div>

                  <div className="mt-4 border rounded-md overflow-hidden">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">Browser Preview</h3>
                    </div>
                    <div className="h-[400px] bg-white flex items-center justify-center">
                      <div className="text-center text-muted-foreground">
                        <Globe className="mx-auto h-8 w-8 mb-2" />
                        <p>Enter a URL above to start browsing</p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="screen" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Screen Sharing</h2>
                  <p className="text-muted-foreground mb-4">
                    Share your screen or record your screen to share with the AI assistant.
                  </p>

                  <div className="flex gap-2 mb-4">
                    <Button variant="gradient" className="flex-1">
                      <Monitor className="mr-2 h-4 w-4" />
                      Share Screen
                    </Button>
                    <Button variant="outline" className="flex-1">
                      <Image className="mr-2 h-4 w-4" />
                      Take Screenshot
                    </Button>
                  </div>

                  <div className="mt-4 border rounded-md overflow-hidden">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">Screen Preview</h3>
                    </div>
                    <div className="h-[400px] bg-black flex items-center justify-center">
                      <div className="text-center text-white/70">
                        <Monitor className="mx-auto h-8 w-8 mb-2" />
                        <p>Click 'Share Screen' to start sharing</p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="terminal" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Terminal Access</h2>
                  <p className="text-muted-foreground mb-4">
                    Execute commands and view terminal output directly in the chat.
                  </p>

                  <div className="flex gap-2 mb-4">
                    <Input
                      type="text"
                      placeholder="Enter command..."
                      className="flex-1 font-mono rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    />
                    <Button variant="gradient">
                      <Terminal className="mr-2 h-4 w-4" />
                      Execute
                    </Button>
                  </div>

                  <div className="mt-4 border rounded-md overflow-hidden">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">Terminal Output</h3>
                    </div>
                    <div className="h-[400px] bg-black p-4 font-mono text-green-400 text-sm overflow-auto">
                      <p>$ _</p>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="data" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Data Tables & Charts</h2>
                  <p className="text-muted-foreground mb-4">
                    Create interactive data tables and visualizations from your data.
                  </p>

                  <div className="flex gap-4 mb-4">
                    <div className="flex-1">
                      <h3 className="text-sm font-medium mb-2">Chart Type</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select chart type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="bar">Bar Chart</SelectItem>
                          <SelectItem value="line">Line Chart</SelectItem>
                          <SelectItem value="pie">Pie Chart</SelectItem>
                          <SelectItem value="table">Data Table</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex-1">
                      <h3 className="text-sm font-medium mb-2">Data Source</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select data source" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="paste">Paste Data</SelectItem>
                          <SelectItem value="upload">Upload CSV</SelectItem>
                          <SelectItem value="api">API Endpoint</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <Textarea
                    placeholder="Paste your data here in CSV or JSON format..."
                    className="h-[200px] mb-4 font-mono text-sm"
                  />

                  <Button variant="gradient">
                    <BarChart className="mr-2 h-4 w-4" />
                    Generate Visualization
                  </Button>

                  <div className="mt-4 border rounded-md overflow-hidden bg-white p-4 h-[200px] flex items-center justify-center">
                    <div className="text-center text-muted-foreground">
                      <BarChart className="mx-auto h-8 w-8 mb-2" />
                      <p>Your visualization will appear here</p>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="map" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Interactive Maps</h2>
                  <p className="text-muted-foreground mb-4">
                    Create and interact with maps to visualize geographic data.
                  </p>

                  <div className="flex gap-2 mb-4">
                    <Input
                      type="text"
                      placeholder="Search location or address..."
                      className="flex-1 rounded-md border-border/50 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    />
                    <Button variant="secondary">
                      <MapPin className="mr-2 h-4 w-4" />
                      Search
                    </Button>
                  </div>

                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <h3 className="text-sm font-medium mb-2">Map Type</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Map type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="standard">Standard</SelectItem>
                          <SelectItem value="satellite">Satellite</SelectItem>
                          <SelectItem value="terrain">Terrain</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <h3 className="text-sm font-medium mb-2">Data Points</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Data points" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="markers">Markers</SelectItem>
                          <SelectItem value="heatmap">Heat Map</SelectItem>
                          <SelectItem value="routes">Routes</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="mt-4 border rounded-md overflow-hidden bg-muted h-[300px] flex items-center justify-center">
                    <div className="text-center text-muted-foreground">
                      <MapPin className="mx-auto h-8 w-8 mb-2" />
                      <p>Map will appear here</p>
                      <p className="text-xs mt-1">Search for a location to get started</p>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="form" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Interactive Forms</h2>
                  <p className="text-muted-foreground mb-4">
                    Create custom forms for gathering user input and feedback.
                  </p>

                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <h3 className="text-sm font-medium mb-2">Form Title</h3>
                      <Input
                        type="text"
                        placeholder="Enter form title..."
                        className="w-full"
                      />
                    </div>

                    <div>
                      <h3 className="text-sm font-medium mb-2">Form Type</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select form type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="feedback">Feedback Form</SelectItem>
                          <SelectItem value="survey">Survey</SelectItem>
                          <SelectItem value="contact">Contact Form</SelectItem>
                          <SelectItem value="custom">Custom Form</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="border rounded-md p-4 mb-4">
                    <h3 className="text-sm font-medium mb-2">Form Fields</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between p-2 border rounded-md bg-muted/50">
                        <div className="flex items-center gap-2">
                          <FormInput className="h-4 w-4" />
                          <span className="text-sm">Text Field</span>
                        </div>
                        <Button variant="ghost" size="sm">Add</Button>
                      </div>

                      <div className="flex items-center justify-between p-2 border rounded-md bg-muted/50">
                        <div className="flex items-center gap-2">
                          <FormInput className="h-4 w-4" />
                          <span className="text-sm">Multiple Choice</span>
                        </div>
                        <Button variant="ghost" size="sm">Add</Button>
                      </div>

                      <div className="flex items-center justify-between p-2 border rounded-md bg-muted/50">
                        <div className="flex items-center gap-2">
                          <FormInput className="h-4 w-4" />
                          <span className="text-sm">Checkbox</span>
                        </div>
                        <Button variant="ghost" size="sm">Add</Button>
                      </div>
                    </div>
                  </div>

                  <Button variant="gradient">
                    <FormInput className="mr-2 h-4 w-4" />
                    Create Form
                  </Button>

                  <div className="mt-4 border rounded-md overflow-hidden p-4 bg-muted/30">
                    <p className="text-center text-muted-foreground py-8">Form preview will appear here</p>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="audio" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">Audio Tools</h2>
                  <p className="text-muted-foreground mb-4">
                    Record, upload, and analyze audio content.
                  </p>

                  <div className="flex gap-2 mb-6">
                    <Button variant="gradient" className="flex-1">
                      <Music className="mr-2 h-4 w-4" />
                      Record Audio
                    </Button>
                    <Button variant="outline" className="flex-1">
                      Upload Audio
                    </Button>
                  </div>

                  <div className="border rounded-md p-4 mb-4">
                    <h3 className="text-sm font-medium mb-4">Audio Processing</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <h4 className="text-xs font-medium mb-2">Transcription</h4>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Language" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="en">English</SelectItem>
                            <SelectItem value="es">Spanish</SelectItem>
                            <SelectItem value="fr">French</SelectItem>
                            <SelectItem value="de">German</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <h4 className="text-xs font-medium mb-2">Analysis</h4>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Analysis type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="sentiment">Sentiment Analysis</SelectItem>
                            <SelectItem value="keywords">Keyword Extraction</SelectItem>
                            <SelectItem value="summary">Summarization</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  <div className="mt-4 border rounded-md overflow-hidden">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">Audio Player</h3>
                    </div>
                    <div className="h-[200px] bg-muted/30 flex items-center justify-center">
                      <div className="text-center text-muted-foreground">
                        <Music className="mx-auto h-8 w-8 mb-2" />
                        <p>Record or upload audio to get started</p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="3d" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">3D Model Viewer</h2>
                  <p className="text-muted-foreground mb-4">
                    View and interact with 3D models in various formats.
                  </p>

                  <div className="flex gap-2 mb-4">
                    <Button variant="gradient" className="flex-1">
                      <Box className="mr-2 h-4 w-4" />
                      Upload 3D Model
                    </Button>
                    <Select>
                      <SelectTrigger className="flex-1">
                        <SelectValue placeholder="Format" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="glb">GLB</SelectItem>
                        <SelectItem value="gltf">GLTF</SelectItem>
                        <SelectItem value="obj">OBJ</SelectItem>
                        <SelectItem value="stl">STL</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="mt-4 border rounded-md overflow-hidden">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">3D Viewer</h3>
                    </div>
                    <div className="h-[300px] bg-gradient-to-b from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 flex items-center justify-center">
                      <div className="text-center text-muted-foreground">
                        <Box className="mx-auto h-8 w-8 mb-2" />
                        <p>Upload a 3D model to view it here</p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="ai-image" className="flex-1 flex flex-col p-0 m-0">
            <div className="flex-1 p-4">
              <Card className="h-full">
                <div className="p-4">
                  <h2 className="text-lg font-medium mb-4">AI Image Generator</h2>
                  <p className="text-muted-foreground mb-4">
                    Generate images using AI based on your text descriptions.
                  </p>

                  <Textarea
                    placeholder="Describe the image you want to generate in detail..."
                    className="h-[100px] mb-4"
                  />

                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <h3 className="text-sm font-medium mb-2">Model</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select model" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="dall-e-3">DALL-E 3</SelectItem>
                          <SelectItem value="stable-diffusion">Stable Diffusion</SelectItem>
                          <SelectItem value="midjourney">Midjourney</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <h3 className="text-sm font-medium mb-2">Style</h3>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select style" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="realistic">Realistic</SelectItem>
                          <SelectItem value="artistic">Artistic</SelectItem>
                          <SelectItem value="cartoon">Cartoon</SelectItem>
                          <SelectItem value="abstract">Abstract</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <Button variant="gradient" className="w-full">
                    <Wand2 className="mr-2 h-4 w-4" />
                    Generate Image
                  </Button>

                  <div className="mt-4 border rounded-md overflow-hidden">
                    <div className="p-4 border-b bg-muted">
                      <h3 className="font-medium">Generated Image</h3>
                    </div>
                    <div className="h-[300px] bg-muted/30 flex items-center justify-center">
                      <div className="text-center text-muted-foreground">
                        <Wand2 className="mx-auto h-8 w-8 mb-2" />
                        <p>Your generated image will appear here</p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {/* Sidebar */}
      <ChatSidebar
        models={models}
        tools={tools}
        threads={threads}
        selectedModelId={selectedModelId}
        selectedThreadId={threadId}
        selectedTools={selectedTools}
        temperature={temperature}
        maxTokens={maxTokens}
        onModelChange={setSelectedModelId}
        onThreadChange={handleThreadChange}
        onToolToggle={handleToolToggle}
        onTemperatureChange={setTemperature}
        onMaxTokensChange={setMaxTokens}
        onCreateThread={handleCreateThread}
      />
    </div>
  )
}

================
File: components/layout/top-navbar.tsx
================
"use client"

import { useState, useEffect, useRef, memo } from "react"
import Link from "next/link"
import { usePathname, useRouter } from "next/navigation"
import {
  motion,
  AnimatePresence,
  useScroll,
  useTransform,
  useMotionValue,
  useSpring,
  useInView
} from "framer-motion"
import {
  Menu,
  X,
  ChevronDown,
  Search,
  Bell,
  Settings,
  User,
  LogOut,
  Home,
  Github as GithubIcon, // Keep deprecated GitHub icon as requested
  Database,
  Rocket,
  Sparkles,
  Code,
  Zap,
  MessageSquare,
  Activity
} from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ModeToggle } from "@/components/layout/mode-toggle"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { SignInDialog } from "@/components/auth/sign-in-dialog"
import { SignUpDialog } from "@/components/auth/sign-up-dialog"

export const TopNavbar = memo(function TopNavbar() {
  const pathname = usePathname()
  // Router is used for programmatic navigation in production
  const router = useRouter()
  const [isSearchOpen, setIsSearchOpen] = useState(false)
  const [showSignIn, setShowSignIn] = useState(false)
  const [showSignUp, setShowSignUp] = useState(false)
  const [scrolled, setScrolled] = useState(false)
  const [notifications, setNotifications] = useState(3)

  // Function to navigate programmatically (for future use)
  const navigateTo = (path: string) => {
    router.push(path)
  }

  // Scroll animation
  const { scrollY } = useScroll()
  const navbarOpacity = useTransform(scrollY, [0, 50], [0.5, 0.95])
  const navbarHeight = useTransform(scrollY, [0, 50], ["4rem", "3.5rem"])
  const logoScale = useTransform(scrollY, [0, 50], [1, 0.9])

  // Update scrolled state for mobile and handle navigation
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 20)
    }

    // Apply scrolled state to header styling
    const header = document.querySelector('header')
    if (header) {
      if (scrolled) {
        header.classList.add('scrolled')
        // Example of using navigateTo in a real application
        // if (someCondition) navigateTo('/dashboard')
      } else {
        header.classList.remove('scrolled')
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [scrolled])

  // Set up route change handler for analytics
  useEffect(() => {
    // Function to handle route changes
    function handleRouteChange() {
      // Reset search when navigating
      setIsSearchOpen(false)

      // Update notifications based on current path
      if (pathname.includes('/dashboard')) {
        setNotifications(3)
      } else if (pathname.includes('/chat')) {
        setNotifications(1)
      } else {
        setNotifications(0)
      }

      // Analytics tracking would go here in production
    }

    // Call the function once on mount
    handleRouteChange()

    // This would be used in production with Next.js router events
    // router.events.on('routeChangeComplete', handleRouteChange)
    // return () => router.events.off('routeChangeComplete', handleRouteChange)
  }, [pathname])

  // Mouse position for hover effects
  const mouseX = useMotionValue(0)
  const mouseY = useMotionValue(0)

  // Spring animations for smoother motion
  const springConfig = { stiffness: 300, damping: 30 }
  const mouseXSpring = useSpring(mouseX, springConfig)
  const mouseYSpring = useSpring(mouseY, springConfig)

  // Transform values for hover effects
  const rotateX = useTransform(mouseYSpring, [0, 100], [1, -1])
  const rotateY = useTransform(mouseXSpring, [0, 200], [-1, 1])

  // Handle mouse movement for hover effects
  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    const { left, top } = e.currentTarget.getBoundingClientRect()
    mouseX.set(e.clientX - left)
    mouseY.set(e.clientY - top)
  }

  // References for animations
  const headerRef = useRef<HTMLDivElement>(null)

  // Use header in-view state for animations
  const isHeaderInView = useInView(headerRef, { once: true })

  // Apply header animations based on in-view state
  useEffect(() => {
    if (isHeaderInView) {
      // Add animation classes or styles when header comes into view
      const header = headerRef.current
      if (header) {
        header.style.opacity = "1"
        header.style.transform = "translateY(0)"
      }
    }
  }, [isHeaderInView])

  return (
    <motion.header
      ref={headerRef}
      className="sticky top-0 z-40 border-b backdrop-blur-md w-full"
      style={{
        width: '100vw',
        left: 0,
        right: 0,
        height: navbarHeight,
        backgroundColor: `rgba(var(--background), ${navbarOpacity.get()})`,
        borderColor: `rgba(var(--border), ${navbarOpacity.get() / 3})`,
      }}
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      onMouseMove={handleMouseMove}
    >
      <div className="flex h-full items-center w-full px-4 md:px-8">
        <div className="mr-4 hidden md:flex">
          <Link href="/dashboard" className="mr-6 flex items-center space-x-2">
            <motion.div
              style={{
                scale: logoScale,
                rotateX,
                rotateY,
                transformPerspective: 1000
              }}
              className="relative flex items-center justify-center"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <motion.div
                initial={{ rotate: 0, scale: 1 }}
                animate={{ rotate: 360, scale: [1, 1.05, 1] }}
                transition={{
                  rotate: { duration: 10, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                  scale: { duration: 3, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" }
                }}
                className="absolute inset-0 rounded-full bg-gradient-to-r from-green-500 via-emerald-500 to-blue-600 opacity-70 blur-sm"
              />
              <motion.div
                initial={{ rotate: 0 }}
                animate={{ rotate: -360 }}
                transition={{ duration: 15, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 via-cyan-600 to-teal-500 opacity-70 blur-[2px]"
              />
              <div className="relative h-7 w-7 rounded-full bg-background flex items-center justify-center">
                <Sparkles className="h-4 w-4 text-primary" />
              </div>
            </motion.div>
            <motion.span
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
              className="hidden font-bold sm:inline-block text-sm bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600"
            >
              DeanmachinesAI
            </motion.span>
          </Link>
        </div>

        {/* Mobile menu trigger */}
        <Sheet>
          <SheetTrigger asChild>
            <Button variant="outline" size="icon" className="mr-2 h-8 w-8 md:hidden">
              <Menu className="h-4 w-4" />
              <span className="sr-only">Toggle menu</span>
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="pr-0">
            <MobileNav setShowSignIn={setShowSignIn} setShowSignUp={setShowSignUp} />
          </SheetContent>
        </Sheet>

        {/* Search */}
        <div className={cn("flex-1 md:grow-0", isSearchOpen ? "flex" : "hidden md:flex")}>
          <form className="relative">
            <Search className="absolute left-2.5 top-2 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search..."
              className="h-8 w-full rounded-lg bg-background pl-8 md:w-[180px] lg:w-[240px]"
            />
          </form>
        </div>

        <Button
          variant="ghost"
          size="icon"
          className="ml-auto h-8 w-8 md:hidden"
          onClick={() => setIsSearchOpen(!isSearchOpen)}
        >
          {isSearchOpen ? <X className="h-4 w-4" /> : <Search className="h-4 w-4" />}
          <span className="sr-only">Toggle search</span>
        </Button>

        <div className="flex flex-1 items-center justify-end space-x-2">
          <nav className="hidden md:flex items-center space-x-3">
            {/* Quick Navigation Buttons */}
            <motion.div
              className="flex items-center mr-2 bg-background/30 backdrop-blur-xl rounded-xl border border-border/20 p-1 shadow-sm overflow-hidden relative"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
              whileHover={{ boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)" }}
            >
              {/* Animated background */}
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-green-500/5 via-teal-500/5 to-blue-600/5"
                animate={{
                  backgroundPosition: ['0% 0%', '100% 100%'],
                }}
                transition={{
                  duration: 8,
                  repeat: Infinity,
                  repeatType: 'reverse',
                  ease: 'linear',
                }}
              />

              <AnimatePresence>
                {[
                  { id: "dashboard", label: "Dashboard", icon: <Home className="h-3.5 w-3.5" /> },
                  { id: "chat", label: "Chat", icon: <MessageSquare className="h-3.5 w-3.5" /> },
                  { id: "features", label: "Features", icon: <Rocket className="h-3.5 w-3.5" /> },
                  { id: "observability", label: "Observability", icon: <Activity className="h-3.5 w-3.5" /> },
                  { id: "settings", label: "Settings", icon: <Settings className="h-3.5 w-3.5" /> }
                ].map((item, index) => {
                  const isActive = pathname.includes(`/${item.id}`);

                  return (
                    <motion.div
                      key={item.id}
                      initial={{ opacity: 0, scale: 0.9, y: -5 }}
                      animate={{ opacity: 1, scale: 1, y: 0 }}
                      transition={{
                        duration: 0.3,
                        delay: index * 0.05,
                        type: "spring",
                        stiffness: 300,
                        damping: 20
                      }}
                      className="relative"
                    >
                      <motion.div
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Button
                          variant="ghost"
                          size="icon-sm"
                          asChild
                          className={cn(
                            "rounded-lg h-8 w-8 text-muted-foreground hover:text-foreground relative overflow-hidden",
                            isActive && "text-foreground"
                          )}
                        >
                          <Link href={`/${item.id}`}>
                            {isActive && (
                              <motion.div
                                className="absolute inset-0 bg-gradient-to-r from-green-500/10 via-teal-500/10 to-blue-600/10"
                                animate={{
                                  opacity: [0.5, 0.8, 0.5],
                                }}
                                transition={{
                                  duration: 2,
                                  repeat: Infinity,
                                  repeatType: 'reverse',
                                }}
                              />
                            )}
                            <span className="relative z-10">{item.icon}</span>
                            <span className="sr-only">{item.label}</span>
                          </Link>
                        </Button>
                      </motion.div>

                      {isActive && (
                        <motion.div
                          layoutId="nav-indicator"
                          className="absolute -bottom-1 left-1/2 h-0.5 w-4 -translate-x-1/2 rounded-full bg-gradient-to-r from-green-500 to-blue-600"
                          initial={{ opacity: 0, width: "0%" }}
                          animate={{ opacity: 1, width: "50%" }}
                          exit={{ opacity: 0, width: "0%" }}
                          transition={{ duration: 0.2 }}
                        />
                      )}
                    </motion.div>
                  );
                })}
              </AnimatePresence>
            </motion.div>

            {/* Integrations Button */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <motion.div
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.97 }}
                  style={{
                    rotateX,
                    rotateY,
                    transformPerspective: 1000
                  }}
                  initial={{ opacity: 0, y: -5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{
                    duration: 0.3,
                    delay: 0.2,
                    type: "spring",
                    stiffness: 300,
                    damping: 20
                  }}
                >
                  <Button
                    variant="outline"
                    size="sm"
                    className="relative overflow-hidden gap-1.5 px-3 h-8 text-xs font-medium border-border/30 bg-background/50 backdrop-blur-md"
                  >
                    {/* Animated gradient background */}
                    <motion.span
                      className="absolute inset-0 bg-gradient-to-r from-green-500/10 via-teal-500/10 to-blue-600/10"
                      initial={{ opacity: 0 }}
                      whileHover={{ opacity: 1 }}
                      animate={{
                        backgroundPosition: ['0% 0%', '100% 100%'],
                      }}
                      transition={{
                        duration: 5,
                        repeat: Infinity,
                        repeatType: 'reverse',
                        ease: 'linear',
                      }}
                    />

                    {/* Rotating icon background */}
                    <motion.div
                      initial={{ rotate: 0 }}
                      animate={{ rotate: 360 }}
                      transition={{ duration: 20, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                      className="absolute inset-0 rounded-md bg-gradient-to-r from-green-500/5 via-teal-500/5 to-blue-600/5 opacity-0 group-hover:opacity-100"
                    />

                    {/* Icon with pulse effect */}
                    <motion.div
                      animate={{ scale: [1, 1.1, 1] }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        repeatType: 'reverse',
                        ease: 'easeInOut'
                      }}
                      className="relative z-10"
                    >
                      <Code className="h-3.5 w-3.5 text-green-500" />
                    </motion.div>

                    {/* Text with gradient */}
                    <motion.span
                      className="bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600 font-medium relative z-10"
                      initial={{ opacity: 0, x: -5 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.3, delay: 0.1 }}
                    >
                      Integrations
                    </motion.span>
                  </Button>
                </motion.div>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-60 p-1 bg-background/80 backdrop-blur-xl border border-border/20">
                <DropdownMenuLabel className="px-3 py-2 text-xs font-medium text-muted-foreground">
                  Connect Services
                </DropdownMenuLabel>
                <DropdownMenuSeparator className="bg-border/10" />
                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <DropdownMenuItem
                    className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground"
                    onSelect={() => navigateTo('/integrations/github')}
                  >
                    <div className="flex items-center w-full">
                      <div className="flex h-8 w-8 items-center justify-center rounded-md bg-background mr-2">
                        <GithubIcon className="h-4 w-4 text-foreground" />
                      </div>
                      <div className="flex flex-col">
                        <span className="text-sm font-medium">GitHub</span>
                        <span className="text-xs text-muted-foreground">Connect repositories</span>
                      </div>
                    </div>
                  </DropdownMenuItem>
                </motion.div>
                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.05 }}
                >
                  <DropdownMenuItem
                    className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground"
                    onSelect={() => navigateTo('/integrations/supabase')}
                  >
                    <div className="flex items-center w-full">
                      <div className="flex h-8 w-8 items-center justify-center rounded-md bg-background mr-2">
                        <Database className="h-4 w-4 text-foreground" />
                      </div>
                      <div className="flex flex-col">
                        <span className="text-sm font-medium">Supabase</span>
                        <span className="text-xs text-muted-foreground">Database integration</span>
                      </div>
                    </div>
                  </DropdownMenuItem>
                </motion.div>
                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.1 }}
                >
                  <DropdownMenuItem
                    className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground"
                    onSelect={() => navigateTo('/integrations/vercel')}
                  >
                    <div className="flex items-center w-full">
                      <div className="flex h-8 w-8 items-center justify-center rounded-md bg-background mr-2">
                        <Rocket className="h-4 w-4 text-foreground" />
                      </div>
                      <div className="flex flex-col">
                        <span className="text-sm font-medium">Vercel</span>
                        <span className="text-xs text-muted-foreground">Deployment platform</span>
                      </div>
                    </div>
                  </DropdownMenuItem>
                </motion.div>
                <DropdownMenuSeparator className="bg-border/10 my-1" />
                <DropdownMenuItem
                  className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground"
                  onSelect={() => navigateTo('/integrations')}
                >
                  <div className="w-full text-center text-xs font-medium text-muted-foreground hover:text-foreground">
                    View All Integrations
                  </div>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Super cutting-edge Sign In button */}
            <motion.div
              initial={{ opacity: 0, x: -5 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3, delay: 0.3 }}
              style={{
                rotateX,
                rotateY,
                transformPerspective: 1000
              }}
            >
              <Button
                variant="ghost"
                size="sm"
                asChild
                className="relative overflow-hidden group"
              >
                <Link href="/auth/signin">
                  {/* Animated gradient background */}
                  <motion.span
                    className="absolute inset-0 bg-gradient-to-r from-green-500/5 via-teal-500/5 to-blue-600/5"
                    initial={{ opacity: 0 }}
                    whileHover={{ opacity: 1 }}
                    animate={{
                      backgroundPosition: ['0% 0%', '100% 100%'],
                    }}
                    transition={{
                      duration: 3,
                      repeat: Infinity,
                      repeatType: 'reverse',
                      ease: 'linear',
                    }}
                  />

                  {/* Animated border effect */}
                  <motion.span
                    className="absolute inset-0 rounded-md opacity-0 group-hover:opacity-100"
                    style={{
                      background: "linear-gradient(90deg, transparent, rgba(124, 58, 237, 0.2), transparent)",
                    }}
                    animate={{
                      x: ['-100%', '100%'],
                    }}
                    transition={{
                      duration: 1.5,
                      repeat: Infinity,
                      ease: "linear",
                    }}
                  />

                  {/* Text with hover effect */}
                  <motion.span
                    className="relative z-10 bg-clip-text group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:from-cyan-500 group-hover:to-purple-600"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    Sign In
                  </motion.span>
                </Link>
              </Button>
            </motion.div>

            {/* Super cutting-edge Sign Up button */}
            <motion.div
              initial={{ opacity: 0, x: -5 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3, delay: 0.4 }}
              style={{
                rotateX,
                rotateY,
                transformPerspective: 1000
              }}
            >
              <Button
                variant="gradient"
                size="sm"
                onClick={() => setShowSignUp(true)}
                className="relative overflow-hidden bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 border-none group"
              >
                {/* Animated light effect */}
                <motion.span
                  className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent"
                  animate={{
                    x: ['-100%', '200%'],
                  }}
                  transition={{
                    duration: 1.5,
                    repeat: Infinity,
                    repeatType: "loop",
                    ease: "linear",
                    repeatDelay: 0.5
                  }}
                />

                {/* Animated particles */}
                <motion.div className="absolute inset-0 overflow-hidden">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <motion.div
                      key={i}
                      className="absolute w-1 h-1 rounded-full bg-white/60"
                      initial={{
                        x: `${Math.random() * 100}%`,
                        y: `${Math.random() * 100}%`,
                        scale: 0,
                        opacity: 0
                      }}
                      animate={{
                        y: [null, '-100%'],
                        scale: [0, 1, 0],
                        opacity: [0, 1, 0]
                      }}
                      transition={{
                        duration: 1 + Math.random() * 2,
                        repeat: Infinity,
                        delay: Math.random() * 2
                      }}
                    />
                  ))}
                </motion.div>

                {/* Text with glow effect */}
                <motion.span
                  className="relative z-10 text-white font-medium"
                  whileHover={{
                    textShadow: "0 0 8px rgba(255, 255, 255, 0.5)"
                  }}
                  whileTap={{ scale: 0.95 }}
                >
                  Sign Up
                </motion.span>
              </Button>
            </motion.div>
            {/* Super cutting-edge Notifications button */}
            <motion.div
              initial={{ opacity: 0, x: -5 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3, delay: 0.5 }}
              style={{
                rotateX,
                rotateY,
                transformPerspective: 1000
              }}
            >
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 relative overflow-hidden group"
              >
                {/* Animated ring effect */}
                <motion.div
                  className="absolute inset-0 rounded-full opacity-0 group-hover:opacity-100"
                  initial={{ scale: 0.8, opacity: 0 }}
                  whileHover={{
                    scale: 1.2,
                    opacity: 1,
                    background: "radial-gradient(circle, rgba(124, 58, 237, 0.1) 0%, transparent 70%)"
                  }}
                  transition={{ duration: 0.3 }}
                />

                {/* Notification dot with pulse effect */}
                {notifications > 0 && (
                  <motion.div
                    className="absolute top-1 right-1 h-4 w-4 rounded-full bg-gradient-to-r from-green-500 to-blue-600 flex items-center justify-center text-[8px] font-bold text-white"
                    initial={{ scale: 0, opacity: 0 }}
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: 1,
                      boxShadow: [
                        "0 0 0 0 rgba(16, 185, 129, 0.7)",
                        "0 0 0 4px rgba(16, 185, 129, 0)",
                        "0 0 0 0 rgba(16, 185, 129, 0.7)"
                      ]
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      repeatType: "loop"
                    }}
                  >
                    {notifications}
                  </motion.div>
                )}

                {/* Bell icon with subtle animation */}
                <motion.div
                  whileHover={{ rotate: [0, -5, 5, -5, 5, 0] }}
                  transition={{ duration: 0.5 }}
                >
                  <Bell className="h-4 w-4 relative z-10" />
                </motion.div>

                <span className="sr-only">Notifications</span>
              </Button>
            </motion.div>
            <ModeToggle />
            {/* Super cutting-edge User Avatar Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3, delay: 0.6 }}
                  style={{
                    rotateX,
                    rotateY,
                    transformPerspective: 1000
                  }}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <Button variant="ghost" className="relative h-7 w-7 rounded-full p-0 overflow-hidden">
                    {/* Animated glow effect */}
                    <motion.div
                      className="absolute inset-0 rounded-full opacity-0 group-hover:opacity-100"
                      animate={{
                        boxShadow: [
                          "0 0 0 0 rgba(16, 185, 129, 0)",
                          "0 0 0 3px rgba(16, 185, 129, 0.3)",
                          "0 0 0 0 rgba(16, 185, 129, 0)"
                        ]
                      }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        repeatType: "loop"
                      }}
                    />

                    {/* Rotating gradient border */}
                    <motion.div
                      className="absolute inset-[-1px] rounded-full z-0"
                      style={{
                        background: "conic-gradient(from 0deg, rgba(16, 185, 129, 0.7), rgba(59, 130, 246, 0.7), rgba(16, 185, 129, 0.7))"
                      }}
                      animate={{ rotate: 360 }}
                      transition={{
                        duration: 5,
                        repeat: Infinity,
                        ease: "linear"
                      }}
                    />

                    {/* Avatar with subtle hover effect */}
                    <Avatar className="h-7 w-7 relative z-10 border-2 border-background">
                      <AvatarImage src="/placeholder.svg?height=28&width=28" alt="User" />
                      <AvatarFallback>
                        <motion.div
                          animate={{
                            background: [
                              "linear-gradient(45deg, #10b981, #3b82f6)",
                              "linear-gradient(225deg, #10b981, #3b82f6)",
                              "linear-gradient(45deg, #10b981, #3b82f6)"
                            ]
                          }}
                          transition={{
                            duration: 3,
                            repeat: Infinity,
                            repeatType: "mirror"
                          }}
                          className="h-full w-full flex items-center justify-center text-white text-xs font-medium"
                        >
                          U
                        </motion.div>
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </motion.div>
              </DropdownMenuTrigger>

              <DropdownMenuContent className="w-56 p-1 bg-background/80 backdrop-blur-xl border border-border/20" align="end" forceMount>
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <DropdownMenuLabel className="font-normal px-3 py-2">
                    <div className="flex flex-col space-y-1">
                      <motion.p
                        className="text-sm font-medium leading-none bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600"
                        initial={{ opacity: 0, x: -5 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.2, delay: 0.1 }}
                      >
                        User
                      </motion.p>
                      <motion.p
                        className="text-xs leading-none text-muted-foreground"
                        initial={{ opacity: 0, x: -5 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.2, delay: 0.2 }}
                      >
                        user@example.com
                      </motion.p>
                    </div>
                  </DropdownMenuLabel>
                </motion.div>

                <DropdownMenuSeparator className="bg-border/10 my-1" />

                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.1 }}
                >
                  <DropdownMenuItem className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground group">
                    <motion.div
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.95 }}
                      className="mr-2 h-4 w-4 text-muted-foreground group-hover:text-foreground"
                    >
                      <User className="h-4 w-4" />
                    </motion.div>
                    <span>Profile</span>
                  </DropdownMenuItem>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.15 }}
                >
                  <DropdownMenuItem className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground group">
                    <motion.div
                      whileHover={{ rotate: 90 }}
                      transition={{ duration: 0.3 }}
                      className="mr-2 h-4 w-4 text-muted-foreground group-hover:text-foreground"
                    >
                      <Settings className="h-4 w-4" />
                    </motion.div>
                    <span>Settings</span>
                  </DropdownMenuItem>
                </motion.div>

                <DropdownMenuSeparator className="bg-border/10 my-1" />

                <motion.div
                  initial={{ opacity: 0, y: 5 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.2, delay: 0.2 }}
                >
                  <DropdownMenuItem className="px-3 py-2 rounded-lg focus:bg-accent/50 focus:text-accent-foreground group">
                    <motion.div
                      whileHover={{ x: 5 }}
                      transition={{ duration: 0.2 }}
                      className="mr-2 h-4 w-4 text-muted-foreground group-hover:text-foreground"
                    >
                      <LogOut className="h-4 w-4" />
                    </motion.div>
                    <span>Log out</span>
                  </DropdownMenuItem>
                </motion.div>
              </DropdownMenuContent>
            </DropdownMenu>
          </nav>
        </div>
      </div>
      <SignInDialog open={showSignIn} onOpenChange={setShowSignIn} />
      <SignUpDialog open={showSignUp} onOpenChange={setShowSignUp} />
    </motion.header>
  )
})

const MobileNav = memo(function MobileNav({
  setShowSignUp
}: {
  setShowSignIn: (show: boolean) => void
  setShowSignUp: (show: boolean) => void
}) {
  const pathname = usePathname()
  const [openItems, setOpenItems] = useState<string[]>([])

  // Mobile notifications state
  const [mobileNotifications, setMobileNotifications] = useState(3)

  // Update notifications based on path
  useEffect(() => {
    if (pathname.includes('/dashboard')) {
      setMobileNotifications(3)
    } else if (pathname.includes('/chat')) {
      setMobileNotifications(1)
    } else {
      setMobileNotifications(0)
    }
  }, [pathname])

  const toggleItem = (item: string) => {
    setOpenItems((current) => (current.includes(item) ? current.filter((i) => i !== item) : [...current, item]))
  }

  const navItems = [
    {
      title: "Dashboard",
      href: "/",
    },
    {
      title: "Chat",
      href: "/chat",
    },
    {
      title: "Demo Chat",
      href: "/demo-chat",
    },
    {
      title: "AI Configuration",
      items: [
        { title: "Models", href: "/models" },
        { title: "Tools", href: "/tools" },
        { title: "Agents", href: "/agents" },
      ],
    },
    {
      title: "Settings",
      href: "/settings",
    },
  ]

  return (
    <div className="flex flex-col space-y-6 p-4">
      <Link href="/dashboard" className="flex items-center space-x-2">
        <div className="relative flex items-center justify-center">
          <motion.div
            initial={{ rotate: 0, scale: 1 }}
            animate={{ rotate: 360, scale: [1, 1.05, 1] }}
            transition={{
              rotate: { duration: 10, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
              scale: { duration: 3, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" }
            }}
            className="absolute inset-0 rounded-full bg-gradient-to-r from-green-500 via-teal-500 to-blue-600 opacity-70 blur-sm"
          />
          <motion.div
            initial={{ rotate: 0 }}
            animate={{ rotate: -360 }}
            transition={{ duration: 15, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
            className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 via-cyan-600 to-teal-500 opacity-70 blur-[2px]"
          />
          <div className="relative h-7 w-7 rounded-full bg-background flex items-center justify-center">
            <Sparkles className="h-4 w-4 text-primary" />
          </div>
        </div>
        <span className="font-bold text-sm bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600">
          DeanmachinesAI
        </span>
      </Link>

      {/* Quick Navigation */}
      <div className="grid grid-cols-4 gap-2 p-1">
        {["dashboard", "chat", "features", "settings"].map((item, index) => {
          const isActive = pathname.includes(`/${item}`);
          const icons = {
            dashboard: <Home className="h-4 w-4" />,
            chat: <Zap className="h-4 w-4" />,
            features: <Rocket className="h-4 w-4" />,
            settings: <Settings className="h-4 w-4" />
          };
          const labels = {
            dashboard: "Home",
            chat: "Chat",
            features: "Features",
            settings: "Settings"
          };

          return (
            <motion.div
              key={item}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link
                href={`/${item}`}
                className={cn(
                  "flex flex-col items-center justify-center p-2 rounded-xl bg-background/30 backdrop-blur-md border border-border/20",
                  isActive && "bg-background/50 border-cyan-500/20 shadow-sm shadow-cyan-500/10"
                )}
              >
                <div className={cn(
                  "flex items-center justify-center h-8 w-8 rounded-lg mb-1",
                  isActive ? "bg-gradient-to-br from-green-500/20 to-blue-600/20 text-foreground" : "text-muted-foreground"
                )}>
                  {icons[item as keyof typeof icons]}
                </div>
                <span className={cn(
                  "text-xs font-medium",
                  isActive ? "bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600" : "text-muted-foreground"
                )}>
                  {labels[item as keyof typeof labels]}
                </span>
              </Link>
            </motion.div>
          );
        })}
      </div>

      {/* Integrations Button */}
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3, delay: 0.5 }}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        <Link
          href="/integrations"
          className="relative flex items-center justify-center w-full p-3 rounded-xl overflow-hidden"
        >
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-green-500/20 via-teal-500/20 to-blue-600/20"
            animate={{
              backgroundPosition: ['0% 0%', '100% 100%'],
            }}
            transition={{
              duration: 5,
              repeat: Infinity,
              repeatType: 'reverse',
              ease: 'linear',
            }}
          />
          <div className="relative flex items-center gap-3 z-10">
            <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-background/80 backdrop-blur-sm">
              <Code className="h-5 w-5 text-green-500" />
            </div>
            <div className="flex flex-col">
              <span className="text-sm font-medium bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600">
                Integrations
              </span>
              <span className="text-xs text-muted-foreground">
                Connect external services
              </span>
            </div>
          </div>
        </Link>
      </motion.div>

      <div className="flex flex-col space-y-2">
        {navItems.map((item) => (
          <div key={item.title}>
            {item.href ? (
              <Link
                href={item.href}
                className={cn(
                  "flex items-center rounded-md px-3 py-2 text-sm font-medium",
                  pathname === item.href
                    ? "bg-accent text-accent-foreground"
                    : "hover:bg-accent hover:text-accent-foreground",
                )}
              >
                {item.title}
              </Link>
            ) : (
              <>
                <button
                  onClick={() => toggleItem(item.title)}
                  className="flex w-full items-center justify-between rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground"
                >
                  {item.title}
                  <ChevronDown
                    className={cn("h-4 w-4 transition-transform", openItems.includes(item.title) && "rotate-180")}
                  />
                </button>
                {openItems.includes(item.title) && item.items && (
                  <div className="ml-4 mt-1 space-y-1">
                    {item.items.map((subItem) => (
                      <Link
                        key={subItem.title}
                        href={subItem.href}
                        className={cn(
                          "flex items-center rounded-md px-3 py-2 text-sm font-medium",
                          pathname === subItem.href
                            ? "bg-accent text-accent-foreground"
                            : "hover:bg-accent hover:text-accent-foreground",
                        )}
                      >
                        {subItem.title}
                      </Link>
                    ))}
                  </div>
                )}
              </>
            )}
          </div>
        ))}
      </div>
      <div className="flex flex-col space-y-3 mt-4">
        <Button
          variant="outline"
          size="sm"
          asChild
        >
          <Link href="/auth/signin">Sign In</Link>
        </Button>
        <Button
          variant="gradient"
          size="sm"
          onClick={() => setShowSignUp(true)}
          className="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 border-none relative overflow-hidden shadow-lg"
        >
          <motion.span
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.4, ease: 'easeInOut' }}
            className="relative z-10"
          >
            Sign Up
          </motion.span>
          {/* Animated particles/gradient effect */}
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-green-400/30 via-blue-400/30 to-purple-400/30 blur-md"
            animate={{
              backgroundPosition: ['0% 0%', '100% 100%'],
              opacity: [0.7, 1, 0.7],
            }}
            transition={{
              duration: 6,
              repeat: Infinity,
              repeatType: 'reverse',
              ease: 'linear',
            }}
          />
          {Array.from({ length: 8 }).map((_, i) => (
            <motion.div
              key={i}
              className="absolute rounded-full bg-white/30"
              style={{
                width: `${8 + Math.random() * 8}px`,
                height: `${8 + Math.random() * 8}px`,
                left: `${Math.random() * 90}%`,
                top: `${Math.random() * 80}%`,
                filter: 'blur(2px)',
                zIndex: 1,
              }}
              animate={{
                opacity: [0.7, 0.2, 0.7],
                y: [0, Math.random() * 10 - 5, 0],
                x: [0, Math.random() * 10 - 5, 0],
              }}
              transition={{
                duration: 4 + Math.random() * 2,
                repeat: Infinity,
                repeatType: 'reverse',
                ease: 'easeInOut',
                delay: i * 0.2,
              }}
            />
          ))}
        </Button>
      </div>
      <div className="flex items-center space-x-2">
        <ModeToggle />
        <Button variant="ghost" size="icon" className="h-8 w-8 relative">
          {mobileNotifications > 0 && (
            <motion.div
              className="absolute top-1 right-1 h-3.5 w-3.5 rounded-full bg-gradient-to-r from-green-500 to-blue-600 flex items-center justify-center text-[7px] font-bold text-white"
              initial={{ scale: 0, opacity: 0 }}
              animate={{
                scale: [1, 1.2, 1],
                opacity: 1,
                boxShadow: [
                  "0 0 0 0 rgba(16, 185, 129, 0.7)",
                  "0 0 0 4px rgba(16, 185, 129, 0)",
                  "0 0 0 0 rgba(16, 185, 129, 0.7)"
                ]
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                repeatType: "loop"
              }}
            >
              {mobileNotifications}
            </motion.div>
          )}
          <Bell className="h-4 w-4" />
          <span className="sr-only">Notifications</span>
        </Button>
      </div>
    </div>
  )
})

================
File: components/layout/main-sidebar.tsx
================
"use client"

import type React from "react"

import { useState, useEffect, useRef, useCallback, memo } from "react"
import Link from "next/link"
import { usePathname, useRouter } from "next/navigation"
import {
  motion,
  AnimatePresence,
  useMotionTemplate,
  useMotionValue,
  useSpring,
  useTransform,
  useScroll,
  useInView,
  useReducedMotion,
  useDragControls
} from "framer-motion"
import {
  ChevronLeft,
  ChevronRight,
  MessageSquare,
  Database,
  Wrench,
  Bot,
  Network,
  FileText,
  Settings,
  BarChart3,
  Layers,
  Code,
  Zap,
  Users,
  Sparkles,
  Rocket,
  Activity,
  LayoutDashboard
} from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { DatabaseStatus } from "@/components/ui/database-status"
import { useSupabaseFetch } from "@/hooks/use-supabase-fetch"
import { useToast } from "@/components/ui/use-toast"
import { useMediaQuery } from "@/hooks/use-media-query"

interface MainSidebarProps {
  className?: string
}

interface NavItem {
  title: string
  href: string
  icon: React.ReactNode
  submenu?: NavItem[]
  isPinned?: boolean
  isNew?: boolean
  badge?: string | null
  shortcut?: string
}

// Enhanced navigation items with additional metadata
const navItems: NavItem[] = [
  {
    title: "Dashboard",
    href: "/dashboard",
    icon: <LayoutDashboard className="h-4 w-4" />,
    isPinned: true,
    isNew: false,
    badge: null,
    shortcut: "d"
  },
  {
    title: "Chat",
    href: "/chat",
    icon: <MessageSquare className="h-4 w-4" />,
    isPinned: true,
    isNew: false,
    badge: null,
    shortcut: "c"
  },
  {
    title: "Demo Chat",
    href: "/demo-chat",
    icon: <Sparkles className="h-4 w-4" />,
    isPinned: false,
    isNew: true,
    badge: "New",
    shortcut: "n"
  },
  {
    title: "Models",
    href: "/models",
    icon: <Database className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "m"
  },
  {
    title: "Tools",
    href: "/tools",
    icon: <Wrench className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "t"
  },
  {
    title: "Agents",
    href: "/agents",
    icon: <Bot className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "a"
  },
  {
    title: "Workflows",
    href: "/workflows",
    icon: <Zap className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "w"
  },
  {
    title: "Analytics",
    href: "/analytics",
    icon: <BarChart3 className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "y"
  },
  {
    title: "Content",
    href: "#",
    icon: <FileText className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "o",
    submenu: [
      {
        title: "Blog",
        href: "/blog",
        icon: <FileText className="h-4 w-4" />,
        isPinned: false,
        isNew: false,
        badge: null,
        shortcut: "b"
      },
      {
        title: "MDX Builder",
        href: "/mdx-builder",
        icon: <Layers className="h-4 w-4" />,
        isPinned: false,
        isNew: true,
        badge: "Beta",
        shortcut: "x"
      },
      {
        title: "Code Editor",
        href: "/code-editor",
        icon: <Code className="h-4 w-4" />,
        isPinned: false,
        isNew: false,
        badge: null,
        shortcut: "e"
      },
    ],
  },
  {
    title: "Networks",
    href: "/networks",
    icon: <Network className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "k"
  },
  {
    title: "Team",
    href: "/team",
    icon: <Users className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "u"
  },
  {
    title: "Deployment",
    href: "/deployment",
    icon: <Rocket className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "p"
  },
  {
    title: "Observability",
    href: "/observability",
    icon: <Activity className="h-4 w-4" />,
    isPinned: false,
    isNew: true,
    badge: "New",
    shortcut: "v"
  },
  {
    title: "Settings",
    href: "/settings",
    icon: <Settings className="h-4 w-4" />,
    isPinned: false,
    isNew: false,
    badge: null,
    shortcut: "s"
  },
]

// Define a type for statusData[0]
type StatusData = { supabase?: boolean; libsql?: boolean };

/**
 * MainSidebar Component
 *
 * Enhanced sidebar navigation with advanced animations, customization options,
 * and performance optimizations.
 */
export const MainSidebar = memo(function MainSidebar({ className }: MainSidebarProps) {
  const pathname = usePathname()
  const router = useRouter()
  const { toast } = useToast()
  const prefersReducedMotion = useReducedMotion()
  const isMobile = useMediaQuery("(max-width: 768px)")

  // Enhanced state management
  const [collapsed, setCollapsed] = useState(false)
  const [openSubmenu, setOpenSubmenu] = useState<string | null>(null)
  const [hoveredItem, setHoveredItem] = useState<string | null>(null)
  const [isResizing, setIsResizing] = useState(false)
  const [sidebarWidth, setSidebarWidth] = useState(240)
  const [isDragging, setIsDragging] = useState(false)
  const [draggedItem, setDraggedItem] = useState<string | null>(null)
  const [customOrder, setCustomOrder] = useState<string[]>([])

  // Drag controls for resizable sidebar
  const dragControls = useDragControls()

  // Refs for animations and interactions
  const sidebarRef = useRef<HTMLDivElement>(null)
  const navRef = useRef<HTMLDivElement>(null)
  const resizeHandleRef = useRef<HTMLDivElement>(null)

  // Check if nav is in view for animations
  const isNavInView = useInView(navRef, { once: true })

  // Get scroll position for parallax effects
  const { scrollY } = useScroll()

  // Mouse position for hover effects
  const mouseX = useMotionValue(0)
  const mouseY = useMotionValue(0)

  // Spring animations for smoother motion
  const springConfig = { stiffness: 300, damping: 30 }
  const mouseXSpring = useSpring(mouseX, springConfig)
  const mouseYSpring = useSpring(mouseY, springConfig)

  // Transform values for 3D hover effects
  const rotateX = useTransform(mouseYSpring, [0, 300], prefersReducedMotion ? [0, 0] : [2, -2])
  const rotateY = useTransform(mouseXSpring, [0, 300], prefersReducedMotion ? [0, 0] : [-2, 2])

  // Gradient background animation with reduced motion preference
  const gradientRotate = useTransform(
    scrollY,
    [0, 1000],
    prefersReducedMotion ? [0, 0] : [0, 360]
  )

  // Create enhanced gradient template with motion values
  const gradientTemplate = useMotionTemplate`
    linear-gradient(
      ${gradientRotate}deg,
      rgba(34, 197, 94, 0.05) 0%,
      rgba(20, 184, 166, 0.05) 45%,
      rgba(37, 99, 235, 0.05) 100%
    )
  `

  // Parallax effect for sidebar items
  const itemY = useTransform(
    scrollY,
    [0, 500],
    prefersReducedMotion ? [0, 0] : [0, -50]
  )

  // Handle resize functionality
  const handleResize = useCallback(() => {
    if (resizeHandleRef.current) {
      setIsResizing(true)

      const onMouseMove = (e: MouseEvent) => {
        const newWidth = Math.max(64, Math.min(400, e.clientX))
        setSidebarWidth(newWidth)
      }

      const onMouseUp = () => {
        setIsResizing(false)
        document.removeEventListener('mousemove', onMouseMove)
        document.removeEventListener('mouseup', onMouseUp)
      }

      document.addEventListener('mousemove', onMouseMove)
      document.addEventListener('mouseup', onMouseUp)
    }
  }, [])

  // Fetch system status using useSupabaseFetch with error handling
  const { data: statusData, isLoading: statusLoading, error: statusError } = useSupabaseFetch<StatusData[]>({
    endpoint: "/api/system/status",
    resourceName: "System Status",
    dataKey: "status",
  })

  // Show toast notification if status fetch fails
  useEffect(() => {
    if (statusError) {
      toast({
        title: "Database Connection Error",
        description: "Could not connect to database. Some features may be limited.",
        variant: "destructive",
        duration: 5000,
      })
    }
  }, [statusError, toast])

  // Automatically open submenu based on current path
  useEffect(() => {
    if (collapsed) return

    const items = navItems.flatMap((item) => (item.submenu ? [item] : []))
    for (const item of items) {
      if (item.submenu?.some((subitem) => pathname === subitem.href)) {
        setOpenSubmenu(item.title)
        break
      }
    }
  }, [pathname, collapsed])

  const toggleSubmenu = (title: string) => {
    if (collapsed) return
    setOpenSubmenu((prev) => (prev === title ? null : title))
  }

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    const { left, top } = e.currentTarget.getBoundingClientRect()
    mouseX.set(e.clientX - left)
    mouseY.set(e.clientY - top)
  }

  // Use router for programmatic navigation
  const navigateToPage = useCallback((href: string) => {
    router.push(href)

    // Show toast notification for navigation
    toast({
      title: "Navigating",
      description: `Going to ${href}`,
      duration: 2000,
    })
  }, [router, toast])

  // Handle mobile-specific behavior
  useEffect(() => {
    if (isMobile && !collapsed) {
      setCollapsed(true)

      toast({
        title: "Mobile View",
        description: "Sidebar collapsed for better mobile experience",
        duration: 3000,
      })
    }
  }, [isMobile, collapsed, toast])

  // Use drag controls for custom drag behavior
  const startDrag = useCallback((e: React.PointerEvent<Element>, item: string) => {
    dragControls.start(e, { snapToCursor: true })
    setDraggedItem(item)
    setIsDragging(true)
  }, [dragControls])

  // Handle item hover for enhanced interactions
  const handleItemHover = (title: string) => {
    setHoveredItem(title)
  }

  const handleItemLeave = () => {
    setHoveredItem(null)
  }

  // Animation variants
  const sidebarVariants = {
    expanded: {
      width: 240,
      transition: {
        duration: 0.3,
        ease: [0.3, 0.1, 0.3, 1]
      }
    },
    collapsed: {
      width: 64,
      transition: {
        duration: 0.3,
        ease: [0.3, 0.1, 0.3, 1]
      }
    },
  }

  // Additional animation variants for future use
  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 }
  }

  const textVariants = {
    expanded: {
      opacity: 1,
      x: 0,
      display: "block",
      transition: {
        duration: 0.3,
        ease: [0.3, 0.1, 0.3, 1],
        delay: 0.1
      }
    },
    collapsed: {
      opacity: 0,
      x: -10,
      display: "none",
      transition: {
        duration: 0.2,
        ease: [0.3, 0.1, 0.3, 1]
      }
    },
  }

  const buttonVariants = {
    rest: { scale: 1 },
    hover: { scale: 1.05 },
    tap: { scale: 0.95 }
  }

  // Apply custom order to nav items if available
  const orderedItems = customOrder.length > 0
    ? [...navItems].sort((a, b) => {
        const aIndex = customOrder.indexOf(a.title)
        const bIndex = customOrder.indexOf(b.title)
        if (aIndex === -1) return 1
        if (bIndex === -1) return -1
        return aIndex - bIndex
      })
    : navItems

  // Handle drag start for item reordering
  const handleDragStart = useCallback((title: string) => {
    setIsDragging(true)
    setDraggedItem(title)
  }, [])

  // Handle drag end and update order
  const handleDragEnd = useCallback(() => {
    setIsDragging(false)
    setDraggedItem(null)
  }, [])

  // Handle item drop to reorder
  const handleDrop = useCallback((targetTitle: string) => {
    if (draggedItem && draggedItem !== targetTitle) {
      const newOrder = [...customOrder]
      const draggedIndex = newOrder.indexOf(draggedItem)
      const targetIndex = newOrder.indexOf(targetTitle)

      if (draggedIndex === -1) {
        newOrder.push(draggedItem)
      }

      if (targetIndex === -1) {
        newOrder.push(targetTitle)
      }

      // Reorder items
      if (draggedIndex !== -1) {
        newOrder.splice(draggedIndex, 1)
      }

      const newTargetIndex = newOrder.indexOf(targetTitle)
      if (newTargetIndex !== -1) {
        newOrder.splice(newTargetIndex, 0, draggedItem)
      } else {
        newOrder.push(draggedItem)
      }

      setCustomOrder(newOrder)
    }
  }, [draggedItem, customOrder])

  return (
    <motion.div
      ref={sidebarRef}
      initial={false}
      animate={collapsed ? "collapsed" : "expanded"}
      variants={sidebarVariants}
      onMouseMove={handleMouseMove}
      style={{
        rotateX,
        rotateY,
        transformPerspective: 1000,
        width: `${sidebarWidth}px`,
        transition: isResizing ? 'none' : 'width 0.3s cubic-bezier(0.3,0.1,0.3,1)',
      }}
      className={cn(
        "relative h-screen border-r bg-background/80 backdrop-blur-md shadow-sm z-20 overflow-hidden",
        collapsed ? "w-[64px]" : "w-[240px]",
        isResizing && "transition-none",
        className
      )}
    >
      {/* Animated background gradient */}
      <motion.div
        className="absolute inset-0 opacity-0 group-hover:opacity-100 pointer-events-none"
        style={{ background: gradientTemplate }}
        animate={{
          opacity: [0.05, 0.1, 0.05],
        }}
        transition={{
          duration: 10,
          repeat: Infinity,
          repeatType: 'reverse',
          ease: 'linear',
        }}
      />

      {/* Animated particles effect */}
      <motion.div
        className="absolute inset-0 overflow-hidden pointer-events-none"
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.5 }}
        transition={{ duration: 1 }}
      >
        {Array.from({ length: 20 }).map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 rounded-full bg-primary/30"
            initial={{
              x: Math.random() * 100 + "%",
              y: Math.random() * 100 + "%",
              scale: Math.random() * 0.5 + 0.5,
              opacity: Math.random() * 0.3 + 0.1
            }}
            animate={{
              y: [null, Math.random() * 100 + "%"],
              opacity: [null, Math.random() * 0.3 + 0.1]
            }}
            transition={{
              duration: Math.random() * 20 + 10,
              repeat: Infinity,
              repeatType: "reverse",
              ease: "linear"
            }}
          />
        ))}
      </motion.div>
      {/* Collapse toggle button */}
      <Button
        variant="ghost"
        size="icon"
        className="absolute -right-3 top-6 z-30 h-6 w-6 rounded-full border bg-background shadow-md hover:bg-accent"
        onClick={() => setCollapsed(!collapsed)}
      >
        {collapsed ? (
          <ChevronRight className="h-3 w-3 text-muted-foreground" />
        ) : (
          <ChevronLeft className="h-3 w-3 text-muted-foreground" />
        )}
        <span className="sr-only">{collapsed ? "Expand sidebar" : "Collapse sidebar"}</span>
      </Button>

      {/* Resizable handle */}
      <motion.div
        ref={resizeHandleRef}
        className="absolute right-0 top-0 bottom-0 w-1 cursor-ew-resize hover:bg-primary/20 z-50"
        onMouseDown={handleResize}
        initial={{ opacity: 0 }}
        whileHover={{ opacity: 1 }}
        transition={{ duration: 0.2 }}
      />

      <div className="flex h-full flex-col">
        {/* Logo */}
        <div className="flex h-16 items-center border-b px-3">
          <Link href="/dashboard" className="flex items-center gap-2 font-semibold group">
            <div className="relative flex items-center justify-center">
              <motion.div
                initial={{ rotate: 0, scale: 1 }}
                animate={{ rotate: 360, scale: [1, 1.02, 1] }}
                transition={{
                  rotate: { duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" },
                  scale: { duration: 3, repeat: Number.POSITIVE_INFINITY, ease: "easeInOut" }
                }}
                className="absolute inset-0 rounded-full bg-gradient-to-r from-green-500 via-teal-500 to-blue-600 opacity-70 blur-sm"
              />
              <motion.div
                initial={{ rotate: 0 }}
                animate={{ rotate: -360 }}
                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 via-cyan-600 to-teal-500 opacity-70 blur-[2px]"
              />
              <div className="relative h-7 w-7 rounded-full bg-background flex items-center justify-center">
                <Sparkles className="h-4 w-4 text-primary" />
              </div>
            </div>
            <motion.div
              variants={textVariants}
              className="flex flex-col"
            >
              <span className="text-sm font-bold bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600">
                DeanmachinesAI
              </span>
              <span className="text-xs text-muted-foreground">Advanced AI Platform</span>
            </motion.div>
          </Link>
        </div>

        {/* Navigation */}
        <ScrollArea className="flex-1 py-2 px-2">
          <motion.nav
            ref={navRef}
            className="grid gap-1"
            initial={{ opacity: 0, y: 20 }}
            animate={{
              opacity: isNavInView ? 1 : 0.5,
              y: isNavInView ? 0 : 10,
              scale: isNavInView ? 1 : 0.98
            }}
            transition={{
              duration: 0.3,
              staggerChildren: 0.1
            }}
            style={{ y: itemY }}
          >
            <TooltipProvider delayDuration={0}>
              {/* Use ordered items if available */}
              {(orderedItems || navItems).map((item) => {
                const isActive = item.href !== "#" && pathname === item.href
                const hasSubmenu = item.submenu && item.submenu.length > 0
                const isSubmenuOpen = openSubmenu === item.title
                const isSubmenuActive = hasSubmenu && item.submenu?.some((subItem) => pathname === subItem.href)

                if (hasSubmenu) {
                  return (
                    <div key={item.title} className="relative">
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className={cn(
                              "w-full justify-start h-9",
                              (isActive || isSubmenuActive) && "bg-accent text-accent-foreground",
                              collapsed && "justify-center px-0",
                              hoveredItem === item.title && !isActive && !isSubmenuActive && "bg-accent/20",
                              isDragging && draggedItem === item.title && "opacity-50",
                              item.isPinned && "border-l-2 border-green-500"
                            )}
                            onClick={() => toggleSubmenu(item.title)}
                            onMouseEnter={() => handleItemHover(item.title)}
                            onMouseLeave={handleItemLeave}
                            draggable={!collapsed}
                            onDragStart={() => handleDragStart(item.title)}
                            onDragEnd={handleDragEnd}
                            onDragOver={(e) => {
                              e.preventDefault()
                              e.stopPropagation()
                            }}
                            onDrop={(e) => {
                              e.preventDefault()
                              handleDrop(item.title)
                            }}
                          >
                            <span className={cn("flex items-center justify-center", !collapsed && "mr-2")}>
                              {item.icon}
                            </span>
                            <motion.span
                              variants={textVariants}
                              className="truncate"
                            >
                              {item.title}
                            </motion.span>
                            {!collapsed && (
                              <ChevronRight
                                className={cn("ml-auto h-4 w-4 transition-transform", isSubmenuOpen && "rotate-90")}
                              />
                            )}
                          </Button>
                        </TooltipTrigger>
                        {collapsed && <TooltipContent side="right">{item.title}</TooltipContent>}
                      </Tooltip>

                      <AnimatePresence>
                        {!collapsed && isSubmenuOpen && (
                          <motion.div
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: "auto" }}
                            exit={{ opacity: 0, height: 0 }}
                            transition={{ duration: 0.2 }}
                            className="overflow-hidden"
                          >
                            <div className="ml-4 mt-1 space-y-1 border-l-2 border-accent pl-2">
                              {item.submenu?.map((subItem) => {
                                const isSubActive = pathname === subItem.href
                                return (
                                  <Link key={subItem.title} href={subItem.href}>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      className={cn(
                                        "w-full justify-start h-8",
                                        isSubActive && "bg-accent/50 text-accent-foreground",
                                        hoveredItem === subItem.title && !isSubActive && "bg-accent/20"
                                      )}
                                      onMouseEnter={() => handleItemHover(subItem.title)}
                                      onMouseLeave={handleItemLeave}
                                    >
                                      <span className="mr-2">{subItem.icon}</span>
                                      <span className="truncate text-sm">{subItem.title}</span>
                                    </Button>
                                  </Link>
                                )
                              })}
                            </div>
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>
                  )
                }

                return (
                  <Tooltip key={item.title}>
                    <TooltipTrigger asChild>
                      <div className="block">
                        <motion.div
                          whileHover="hover"
                          whileTap="tap"
                          initial="hidden"
                          animate="visible"
                          variants={{
                            ...buttonVariants,
                            ...itemVariants
                          }}
                          transition={{ type: "spring", stiffness: 300, damping: 20 }}
                          onPointerDown={(e) => startDrag(e, item.title)}
                        >
                          <Button
                            variant="ghost"
                            size="sm"
                            className={cn(
                              "w-full justify-start h-9 relative overflow-hidden group",
                              isActive ? "bg-gradient-to-r from-green-500/10 to-blue-600/10 text-foreground" : "hover:bg-accent/30",
                              collapsed && "justify-center px-0",
                              hoveredItem === item.title && !isActive && "bg-accent/20",
                              isDragging && draggedItem === item.title && "opacity-50",
                              item.isPinned && "border-l-2 border-green-500"
                            )}
                            onClick={() => navigateToPage(item.href)}
                            onMouseEnter={() => handleItemHover(item.title)}
                            onMouseLeave={handleItemLeave}
                            draggable={!collapsed}
                            onDragStart={() => handleDragStart(item.title)}
                            onDragEnd={handleDragEnd}
                            onDragOver={(e) => {
                              e.preventDefault()
                              e.stopPropagation()
                            }}
                            onDrop={(e) => {
                              e.preventDefault()
                              handleDrop(item.title)
                            }}
                          >
                            {isActive && (
                              <motion.div
                                className="absolute inset-0 bg-gradient-to-r from-green-500/10 via-teal-500/10 to-blue-600/10 opacity-0 group-hover:opacity-100"
                                animate={{
                                  opacity: [0.5, 0.8, 0.5],
                                }}
                                transition={{
                                  duration: 2,
                                  repeat: Infinity,
                                  repeatType: 'reverse',
                                }}
                              />
                            )}
                            <span className={cn(
                              "flex items-center justify-center relative z-10",
                              !collapsed && "mr-2",
                              isActive && "text-primary"
                            )}>
                              {item.icon}
                            </span>
                            <motion.span
                              variants={textVariants}
                              className={cn(
                                "truncate relative z-10",
                                isActive && "font-medium"
                              )}
                            >
                              {item.title}
                            </motion.span>
                            {isActive && !collapsed && (
                              <motion.div
                                layoutId="nav-active-indicator"
                                className="absolute right-2 top-1/2 h-1.5 w-1.5 -translate-y-1/2 rounded-full bg-gradient-to-r from-green-500 to-blue-600"
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                exit={{ opacity: 0 }}
                                transition={{ duration: 0.2 }}
                              />
                            )}
                          </Button>
                        </motion.div>
                      </div>
                    </TooltipTrigger>
                    {collapsed && <TooltipContent side="right">{item.title}</TooltipContent>}
                  </Tooltip>
                )
              })}
            </TooltipProvider>
          </motion.nav>
        </ScrollArea>

        {/* Footer */}
        <motion.div
          className="border-t p-3"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5, duration: 0.3 }}
        >
          {collapsed ? (
            <Tooltip>
              <TooltipTrigger asChild>
                <motion.div
                  className="flex justify-center"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <DatabaseStatus
                    showLabels={false}
                    className="relative"
                  />
                  {statusLoading && (
                    <motion.div
                      className="absolute inset-0 bg-gradient-to-r from-green-500/20 to-blue-600/20 rounded-full"
                      animate={{ opacity: [0.2, 0.5, 0.2] }}
                      transition={{ duration: 1.5, repeat: Infinity }}
                    />
                  )}
                </motion.div>
              </TooltipTrigger>
              <TooltipContent side="right" className="flex flex-col gap-1">
                <div className="text-xs font-medium">Database Status</div>
                {statusData && statusData[0] && (
                  <div className="text-xs text-muted-foreground">
                    Supabase: {(statusData[0] as StatusData).supabase ? 'Connected' : 'Error'}
                    <br />
                    LibSQL: {(statusData[0] as StatusData).libsql ? 'Connected' : 'Error'}
                  </div>
                )}
              </TooltipContent>
            </Tooltip>
          ) : (
            <motion.div
              className="flex items-center justify-between"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.6, duration: 0.3 }}
            >
              <span className="text-xs text-muted-foreground">Database</span>
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="relative"
              >
                <DatabaseStatus showLabels={false} />
                {statusLoading && (
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-green-500/20 to-blue-600/20 rounded-full"
                    animate={{ opacity: [0.2, 0.5, 0.2] }}
                    transition={{ duration: 1.5, repeat: Infinity }}
                  />
                )}
              </motion.div>
            </motion.div>
          )}

          <motion.div
            className="mt-2 text-xs text-center text-muted-foreground"
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.7 }}
            transition={{ delay: 0.8, duration: 0.5 }}
          >
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-green-500 to-blue-600 font-medium">
              DeanmachinesAI
            </span> v1.0
          </motion.div>
        </motion.div>
      </div>
    </motion.div>
  )
})

================
File: components/chat/ai-sdk-chat.tsx
================
'use client';

import React, { useState, useRef, useEffect } from 'react';
import { useChat, Message } from 'ai/react';
import { ChatSidebar } from './chat-sidebar';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { nanoid } from 'nanoid';
import { renderContent } from './ai-sdk-chatHelper';
import { useToolExecutor } from '@/hooks/use-executor';
import {
  Send, XCircle, Paperclip,
  FileText, Mic, Copy, Check,
  Maximize2, Minimize2, ThumbsUp, ThumbsDown,
  Zap, Settings, ChevronLeft,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { toast } from '@/components/ui/use-toast';

export interface AiSdkChatProps {
  apiEndpoint?: string;
  initialMessages?: Message[];
  initialThreadId?: string;
  modelId?: string;
  temperature?: number;
  maxTokens?: number;
  tools?: string[];
  className?: string;
  provider?: string;
  systemPrompt?: string;
  personaId?: string;
  streamProtocol?: 'data' | 'text';
  toolChoice?: string;
  maxSteps?: number;
  middleware?: unknown;
  agentId?: string;
}

export interface FileAttachment {
  id: string;
  name: string;
  type: string;
  url: string;
  size: number;
}

export interface ImageAttachment {
  id: string;
  url: string;
  type: 'image';
  name?: string; // Add name for compatibility with alt text
  width?: number;
  height?: number;
}

export interface ToolCall {
  id: string;
  name: string;
  args: unknown;
  result?: string;
  status: 'pending' | 'completed' | 'error';
}

export function AiSdkChat({
  apiEndpoint = '/api/chat/ai-sdk',
  initialMessages = [],
  initialThreadId,
  modelId = 'gemini-2.0-flash-exp',
  temperature = 0.7,
  maxTokens = 8192,
  tools = [],
  className,
  provider = 'google',
  systemPrompt,
  personaId,
  streamProtocol = 'data',
  toolChoice = 'auto',
  maxSteps = 5,
  middleware,
  agentId,
}: AiSdkChatProps) {
  const {
    messages,
    input,
    handleInputChange,
    handleSubmit,
    isLoading,
    stop,
  } = useChat({
    api: agentId ? `/api/agents/${agentId}/run` : apiEndpoint,
    id: initialThreadId,
    initialMessages,
    body: {
      modelId,
      temperature,
      maxTokens,
      tools,
      provider,
      systemPrompt,
      personaId,
      streamProtocol,
      toolChoice,
      maxSteps,
      middleware,
      agentId,
    },
    streamProtocol,
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const formRef = useRef<HTMLFormElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [attachments, setAttachments] = useState<FileAttachment[]>([]);
  const [imageAttachments, setImageAttachments] = useState<ImageAttachment[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isSpeechRecording, setIsSpeechRecording] = useState(false);
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [showSettings, setShowSettings] = useState(false);

  const [selectedModel, setSelectedModel] = useState(modelId);
  const [selectedProvider, setSelectedProvider] = useState<string>(provider);
  const [selectedTemperature, setSelectedTemperature] = useState(temperature);
  const [selectedMaxTokens, setSelectedMaxTokens] = useState(maxTokens);
  const [enabledTools, setEnabledTools] = useState<string[]>(tools);
  const [isCopied, setIsCopied] = useState(false);

  const { executeTool, isExecuting: isToolExecuting } = useToolExecutor({
    toolId: 'default-tool-id',
    onSuccess: (_data) => {
      // Optionally handle tool success
    },
    onError: (err) => {
      toast({ title: 'Tool execution error', description: err.message, variant: 'destructive' });
    },
  });

  const availableFunctions = {
    'web-search': {
      description: 'Search the web for information',
      parameters: {
        type: 'object',
        properties: {
          query: {
            type: 'string',
            description: 'The search query',
          },
        },
        required: ['query'],
      },
      execute: async (args: { query: string }) => executeTool({ toolName: 'web-search', args }),
    },
    'weather': {
      description: 'Get current weather information',
      parameters: {
        type: 'object',
        properties: {
          location: {
            type: 'string',
            description: 'The city or location',
          },
        },
        required: ['location'],
      },
      execute: async (args: { location: string }) => executeTool({ toolName: 'weather', args }),
    },
    'image-generation': {
      description: 'Generate an image based on a description',
      parameters: {
        type: 'object',
        properties: {
          prompt: {
            type: 'string',
            description: 'Description of the image to generate',
          },
          style: {
            type: 'string',
            description: 'Style of the image (vivid, natural, cinematic, anime, digital-art)',
            enum: ['vivid', 'natural', 'cinematic', 'anime', 'digital-art'],
            default: 'vivid',
          },
        },
        required: ['prompt'],
      },
      execute: async (args: { prompt: string; style?: string }) => executeTool({ toolName: 'image-generation', args }),
    },
  };

  const [functionCalls, setFunctionCalls] = useState<ToolCall[]>([]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleFileSelect = () => fileInputRef.current?.click();
  const handleFileUpload = async (files: FileList | null) => {
    if (!files) return;
    setIsUploading(true);
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      await new Promise(resolve => setTimeout(resolve, 500));
      setUploadProgress((prev) => prev + (100 / files.length));
      const newAttachment: FileAttachment = {
        id: nanoid(),
        name: file.name || 'Unnamed File',
        type: file.type.startsWith('image/') ? 'image' : 'file',
        url: URL.createObjectURL(file),
        size: file.size,
      };
      if (newAttachment.type === 'image') {
        setImageAttachments(prev => [...prev, { ...newAttachment, type: 'image', name: newAttachment.name }]);
      } else {
        setAttachments(prev => [...prev, newAttachment]);
      }
    }
    setIsUploading(false);
    setUploadProgress(0);
    toast({ title: 'Files uploaded', description: `${files.length} file(s) processed.` });
  };

  const handleSpeechInput = () => {
    setIsSpeechRecording(!isSpeechRecording);
    toast({ title: isSpeechRecording ? 'Recording stopped' : 'Recording started...' });
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleSubmit();
    }
  };

  const handleFunctionCall = async (toolName: string, args: Record<string, unknown>) => {
    const toolCallId = nanoid();
    setFunctionCalls(prev => [...prev, { id: toolCallId, name: toolName, args, status: 'pending' }]);
    let result: string | undefined;
    let status: 'completed' | 'error' = 'completed';
    try {
      if (availableFunctions[toolName as keyof typeof availableFunctions]) {
        // Type-safe call
        result = await (availableFunctions[toolName as keyof typeof availableFunctions].execute as (args: Record<string, unknown>) => Promise<string>)(args);
        toast({ title: `Tool ${toolName} executed`, description: `Result: ${JSON.stringify(result)}` });
      } else {
        throw new Error(`Tool ${toolName} not found`);
      }
    } catch (e) {
      const errMsg = e instanceof Error ? e.message : String(e);
      result = errMsg || 'Error executing tool';
      status = 'error';
      toast({ title: `Tool ${toolName} error`, description: result, variant: 'destructive' });
    }
    setFunctionCalls(prev => prev.map(call => call.id === toolCallId ? { ...call, result, status } : call));
  };

  return (
    <div className={cn('flex h-full', className, isFullScreen ? 'fixed inset-0 z-50 bg-background' : '')}>
      <ChatSidebar
        models={[]}
        tools={[]}
        threads={[]}
        selectedModelId={selectedModel}
        selectedThreadId={initialThreadId || ''}
        selectedTools={enabledTools}
        temperature={selectedTemperature}
        maxTokens={selectedMaxTokens}
        onModelChange={setSelectedModel}
        onThreadChange={() => {}}
        onToolToggle={() => {}}
        onTemperatureChange={setSelectedTemperature}
        onMaxTokensChange={setSelectedMaxTokens}
        onCreateThread={() => {}}
      />
      <div className="flex flex-col flex-1 h-full bg-muted/50 dark:bg-muted/20">
        <header className="flex items-center justify-between p-4 border-b bg-background">
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="icon" className="md:hidden" onClick={() => {}}>
              <ChevronLeft className="h-5 w-5" />
            </Button>
            <h2 className="text-lg font-semibold">New Chat</h2>
          </div>
          <div className="flex items-center gap-2">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon" onClick={() => setShowSettings(true)}>
                    <Settings className="h-5 w-5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Chat Settings</p></TooltipContent>
              </Tooltip>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon" onClick={() => setIsFullScreen(!isFullScreen)}>
                    {isFullScreen ? <Minimize2 className="h-5 w-5" /> : <Maximize2 className="h-5 w-5" />}
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>{isFullScreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}</p></TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </header>

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((m: Message, index: number) => (
            <div key={m.id || `message-${index}`} className={cn('flex', m.role === 'user' ? 'justify-end' : 'justify-start')}>
              <Card className={cn('max-w-[75%]', m.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-card')}>
                <CardContent className="p-3">
                  <div className="text-sm">
                    {renderContent(m.content)}
                  </div>
                  {m.role === 'assistant' && (
                    <div className="flex items-center justify-end gap-1 mt-2">
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-6 w-6 text-muted-foreground hover:text-foreground">
                              <ThumbsUp className="h-3 w-3" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent><p>Good response</p></TooltipContent>
                        </Tooltip>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-6 w-6 text-muted-foreground hover:text-foreground">
                              <ThumbsDown className="h-3 w-3" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent><p>Bad response</p></TooltipContent>
                        </Tooltip>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-6 w-6 text-muted-foreground hover:text-foreground" onClick={() => { navigator.clipboard.writeText(m.content); setIsCopied(true); setTimeout(() => setIsCopied(false), 1500); }}>
                              {isCopied ? <Check className="h-3 w-3 text-green-500" /> : <Copy className="h-3 w-3" />}
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent><p>{isCopied ? 'Copied!' : 'Copy text'}</p></TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          ))}

          {functionCalls.map((call) => (
            <div key={call.id} className="border rounded-md p-2 bg-muted/50">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Zap className={cn(
                    'h-4 w-4',
                    call.status === 'pending' ? 'text-yellow-500 animate-pulse' :
                    call.status === 'completed' ? 'text-green-500' :
                    'text-red-500'
                  )} />
                  <span className="font-medium">{call.name}</span>
                </div>
                <Badge variant={
                  call.status === 'completed' ? 'success' :
                  call.status === 'error' ? 'destructive' :
                  'secondary'
                }>{call.status}</Badge>
              </div>
              <div className="mt-1 text-xs">
                <p className="text-muted-foreground">Arguments: {JSON.stringify(call.args)}</p>
                {call.result && (
                  <p className="mt-1">
                    Result: <span className={call.status === 'error' ? 'text-red-500' : ''}>{call.result}</span>
                  </p>
                )}
              </div>
            </div>
          ))}

          {(attachments.length > 0 || imageAttachments.length > 0) && (
            <div className="flex flex-wrap gap-2 mt-2">
              {imageAttachments.map((attachment) => (
                <div key={attachment.id} className="relative group">
                  <div className="relative w-24 h-24 rounded-md overflow-hidden border">
                    <img src={attachment.url} alt={attachment.name || 'Image'} className="w-full h-full object-cover" />
                    <Button
                      variant="destructive"
                      size="icon"
                      className="h-5 w-5 absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity"
                      onClick={() => setImageAttachments(prev => prev.filter(a => a.id !== attachment.id))}
                    >
                      <XCircle className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
              ))}
              {attachments.filter(att => att.type !== 'image').map((attachment) => (
                <div key={attachment.id} className="relative group">
                    <div className="flex items-center p-2 border rounded-md bg-muted">
                        <FileText className="h-4 w-4 mr-2 text-blue-500" />
                        <span className="text-xs truncate max-w-[100px]">{attachment.name || 'File'}</span>
                        <Button
                        variant="ghost"
                        size="icon"
                        className="h-5 w-5 ml-1 opacity-0 group-hover:opacity-100 transition-opacity"
                        onClick={() => setAttachments(prev => prev.filter(a => a.id !== attachment.id))}
                        >
                        <XCircle className="h-3 w-3" />
                        </Button>
                    </div>
                </div>
              ))}
            </div>
          )}

          {isUploading && (
            <div className="mt-2">
              <Progress value={uploadProgress} className="h-1" />
              <p className="text-xs text-muted-foreground mt-1">Uploading... {uploadProgress.toFixed(0)}%</p>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        <div className="border-t p-4 bg-background">
          <form ref={formRef} onSubmit={handleSubmit} className="space-y-2">
            <div className="flex items-end gap-2">
              <Textarea
                ref={textareaRef}
                value={input}
                onChange={handleInputChange}
                onKeyDown={handleKeyDown}
                placeholder="Type a message..."
                className="min-h-[60px] max-h-[200px] resize-none flex-1 p-2 border rounded-md focus:ring-ring focus:ring-1"
                disabled={isLoading || isToolExecuting}
              />
              <div className="flex flex-col gap-2">
                {isLoading || isToolExecuting ? (
                  <Button type="button" variant="destructive" size="icon" onClick={stop}>
                    <XCircle className="h-4 w-4" />
                  </Button>
                ) : (
                  <Button type="submit" size="icon" disabled={input.trim() === '' && attachments.length === 0 && imageAttachments.length === 0}>
                    <Send className="h-4 w-4" />
                  </Button>
                )}
              </div>
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-1">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button type="button" variant="ghost" size="icon" className="h-8 w-8" onClick={handleFileSelect} disabled={isUploading}>
                        <Paperclip className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent><p>Attach files</p></TooltipContent>
                  </Tooltip>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        type="button"
                        variant={isSpeechRecording ? "secondary" : "ghost"}
                        size="icon"
                        className={`h-8 w-8 ${isSpeechRecording ? "animate-pulse" : ""}`}
                        onClick={handleSpeechInput}
                      >
                        <Mic className={`h-4 w-4 ${isSpeechRecording ? "text-red-500" : ""}`} />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent><p>{isSpeechRecording ? "Stop recording" : "Voice input"}</p></TooltipContent>
                  </Tooltip>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => handleFunctionCall('web-search', { query: 'latest AI news' })}
                      >
                        <Zap className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent><p>Test web-search</p></TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <input
                  type="file"
                  ref={fileInputRef}
                  className="hidden"
                  multiple
                  onChange={(e) => handleFileUpload(e.target.files)}
                  title="Attach files"
                  placeholder="Attach files"
                />
              </div>
              <div className="text-xs text-muted-foreground">
                {enabledTools.length > 0 && (
                  <div className="flex items-center gap-1">
                    <Zap className="h-3 w-3" />
                    <span>Using {enabledTools.length} tool(s)</span>
                  </div>
                )}
              </div>
            </div>
          </form>
        </div>
      </div>

      <Dialog open={showSettings} onOpenChange={setShowSettings}>
        <DialogContent className="sm:max-w-[525px]">
          <DialogHeader>
            <DialogTitle>Chat Settings</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4 max-h-[70vh] overflow-y-auto pr-2">
            <div className="space-y-2">
              <Label htmlFor="provider">Provider</Label>
              <select
                id="provider"
                className="w-full p-2 border rounded-md bg-background text-foreground"
                value={selectedProvider}
                onChange={(e) => setSelectedProvider(e.target.value)}
                aria-label="Select Provider"
              >
                <option value="all">All Providers</option>
              </select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="model">Model</Label>
              <select
                id="model"
                className="w-full p-2 border rounded-md bg-background text-foreground"
                value={selectedModel}
                onChange={(e) => setSelectedModel(e.target.value)}
                aria-label="Select Model"
                title="Select a model"
              >
                <option value={modelId}>{modelId}</option>
              </select>
            </div>

            <div className="space-y-2">
              <div className="flex justify-between">
                <Label htmlFor="temperature">Temperature: {selectedTemperature.toFixed(1)}</Label>              </div>
              <input
                id="temperature"
                type="range"
                min={0}
                max={1}
                step={0.1}
                value={selectedTemperature}
                onChange={(e) => setSelectedTemperature(parseFloat(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"
                title="Temperature"
                aria-label="Temperature"
              />
            </div>

            <div className="space-y-2">
              <div className="flex justify-between">
                <Label htmlFor="max-tokens">Max Tokens: {selectedMaxTokens}</Label>
              </div>
              <input
                id="max-tokens"
                type="range"
                min={256}
                max={8192}
                step={256}
                value={selectedMaxTokens}
                onChange={(e) => setSelectedMaxTokens(parseInt(e.target.value))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"
                title="Max tokens"
                aria-label="Max tokens"
              />
            </div>

            <div className="space-y-2 border-t pt-4">
              <Label className="font-medium text-base">Tools</Label>
              <div className="space-y-2 grid grid-cols-2 gap-x-4 gap-y-2">
                {Object.entries(availableFunctions).map(([toolKey, toolConfig]) => (
                  <div key={toolKey} className="flex items-center justify-between">
                    <Label htmlFor={toolKey} className="cursor-pointer text-sm">{toolConfig.description.split(' ')[0]} {toolConfig.description.split(' ')[1]}</Label>
                    <Switch
                      id={toolKey}
                      checked={tools.includes(toolKey)}
                      onCheckedChange={(checked) => {
                        setEnabledTools(prev =>
                          checked
                            ? [...prev, toolKey]
                            : prev.filter(t => t !== toolKey)
                        );
                      }}
                    />
                  </div>
                ))}
              </div>
            </div>

          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}




================================================================
End of Codebase
================================================================
