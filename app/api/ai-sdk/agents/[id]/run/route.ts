import { NextResponse } from "next/server";
import { streamText, CoreMessage, createDataStreamResponse } from 'ai';
import { handleApiError } from "@/lib/api-error-handler";
import { createTrace, logEvent } from "@/lib/langfuse-integration";
import { v4 as uuidv4 } from "uuid";
import { agentRegistry } from "@/lib/agents/registry";
import { runAgent } from "@/lib/agents/agent-service";
import { AgentRunOptions } from "@/lib/agents/agent.types";
// personaManager and createMemoryThread/loadMessages might not be directly needed here if runAgent handles them
import { personaManager } from "@/lib/agents/personas/persona-manager";
import { createMemoryThread, saveMessage, loadMessages, loadAgentState, saveAgentState  } from "@/lib/memory/memory";

/**
 * POST /api/ai-sdk/agents/[id]/run
 *
 * Run an agent with the AI SDK
 */
/**
 * Handles POST requests to run a specific AI agent.
 *
 * This function processes an incoming request to execute an agent identified by `id`.
 * It extracts parameters from the request body such as input, thread ID, and model
 * configuration (temperature, maxTokens, systemPrompt, toolChoice).
 *
 * The function performs the following steps:
 * 1. Parses the request body.
 * 2. Generates a new thread ID if one is not provided.
 * 3. Initializes the agent registry and retrieves the specified agent.
 * 4. Returns a 404 error if the agent is not found.
 * 5. Initializes the persona manager if the agent has an associated persona.
 * 6. Creates a trace for the agent run, capturing metadata like agent ID, name, thread ID, and model ID.
 * 7. Constructs options for the agent run, including temperature, max tokens, system prompt, tool choice, and trace ID.
 * 8. Executes the agent with the provided input, thread ID, and options.
 * 9. Streams the agent's response back to the client, including `x-thread-id` and `x-agent-id` headers.
 * 10. Handles any errors encountered during the process using `handleApiError`.
 *
 * @param request The incoming Next.js API `Request` object.
 * @param params An object containing the route parameters.
 * @param params.id The unique identifier of the agent to be run.
 * @returns A `Promise` that resolves to a `NextResponse`.
 *          If successful and streaming is enabled, it returns a streaming text response.
 *          If the agent is not found, it returns a JSON response with a 404 status.
 *          In case of other errors, it returns a response generated by `handleApiError`.
 */
export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    const body = await request.json();
    const { 
      input, 
      threadId: providedThreadId, 
      stream = true,
      temperature,
      maxTokens,
      systemPrompt,
      toolChoice
    } = body;

    // Generate thread ID if not provided
    const threadId = providedThreadId || uuidv4();

    // Initialize agent registry
    await agentRegistry.init();

    // Get agent from registry
    const agent = await agentRegistry.getAgent(id);
    
    if (!agent) {
      return NextResponse.json({ error: "Agent not found" }, { status: 404 });
    }

    // Initialize persona manager if agent has a persona_id
    if ((agent as any).persona_id) {
      await personaManager.init();
    }
    // If agent has a persona_id, ensure persona manager is initialized
    // Create trace for this run
    const trace = await createTrace({
      name: "agent_run",
      userId: threadId,
      metadata: {
        agentId: id,
        agentName: agent.name,
        threadId,
        modelId: agent.modelId,
        messageCount: input ? 1 : 0,
        hasPersona: !!(agent as any).persona_id
      }
    });

    // Run options
    const options = {
      temperature: temperature,
      maxTokens: maxTokens,
      systemPrompt: systemPrompt,
      toolChoice: toolChoice,
      traceId: trace?.id,
    };

    // Run the agent
    const response = await runAgent(id, threadId, input, options);

    // Return the stream as a streaming text response
    return response.streamResult?.toDataStreamResponse({
      headers: {
      'x-thread-id': threadId,
      'x-agent-id': id
      }
    });
  } catch (error) {
    return handleApiError(error);
  }
}
